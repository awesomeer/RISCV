
main:     file format elf32-littleriscv


Disassembly of section .text:

00000000 <_start>:

extern void main(void);
void _start(void){
       0:	ff010113          	addi	sp,sp,-16
       4:	00112623          	sw	ra,12(sp)
    main();
       8:	569010ef          	jal	ra,1d70 <main>
    while(1);
       c:	0000006f          	j	c <_start+0xc>

00000010 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
      10:	00d67663          	bgeu	a2,a3,1c <_out_buffer+0xc>
    ((char*)buffer)[idx] = character;
      14:	00c585b3          	add	a1,a1,a2
      18:	00a58023          	sb	a0,0(a1)
  }
}
      1c:	00008067          	ret

00000020 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
      20:	00008067          	ret

00000024 <_out_fct>:

// internal output function wrapper
static inline void _out_fct(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)idx; (void)maxlen;
  if (character) {
      24:	02050263          	beqz	a0,48 <_out_fct+0x24>
{
      28:	ff010113          	addi	sp,sp,-16
      2c:	00112623          	sw	ra,12(sp)
    // buffer is the output fct pointer
    ((out_fct_wrap_type*)buffer)->fct(character, ((out_fct_wrap_type*)buffer)->arg);
      30:	0005a783          	lw	a5,0(a1)
      34:	0045a583          	lw	a1,4(a1)
      38:	000780e7          	jalr	a5
  }
}
      3c:	00c12083          	lw	ra,12(sp)
      40:	01010113          	addi	sp,sp,16
      44:	00008067          	ret
      48:	00008067          	ret

0000004c <_out_rev>:
}


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
      4c:	fd010113          	addi	sp,sp,-48
      50:	02112623          	sw	ra,44(sp)
      54:	02812423          	sw	s0,40(sp)
      58:	02912223          	sw	s1,36(sp)
      5c:	03212023          	sw	s2,32(sp)
      60:	01312e23          	sw	s3,28(sp)
      64:	01412c23          	sw	s4,24(sp)
      68:	01512a23          	sw	s5,20(sp)
      6c:	01612823          	sw	s6,16(sp)
      70:	01712623          	sw	s7,12(sp)
      74:	01812423          	sw	s8,8(sp)
      78:	01912223          	sw	s9,4(sp)
      7c:	01a12023          	sw	s10,0(sp)
      80:	00050913          	mv	s2,a0
      84:	00058993          	mv	s3,a1
      88:	00060a93          	mv	s5,a2
      8c:	00068a13          	mv	s4,a3
      90:	00070d13          	mv	s10,a4
      94:	00078c93          	mv	s9,a5
      98:	00080b93          	mv	s7,a6
      9c:	00088c13          	mv	s8,a7
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
      a0:	0038f793          	andi	a5,a7,3
      a4:	00060493          	mv	s1,a2
      a8:	02079863          	bnez	a5,d8 <_out_rev+0x8c>
    for (size_t i = len; i < width; i++) {
      ac:	419804b3          	sub	s1,a6,s9
      b0:	00c484b3          	add	s1,s1,a2
      b4:	00060413          	mv	s0,a2
      b8:	0b0cfe63          	bgeu	s9,a6,174 <_out_rev+0x128>
      out(' ', buffer, idx++, maxlen);
      bc:	00040613          	mv	a2,s0
      c0:	00140413          	addi	s0,s0,1
      c4:	000a0693          	mv	a3,s4
      c8:	00098593          	mv	a1,s3
      cc:	02000513          	li	a0,32
      d0:	000900e7          	jalr	s2
    for (size_t i = len; i < width; i++) {
      d4:	fe9414e3          	bne	s0,s1,bc <_out_rev+0x70>
    }
  }

  // reverse string
  while (len) {
      d8:	019d0b33          	add	s6,s10,s9
      dc:	000b0413          	mv	s0,s6
    out(buf[--len], buffer, idx++, maxlen);
      e0:	009b0b33          	add	s6,s6,s1
  while (len) {
      e4:	020c8263          	beqz	s9,108 <_out_rev+0xbc>
    out(buf[--len], buffer, idx++, maxlen);
      e8:	000a0693          	mv	a3,s4
      ec:	408b0633          	sub	a2,s6,s0
      f0:	00098593          	mv	a1,s3
      f4:	fff44503          	lbu	a0,-1(s0)
      f8:	000900e7          	jalr	s2
  while (len) {
      fc:	fff40413          	addi	s0,s0,-1
     100:	ffa414e3          	bne	s0,s10,e8 <_out_rev+0x9c>
    out(buf[--len], buffer, idx++, maxlen);
     104:	019484b3          	add	s1,s1,s9
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
     108:	002c7c13          	andi	s8,s8,2
     10c:	020c0663          	beqz	s8,138 <_out_rev+0xec>
    while (idx - start_idx < width) {
     110:	41548ab3          	sub	s5,s1,s5
     114:	037af263          	bgeu	s5,s7,138 <_out_rev+0xec>
      out(' ', buffer, idx++, maxlen);
     118:	00048613          	mv	a2,s1
     11c:	000a0693          	mv	a3,s4
     120:	00148493          	addi	s1,s1,1
     124:	00098593          	mv	a1,s3
     128:	02000513          	li	a0,32
     12c:	000900e7          	jalr	s2
    while (idx - start_idx < width) {
     130:	001a8a93          	addi	s5,s5,1
     134:	ff7ae2e3          	bltu	s5,s7,118 <_out_rev+0xcc>
    }
  }

  return idx;
}
     138:	00048513          	mv	a0,s1
     13c:	02c12083          	lw	ra,44(sp)
     140:	02812403          	lw	s0,40(sp)
     144:	02412483          	lw	s1,36(sp)
     148:	02012903          	lw	s2,32(sp)
     14c:	01c12983          	lw	s3,28(sp)
     150:	01812a03          	lw	s4,24(sp)
     154:	01412a83          	lw	s5,20(sp)
     158:	01012b03          	lw	s6,16(sp)
     15c:	00c12b83          	lw	s7,12(sp)
     160:	00812c03          	lw	s8,8(sp)
     164:	00412c83          	lw	s9,4(sp)
     168:	00012d03          	lw	s10,0(sp)
     16c:	03010113          	addi	sp,sp,48
     170:	00008067          	ret
    for (size_t i = len; i < width; i++) {
     174:	00060493          	mv	s1,a2
     178:	f61ff06f          	j	d8 <_out_rev+0x8c>

0000017c <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
     17c:	ff010113          	addi	sp,sp,-16
     180:	00112623          	sw	ra,12(sp)
     184:	00080293          	mv	t0,a6
     188:	00088f93          	mv	t6,a7
     18c:	01012e03          	lw	t3,16(sp)
     190:	01412803          	lw	a6,20(sp)
     194:	01812883          	lw	a7,24(sp)
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
     198:	0028f313          	andi	t1,a7,2
     19c:	08031c63          	bnez	t1,234 <_ntoa_format+0xb8>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
     1a0:	02080663          	beqz	a6,1cc <_ntoa_format+0x50>
     1a4:	0018f313          	andi	t1,a7,1
     1a8:	18030c63          	beqz	t1,340 <_ntoa_format+0x1c4>
     1ac:	00029663          	bnez	t0,1b8 <_ntoa_format+0x3c>
     1b0:	00c8f313          	andi	t1,a7,12
     1b4:	00030463          	beqz	t1,1bc <_ntoa_format+0x40>
      width--;
     1b8:	fff80813          	addi	a6,a6,-1
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     1bc:	05c7f063          	bgeu	a5,t3,1fc <_ntoa_format+0x80>
     1c0:	01f00313          	li	t1,31
     1c4:	00f37a63          	bgeu	t1,a5,1d8 <_ntoa_format+0x5c>
     1c8:	0340006f          	j	1fc <_ntoa_format+0x80>
     1cc:	03c7f463          	bgeu	a5,t3,1f4 <_ntoa_format+0x78>
     1d0:	01f00313          	li	t1,31
     1d4:	02f36063          	bltu	t1,a5,1f4 <_ntoa_format+0x78>
      buf[len++] = '0';
     1d8:	03000e93          	li	t4,48
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     1dc:	02000f13          	li	t5,32
      buf[len++] = '0';
     1e0:	00178793          	addi	a5,a5,1
     1e4:	00f70333          	add	t1,a4,a5
     1e8:	ffd30fa3          	sb	t4,-1(t1)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     1ec:	01c7f463          	bgeu	a5,t3,1f4 <_ntoa_format+0x78>
     1f0:	ffe798e3          	bne	a5,t5,1e0 <_ntoa_format+0x64>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     1f4:	0018f313          	andi	t1,a7,1
     1f8:	02030e63          	beqz	t1,234 <_ntoa_format+0xb8>
     1fc:	0307fc63          	bgeu	a5,a6,234 <_ntoa_format+0xb8>
     200:	01f00313          	li	t1,31
      buf[len++] = '0';
     204:	03000e93          	li	t4,48
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     208:	02000f13          	li	t5,32
     20c:	00f36c63          	bltu	t1,a5,224 <_ntoa_format+0xa8>
      buf[len++] = '0';
     210:	00178793          	addi	a5,a5,1
     214:	00f70333          	add	t1,a4,a5
     218:	ffd30fa3          	sb	t4,-1(t1)
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     21c:	01078a63          	beq	a5,a6,230 <_ntoa_format+0xb4>
     220:	ffe798e3          	bne	a5,t5,210 <_ntoa_format+0x94>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
     224:	0108f313          	andi	t1,a7,16
     228:	00031a63          	bnez	t1,23c <_ntoa_format+0xc0>
     22c:	0680006f          	j	294 <_ntoa_format+0x118>
      buf[len++] = '0';
     230:	00080793          	mv	a5,a6
  if (flags & FLAGS_HASH) {
     234:	0108f313          	andi	t1,a7,16
     238:	04030063          	beqz	t1,278 <_ntoa_format+0xfc>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
     23c:	4008f313          	andi	t1,a7,1024
     240:	00031863          	bnez	t1,250 <_ntoa_format+0xd4>
     244:	00078663          	beqz	a5,250 <_ntoa_format+0xd4>
     248:	04fe0e63          	beq	t3,a5,2a4 <_ntoa_format+0x128>
     24c:	05078c63          	beq	a5,a6,2a4 <_ntoa_format+0x128>
      len--;
      if (len && (base == 16U)) {
        len--;
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     250:	01000313          	li	t1,16
     254:	066f8a63          	beq	t6,t1,2c8 <_ntoa_format+0x14c>
      buf[len++] = 'x';
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     258:	00200313          	li	t1,2
     25c:	086f8863          	beq	t6,t1,2ec <_ntoa_format+0x170>
      buf[len++] = 'b';
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
     260:	01f00313          	li	t1,31
     264:	02f36863          	bltu	t1,a5,294 <_ntoa_format+0x118>
      buf[len++] = '0';
     268:	00f70333          	add	t1,a4,a5
     26c:	03000e13          	li	t3,48
     270:	01c30023          	sb	t3,0(t1)
     274:	00178793          	addi	a5,a5,1
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
     278:	01f00313          	li	t1,31
     27c:	00f36c63          	bltu	t1,a5,294 <_ntoa_format+0x118>
    if (negative) {
     280:	08028463          	beqz	t0,308 <_ntoa_format+0x18c>
      buf[len++] = '-';
     284:	00f70333          	add	t1,a4,a5
     288:	02d00e13          	li	t3,45
     28c:	01c30023          	sb	t3,0(t1)
     290:	00178793          	addi	a5,a5,1
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
     294:	db9ff0ef          	jal	ra,4c <_out_rev>
}
     298:	00c12083          	lw	ra,12(sp)
     29c:	01010113          	addi	sp,sp,16
     2a0:	00008067          	ret
      len--;
     2a4:	fff78313          	addi	t1,a5,-1
      if (len && (base == 16U)) {
     2a8:	00030c63          	beqz	t1,2c0 <_ntoa_format+0x144>
     2ac:	01000e13          	li	t3,16
        len--;
     2b0:	ffe78793          	addi	a5,a5,-2
      if (len && (base == 16U)) {
     2b4:	01cf8a63          	beq	t6,t3,2c8 <_ntoa_format+0x14c>
      len--;
     2b8:	00030793          	mv	a5,t1
     2bc:	f9dff06f          	j	258 <_ntoa_format+0xdc>
     2c0:	00030793          	mv	a5,t1
     2c4:	f8dff06f          	j	250 <_ntoa_format+0xd4>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     2c8:	0208f313          	andi	t1,a7,32
     2cc:	08031263          	bnez	t1,350 <_ntoa_format+0x1d4>
     2d0:	01f00313          	li	t1,31
     2d4:	f8f366e3          	bltu	t1,a5,260 <_ntoa_format+0xe4>
      buf[len++] = 'x';
     2d8:	00f70333          	add	t1,a4,a5
     2dc:	07800e13          	li	t3,120
     2e0:	01c30023          	sb	t3,0(t1)
     2e4:	00178793          	addi	a5,a5,1
     2e8:	f79ff06f          	j	260 <_ntoa_format+0xe4>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     2ec:	01f00313          	li	t1,31
     2f0:	faf362e3          	bltu	t1,a5,294 <_ntoa_format+0x118>
      buf[len++] = 'b';
     2f4:	00f70333          	add	t1,a4,a5
     2f8:	06200e13          	li	t3,98
     2fc:	01c30023          	sb	t3,0(t1)
     300:	00178793          	addi	a5,a5,1
     304:	f5dff06f          	j	260 <_ntoa_format+0xe4>
    else if (flags & FLAGS_PLUS) {
     308:	0048f313          	andi	t1,a7,4
     30c:	00030c63          	beqz	t1,324 <_ntoa_format+0x1a8>
      buf[len++] = '+';  // ignore the space if the '+' exists
     310:	00f70333          	add	t1,a4,a5
     314:	02b00e13          	li	t3,43
     318:	01c30023          	sb	t3,0(t1)
     31c:	00178793          	addi	a5,a5,1
     320:	f75ff06f          	j	294 <_ntoa_format+0x118>
    else if (flags & FLAGS_SPACE) {
     324:	0088f313          	andi	t1,a7,8
     328:	f60306e3          	beqz	t1,294 <_ntoa_format+0x118>
      buf[len++] = ' ';
     32c:	00f70333          	add	t1,a4,a5
     330:	02000e13          	li	t3,32
     334:	01c30023          	sb	t3,0(t1)
     338:	00178793          	addi	a5,a5,1
     33c:	f59ff06f          	j	294 <_ntoa_format+0x118>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     340:	efc7fae3          	bgeu	a5,t3,234 <_ntoa_format+0xb8>
     344:	01f00313          	li	t1,31
     348:	e8f378e3          	bgeu	t1,a5,1d8 <_ntoa_format+0x5c>
     34c:	ee9ff06f          	j	234 <_ntoa_format+0xb8>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     350:	01f00313          	li	t1,31
     354:	f4f360e3          	bltu	t1,a5,294 <_ntoa_format+0x118>
      buf[len++] = 'X';
     358:	00f70333          	add	t1,a4,a5
     35c:	05800e13          	li	t3,88
     360:	01c30023          	sb	t3,0(t1)
     364:	00178793          	addi	a5,a5,1
     368:	ef9ff06f          	j	260 <_ntoa_format+0xe4>

0000036c <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
     36c:	fc010113          	addi	sp,sp,-64
     370:	02112e23          	sw	ra,60(sp)
     374:	00078393          	mv	t2,a5
     378:	04412283          	lw	t0,68(sp)
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
     37c:	00071a63          	bnez	a4,390 <_ntoa_long+0x24>
    flags &= ~FLAGS_HASH;
     380:	fef2f793          	andi	a5,t0,-17
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
     384:	4002f293          	andi	t0,t0,1024
     388:	06029863          	bnez	t0,3f8 <_ntoa_long+0x8c>
    flags &= ~FLAGS_HASH;
     38c:	00078293          	mv	t0,a5
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     390:	0202f793          	andi	a5,t0,32
     394:	06100f93          	li	t6,97
     398:	00078463          	beqz	a5,3a0 <_ntoa_long+0x34>
     39c:	04100f93          	li	t6,65
     3a0:	0fffff93          	zext.b	t6,t6
     3a4:	00000793          	li	a5,0
     3a8:	00900e93          	li	t4,9
     3ac:	ff6f8f93          	addi	t6,t6,-10
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     3b0:	02000f13          	li	t5,32
     3b4:	02c0006f          	j	3e0 <_ntoa_long+0x74>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     3b8:	03030313          	addi	t1,t1,48
     3bc:	0ff37313          	zext.b	t1,t1
     3c0:	00178793          	addi	a5,a5,1
     3c4:	01010e13          	addi	t3,sp,16
     3c8:	00fe0e33          	add	t3,t3,a5
     3cc:	fe6e0fa3          	sb	t1,-1(t3)
      value /= base;
     3d0:	03075333          	divu	t1,a4,a6
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     3d4:	03076663          	bltu	a4,a6,400 <_ntoa_long+0x94>
     3d8:	03e78463          	beq	a5,t5,400 <_ntoa_long+0x94>
      value /= base;
     3dc:	00030713          	mv	a4,t1
      const char digit = (char)(value % base);
     3e0:	03077333          	remu	t1,a4,a6
     3e4:	0ff37313          	zext.b	t1,t1
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     3e8:	fc6ef8e3          	bgeu	t4,t1,3b8 <_ntoa_long+0x4c>
     3ec:	01f30333          	add	t1,t1,t6
     3f0:	0ff37313          	zext.b	t1,t1
     3f4:	fcdff06f          	j	3c0 <_ntoa_long+0x54>
    flags &= ~FLAGS_HASH;
     3f8:	00078293          	mv	t0,a5
  size_t len = 0U;
     3fc:	00070793          	mv	a5,a4
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
     400:	00512423          	sw	t0,8(sp)
     404:	04012703          	lw	a4,64(sp)
     408:	00e12223          	sw	a4,4(sp)
     40c:	01112023          	sw	a7,0(sp)
     410:	00080893          	mv	a7,a6
     414:	00038813          	mv	a6,t2
     418:	01010713          	addi	a4,sp,16
     41c:	d61ff0ef          	jal	ra,17c <_ntoa_format>
}
     420:	03c12083          	lw	ra,60(sp)
     424:	04010113          	addi	sp,sp,64
     428:	00008067          	ret

0000042c <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
     42c:	f7010113          	addi	sp,sp,-144
     430:	06112e23          	sw	ra,124(sp)
     434:	06812c23          	sw	s0,120(sp)
     438:	06912a23          	sw	s1,116(sp)
     43c:	07212823          	sw	s2,112(sp)
     440:	07312623          	sw	s3,108(sp)
     444:	07412423          	sw	s4,104(sp)
     448:	07512223          	sw	s5,100(sp)
     44c:	07612023          	sw	s6,96(sp)
     450:	05712e23          	sw	s7,92(sp)
     454:	05812c23          	sw	s8,88(sp)
     458:	05912a23          	sw	s9,84(sp)
     45c:	05a12823          	sw	s10,80(sp)
     460:	05b12623          	sw	s11,76(sp)
     464:	00a12c23          	sw	a0,24(sp)
     468:	00058c93          	mv	s9,a1
     46c:	00060d13          	mv	s10,a2
     470:	00068d93          	mv	s11,a3
     474:	00070993          	mv	s3,a4
     478:	00078413          	mv	s0,a5
     47c:	01012e23          	sw	a6,28(sp)
     480:	09112623          	sw	a7,140(sp)
     484:	00088a13          	mv	s4,a7
     488:	09012903          	lw	s2,144(sp)
     48c:	09c12c03          	lw	s8,156(sp)
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
     490:	00f767b3          	or	a5,a4,a5
     494:	00079a63          	bnez	a5,4a8 <_ntoa_long_long+0x7c>
    flags &= ~FLAGS_HASH;
     498:	fefc7793          	andi	a5,s8,-17
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
     49c:	400c7c13          	andi	s8,s8,1024
     4a0:	0a0c1063          	bnez	s8,540 <_ntoa_long_long+0x114>
    flags &= ~FLAGS_HASH;
     4a4:	00078c13          	mv	s8,a5
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     4a8:	020c7793          	andi	a5,s8,32
     4ac:	06100b93          	li	s7,97
     4b0:	00078463          	beqz	a5,4b8 <_ntoa_long_long+0x8c>
     4b4:	04100b93          	li	s7,65
     4b8:	0ffbfb93          	zext.b	s7,s7
     4bc:	00000493          	li	s1,0
     4c0:	00900a93          	li	s5,9
     4c4:	ff6b8b93          	addi	s7,s7,-10
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     4c8:	02000b13          	li	s6,32
     4cc:	0440006f          	j	510 <_ntoa_long_long+0xe4>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     4d0:	03050513          	addi	a0,a0,48
     4d4:	0ff57513          	zext.b	a0,a0
     4d8:	00148493          	addi	s1,s1,1
     4dc:	02010793          	addi	a5,sp,32
     4e0:	009787b3          	add	a5,a5,s1
     4e4:	fea78fa3          	sb	a0,-1(a5)
      value /= base;
     4e8:	000a0613          	mv	a2,s4
     4ec:	00090693          	mv	a3,s2
     4f0:	00098513          	mv	a0,s3
     4f4:	00040593          	mv	a1,s0
     4f8:	169010ef          	jal	ra,1e60 <__udivdi3>
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     4fc:	05246663          	bltu	s0,s2,548 <_ntoa_long_long+0x11c>
     500:	02890c63          	beq	s2,s0,538 <_ntoa_long_long+0x10c>
     504:	05648263          	beq	s1,s6,548 <_ntoa_long_long+0x11c>
      value /= base;
     508:	00050993          	mv	s3,a0
     50c:	00058413          	mv	s0,a1
      const char digit = (char)(value % base);
     510:	000a0613          	mv	a2,s4
     514:	00090693          	mv	a3,s2
     518:	00098513          	mv	a0,s3
     51c:	00040593          	mv	a1,s0
     520:	571010ef          	jal	ra,2290 <__umoddi3>
     524:	0ff57513          	zext.b	a0,a0
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     528:	faaaf4e3          	bgeu	s5,a0,4d0 <_ntoa_long_long+0xa4>
     52c:	01750533          	add	a0,a0,s7
     530:	0ff57513          	zext.b	a0,a0
     534:	fa5ff06f          	j	4d8 <_ntoa_long_long+0xac>
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     538:	fd49f6e3          	bgeu	s3,s4,504 <_ntoa_long_long+0xd8>
     53c:	00c0006f          	j	548 <_ntoa_long_long+0x11c>
    flags &= ~FLAGS_HASH;
     540:	00078c13          	mv	s8,a5
  size_t len = 0U;
     544:	00000493          	li	s1,0
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
     548:	01812423          	sw	s8,8(sp)
     54c:	09812783          	lw	a5,152(sp)
     550:	00f12223          	sw	a5,4(sp)
     554:	09412783          	lw	a5,148(sp)
     558:	00f12023          	sw	a5,0(sp)
     55c:	000a0893          	mv	a7,s4
     560:	01c12803          	lw	a6,28(sp)
     564:	00048793          	mv	a5,s1
     568:	02010713          	addi	a4,sp,32
     56c:	000d8693          	mv	a3,s11
     570:	000d0613          	mv	a2,s10
     574:	000c8593          	mv	a1,s9
     578:	01812503          	lw	a0,24(sp)
     57c:	c01ff0ef          	jal	ra,17c <_ntoa_format>
}
     580:	07c12083          	lw	ra,124(sp)
     584:	07812403          	lw	s0,120(sp)
     588:	07412483          	lw	s1,116(sp)
     58c:	07012903          	lw	s2,112(sp)
     590:	06c12983          	lw	s3,108(sp)
     594:	06812a03          	lw	s4,104(sp)
     598:	06412a83          	lw	s5,100(sp)
     59c:	06012b03          	lw	s6,96(sp)
     5a0:	05c12b83          	lw	s7,92(sp)
     5a4:	05812c03          	lw	s8,88(sp)
     5a8:	05412c83          	lw	s9,84(sp)
     5ac:	05012d03          	lw	s10,80(sp)
     5b0:	04c12d83          	lw	s11,76(sp)
     5b4:	09010113          	addi	sp,sp,144
     5b8:	00008067          	ret

000005bc <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
     5bc:	f8010113          	addi	sp,sp,-128
     5c0:	06112e23          	sw	ra,124(sp)
     5c4:	06812c23          	sw	s0,120(sp)
     5c8:	06912a23          	sw	s1,116(sp)
     5cc:	07212823          	sw	s2,112(sp)
     5d0:	07312623          	sw	s3,108(sp)
     5d4:	07412423          	sw	s4,104(sp)
     5d8:	07512223          	sw	s5,100(sp)
     5dc:	07612023          	sw	s6,96(sp)
     5e0:	05712e23          	sw	s7,92(sp)
     5e4:	05812c23          	sw	s8,88(sp)
     5e8:	05912a23          	sw	s9,84(sp)
     5ec:	05a12823          	sw	s10,80(sp)
     5f0:	05b12623          	sw	s11,76(sp)
     5f4:	00050993          	mv	s3,a0
     5f8:	00058a13          	mv	s4,a1
     5fc:	00060913          	mv	s2,a2
     600:	00068a93          	mv	s5,a3
     604:	00070493          	mv	s1,a4
     608:	00078413          	mv	s0,a5
     60c:	00080b93          	mv	s7,a6
     610:	00088b13          	mv	s6,a7
     614:	08012c03          	lw	s8,128(sp)
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
     618:	00048613          	mv	a2,s1
     61c:	00040693          	mv	a3,s0
     620:	00048513          	mv	a0,s1
     624:	00040593          	mv	a1,s0
     628:	705020ef          	jal	ra,352c <__eqdf2>
     62c:	32051063          	bnez	a0,94c <_etoa+0x390>
     630:	000207b7          	lui	a5,0x20
     634:	3587a603          	lw	a2,856(a5) # 20358 <__clz_tab+0x100>
     638:	35c7a683          	lw	a3,860(a5)
     63c:	00048513          	mv	a0,s1
     640:	00040593          	mv	a1,s0
     644:	775020ef          	jal	ra,35b8 <__gedf2>
     648:	30a04263          	bgtz	a0,94c <_etoa+0x390>
     64c:	000207b7          	lui	a5,0x20
     650:	3607a603          	lw	a2,864(a5) # 20360 <__clz_tab+0x108>
     654:	3647a683          	lw	a3,868(a5)
     658:	00048513          	mv	a0,s1
     65c:	00040593          	mv	a1,s0
     660:	03c030ef          	jal	ra,369c <__ledf2>
     664:	2e054463          	bltz	a0,94c <_etoa+0x390>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
  }

  // determine the sign
  const bool negative = value < 0;
  if (negative) {
     668:	00000613          	li	a2,0
     66c:	00000693          	li	a3,0
     670:	00048513          	mv	a0,s1
     674:	00040593          	mv	a1,s0
     678:	024030ef          	jal	ra,369c <__ledf2>
     67c:	32054e63          	bltz	a0,9b8 <_etoa+0x3fc>
     680:	00912e23          	sw	s1,28(sp)
     684:	00040d13          	mv	s10,s0
    value = -value;
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
     688:	400c7793          	andi	a5,s8,1024
     68c:	02f12e23          	sw	a5,60(sp)
     690:	00079463          	bnez	a5,698 <_etoa+0xdc>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
     694:	00600b93          	li	s7,6
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
     698:	014d5513          	srli	a0,s10,0x14
     69c:	7ff57513          	andi	a0,a0,2047
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
     6a0:	c0150513          	addi	a0,a0,-1023
     6a4:	7d5030ef          	jal	ra,4678 <__floatsidf>
     6a8:	000207b7          	lui	a5,0x20
     6ac:	3687a603          	lw	a2,872(a5) # 20368 <__clz_tab+0x110>
     6b0:	36c7a683          	lw	a3,876(a5)
     6b4:	0cc030ef          	jal	ra,3780 <__muldf3>
     6b8:	000207b7          	lui	a5,0x20
     6bc:	3707a603          	lw	a2,880(a5) # 20370 <__clz_tab+0x118>
     6c0:	3747a683          	lw	a3,884(a5)
     6c4:	7b1010ef          	jal	ra,2674 <__adddf3>
     6c8:	00050c93          	mv	s9,a0
     6cc:	00058d93          	mv	s11,a1
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
     6d0:	00cd1713          	slli	a4,s10,0xc
     6d4:	00c75713          	srli	a4,a4,0xc
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
     6d8:	000207b7          	lui	a5,0x20
     6dc:	3787a603          	lw	a2,888(a5) # 20378 <__clz_tab+0x120>
     6e0:	37c7a683          	lw	a3,892(a5)
     6e4:	01c12803          	lw	a6,28(sp)
     6e8:	3ff007b7          	lui	a5,0x3ff00
     6ec:	00e7e7b3          	or	a5,a5,a4
     6f0:	00080513          	mv	a0,a6
     6f4:	00078593          	mv	a1,a5
     6f8:	694030ef          	jal	ra,3d8c <__subdf3>
     6fc:	000207b7          	lui	a5,0x20
     700:	3807a603          	lw	a2,896(a5) # 20380 <__clz_tab+0x128>
     704:	3847a683          	lw	a3,900(a5)
     708:	078030ef          	jal	ra,3780 <__muldf3>
     70c:	00050613          	mv	a2,a0
     710:	00058693          	mv	a3,a1
     714:	000c8513          	mv	a0,s9
     718:	000d8593          	mv	a1,s11
     71c:	759010ef          	jal	ra,2674 <__adddf3>
     720:	65d030ef          	jal	ra,457c <__fixdfsi>
     724:	00050d93          	mv	s11,a0
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
     728:	751030ef          	jal	ra,4678 <__floatsidf>
     72c:	02a12423          	sw	a0,40(sp)
     730:	02b12023          	sw	a1,32(sp)
     734:	000207b7          	lui	a5,0x20
     738:	3887a603          	lw	a2,904(a5) # 20388 <__clz_tab+0x130>
     73c:	38c7a683          	lw	a3,908(a5)
     740:	040030ef          	jal	ra,3780 <__muldf3>
     744:	000207b7          	lui	a5,0x20
     748:	3907a603          	lw	a2,912(a5) # 20390 <__clz_tab+0x138>
     74c:	3947a683          	lw	a3,916(a5)
     750:	725010ef          	jal	ra,2674 <__adddf3>
     754:	629030ef          	jal	ra,457c <__fixdfsi>
     758:	00050c93          	mv	s9,a0
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
     75c:	000207b7          	lui	a5,0x20
     760:	3987a603          	lw	a2,920(a5) # 20398 <__clz_tab+0x140>
     764:	39c7a683          	lw	a3,924(a5)
     768:	02812503          	lw	a0,40(sp)
     76c:	02012583          	lw	a1,32(sp)
     770:	010030ef          	jal	ra,3780 <__muldf3>
     774:	02a12423          	sw	a0,40(sp)
     778:	02b12023          	sw	a1,32(sp)
     77c:	000c8513          	mv	a0,s9
     780:	6f9030ef          	jal	ra,4678 <__floatsidf>
     784:	000207b7          	lui	a5,0x20
     788:	3a07a603          	lw	a2,928(a5) # 203a0 <__clz_tab+0x148>
     78c:	3a47a683          	lw	a3,932(a5)
     790:	7f1020ef          	jal	ra,3780 <__muldf3>
     794:	00050613          	mv	a2,a0
     798:	00058693          	mv	a3,a1
     79c:	02812503          	lw	a0,40(sp)
     7a0:	02012583          	lw	a1,32(sp)
     7a4:	5e8030ef          	jal	ra,3d8c <__subdf3>
  const double z2 = z * z;
     7a8:	02a12423          	sw	a0,40(sp)
     7ac:	00050613          	mv	a2,a0
     7b0:	02b12023          	sw	a1,32(sp)
     7b4:	00058693          	mv	a3,a1
     7b8:	7c9020ef          	jal	ra,3780 <__muldf3>
     7bc:	02a12623          	sw	a0,44(sp)
     7c0:	02b12823          	sw	a1,48(sp)
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
     7c4:	02812883          	lw	a7,40(sp)
     7c8:	00088613          	mv	a2,a7
     7cc:	02012783          	lw	a5,32(sp)
     7d0:	00078693          	mv	a3,a5
     7d4:	00088513          	mv	a0,a7
     7d8:	00078593          	mv	a1,a5
     7dc:	699010ef          	jal	ra,2674 <__adddf3>
     7e0:	02a12a23          	sw	a0,52(sp)
     7e4:	02b12c23          	sw	a1,56(sp)
     7e8:	000207b7          	lui	a5,0x20
     7ec:	3a87a603          	lw	a2,936(a5) # 203a8 <__clz_tab+0x150>
     7f0:	3ac7a683          	lw	a3,940(a5)
     7f4:	02c12503          	lw	a0,44(sp)
     7f8:	03012583          	lw	a1,48(sp)
     7fc:	654020ef          	jal	ra,2e50 <__divdf3>
     800:	000207b7          	lui	a5,0x20
     804:	3b07a603          	lw	a2,944(a5) # 203b0 <__clz_tab+0x158>
     808:	3b47a683          	lw	a3,948(a5)
     80c:	669010ef          	jal	ra,2674 <__adddf3>
     810:	00050613          	mv	a2,a0
     814:	00058693          	mv	a3,a1
     818:	02c12503          	lw	a0,44(sp)
     81c:	03012583          	lw	a1,48(sp)
     820:	630020ef          	jal	ra,2e50 <__divdf3>
     824:	000207b7          	lui	a5,0x20
     828:	3b87a603          	lw	a2,952(a5) # 203b8 <__clz_tab+0x160>
     82c:	3bc7a683          	lw	a3,956(a5)
     830:	645010ef          	jal	ra,2674 <__adddf3>
     834:	00050613          	mv	a2,a0
     838:	00058693          	mv	a3,a1
     83c:	02c12503          	lw	a0,44(sp)
     840:	03012583          	lw	a1,48(sp)
     844:	60c020ef          	jal	ra,2e50 <__divdf3>
     848:	02a12623          	sw	a0,44(sp)
     84c:	02b12823          	sw	a1,48(sp)
     850:	02812603          	lw	a2,40(sp)
     854:	02012683          	lw	a3,32(sp)
     858:	000207b7          	lui	a5,0x20
     85c:	3c07a503          	lw	a0,960(a5) # 203c0 <__clz_tab+0x168>
     860:	3c47a583          	lw	a1,964(a5)
     864:	528030ef          	jal	ra,3d8c <__subdf3>
     868:	00050613          	mv	a2,a0
     86c:	00058693          	mv	a3,a1
     870:	02c12503          	lw	a0,44(sp)
     874:	03012583          	lw	a1,48(sp)
     878:	5fd010ef          	jal	ra,2674 <__adddf3>
     87c:	00050613          	mv	a2,a0
     880:	00058693          	mv	a3,a1
     884:	03412503          	lw	a0,52(sp)
     888:	03812583          	lw	a1,56(sp)
     88c:	5c4020ef          	jal	ra,2e50 <__divdf3>
     890:	000207b7          	lui	a5,0x20
     894:	3c87a603          	lw	a2,968(a5) # 203c8 <__clz_tab+0x170>
     898:	3cc7a683          	lw	a3,972(a5)
     89c:	5d9010ef          	jal	ra,2674 <__adddf3>
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
     8a0:	3ffc8c93          	addi	s9,s9,1023
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
     8a4:	00000713          	li	a4,0
     8a8:	014c9793          	slli	a5,s9,0x14
     8ac:	00070613          	mv	a2,a4
     8b0:	00078693          	mv	a3,a5
     8b4:	6cd020ef          	jal	ra,3780 <__muldf3>
     8b8:	00050c93          	mv	s9,a0
     8bc:	02b12423          	sw	a1,40(sp)
  // correct for rounding errors
  if (value < conv.F) {
     8c0:	01c12703          	lw	a4,28(sp)
     8c4:	00070613          	mv	a2,a4
     8c8:	000d0693          	mv	a3,s10
     8cc:	4ed020ef          	jal	ra,35b8 <__gedf2>
     8d0:	0ea04c63          	bgtz	a0,9c8 <_etoa+0x40c>
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
     8d4:	03912023          	sw	s9,32(sp)
     8d8:	02812783          	lw	a5,40(sp)
     8dc:	02f12223          	sw	a5,36(sp)
    expval--;
    conv.F /= 10;
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
     8e0:	063d8c93          	addi	s9,s11,99
     8e4:	0c600793          	li	a5,198
     8e8:	0197bcb3          	sltu	s9,a5,s9
     8ec:	004c8c93          	addi	s9,s9,4

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
     8f0:	00bc5793          	srli	a5,s8,0xb
     8f4:	0017f793          	andi	a5,a5,1
     8f8:	10078e63          	beqz	a5,a14 <_etoa+0x458>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
     8fc:	000207b7          	lui	a5,0x20
     900:	3d07a603          	lw	a2,976(a5) # 203d0 <__clz_tab+0x178>
     904:	3d47a683          	lw	a3,980(a5)
     908:	01c12703          	lw	a4,28(sp)
     90c:	00070513          	mv	a0,a4
     910:	000d0593          	mv	a1,s10
     914:	4a5020ef          	jal	ra,35b8 <__gedf2>
     918:	0e054663          	bltz	a0,a04 <_etoa+0x448>
     91c:	000207b7          	lui	a5,0x20
     920:	3d87a603          	lw	a2,984(a5) # 203d8 <__clz_tab+0x180>
     924:	3dc7a683          	lw	a3,988(a5)
     928:	01c12703          	lw	a4,28(sp)
     92c:	00070513          	mv	a0,a4
     930:	000d0593          	mv	a1,s10
     934:	569020ef          	jal	ra,369c <__ledf2>
     938:	0c055663          	bgez	a0,a04 <_etoa+0x448>
      if ((int)prec > expval) {
     93c:	0b7dda63          	bge	s11,s7,9f0 <_etoa+0x434>
        prec = (unsigned)((int)prec - expval - 1);
     940:	41bb8db3          	sub	s11,s7,s11
     944:	fffd8b93          	addi	s7,s11,-1
     948:	0ac0006f          	j	9f4 <_etoa+0x438>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
     94c:	01812023          	sw	s8,0(sp)
     950:	000b0893          	mv	a7,s6
     954:	000b8813          	mv	a6,s7
     958:	00048713          	mv	a4,s1
     95c:	00040793          	mv	a5,s0
     960:	000a8693          	mv	a3,s5
     964:	00090613          	mv	a2,s2
     968:	000a0593          	mv	a1,s4
     96c:	00098513          	mv	a0,s3
     970:	1f4000ef          	jal	ra,b64 <_ftoa>
     974:	00050413          	mv	s0,a0
    if (flags & FLAGS_LEFT) {
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
    }
  }
  return idx;
}
     978:	00040513          	mv	a0,s0
     97c:	07c12083          	lw	ra,124(sp)
     980:	07812403          	lw	s0,120(sp)
     984:	07412483          	lw	s1,116(sp)
     988:	07012903          	lw	s2,112(sp)
     98c:	06c12983          	lw	s3,108(sp)
     990:	06812a03          	lw	s4,104(sp)
     994:	06412a83          	lw	s5,100(sp)
     998:	06012b03          	lw	s6,96(sp)
     99c:	05c12b83          	lw	s7,92(sp)
     9a0:	05812c03          	lw	s8,88(sp)
     9a4:	05412c83          	lw	s9,84(sp)
     9a8:	05012d03          	lw	s10,80(sp)
     9ac:	04c12d83          	lw	s11,76(sp)
     9b0:	08010113          	addi	sp,sp,128
     9b4:	00008067          	ret
    value = -value;
     9b8:	00912e23          	sw	s1,28(sp)
     9bc:	80000d37          	lui	s10,0x80000
     9c0:	008d4d33          	xor	s10,s10,s0
     9c4:	cc5ff06f          	j	688 <_etoa+0xcc>
    expval--;
     9c8:	fffd8d93          	addi	s11,s11,-1
    conv.F /= 10;
     9cc:	000207b7          	lui	a5,0x20
     9d0:	3b07a603          	lw	a2,944(a5) # 203b0 <__clz_tab+0x158>
     9d4:	3b47a683          	lw	a3,948(a5)
     9d8:	000c8513          	mv	a0,s9
     9dc:	02812583          	lw	a1,40(sp)
     9e0:	470020ef          	jal	ra,2e50 <__divdf3>
     9e4:	02a12023          	sw	a0,32(sp)
     9e8:	02b12223          	sw	a1,36(sp)
     9ec:	ef5ff06f          	j	8e0 <_etoa+0x324>
        prec = 0;
     9f0:	00000b93          	li	s7,0
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
     9f4:	400c6c13          	ori	s8,s8,1024
      minwidth = 0U;
     9f8:	00000c93          	li	s9,0
      expval   = 0;
     9fc:	00000d93          	li	s11,0
     a00:	0140006f          	j	a14 <_etoa+0x458>
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
     a04:	000b8863          	beqz	s7,a14 <_etoa+0x458>
        --prec;
     a08:	03c12783          	lw	a5,60(sp)
     a0c:	00f037b3          	snez	a5,a5
     a10:	40fb8bb3          	sub	s7,s7,a5
    fwidth = 0U;
     a14:	02012423          	sw	zero,40(sp)
  if (width > minwidth) {
     a18:	016cf663          	bgeu	s9,s6,a24 <_etoa+0x468>
    fwidth -= minwidth;
     a1c:	419b07b3          	sub	a5,s6,s9
     a20:	02f12423          	sw	a5,40(sp)
  if ((flags & FLAGS_LEFT) && minwidth) {
     a24:	002c7793          	andi	a5,s8,2
     a28:	02f12623          	sw	a5,44(sp)
     a2c:	00078c63          	beqz	a5,a44 <_etoa+0x488>
    fwidth = 0U;
     a30:	001cb793          	seqz	a5,s9
     a34:	40f007b3          	neg	a5,a5
     a38:	02812703          	lw	a4,40(sp)
     a3c:	00f777b3          	and	a5,a4,a5
     a40:	02f12423          	sw	a5,40(sp)
  if (expval) {
     a44:	020d8263          	beqz	s11,a68 <_etoa+0x4ac>
    value /= conv.F;
     a48:	02012603          	lw	a2,32(sp)
     a4c:	02412683          	lw	a3,36(sp)
     a50:	01c12703          	lw	a4,28(sp)
     a54:	00070513          	mv	a0,a4
     a58:	000d0593          	mv	a1,s10
     a5c:	3f4020ef          	jal	ra,2e50 <__divdf3>
     a60:	00a12e23          	sw	a0,28(sp)
     a64:	00058d13          	mv	s10,a1
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
     a68:	00000613          	li	a2,0
     a6c:	00000693          	li	a3,0
     a70:	00048513          	mv	a0,s1
     a74:	00040593          	mv	a1,s0
     a78:	425020ef          	jal	ra,369c <__ledf2>
     a7c:	0c054e63          	bltz	a0,b58 <_etoa+0x59c>
     a80:	fffff7b7          	lui	a5,0xfffff
     a84:	7ff78793          	addi	a5,a5,2047 # fffff7ff <__bss_start+0xfffcf7ff>
     a88:	00fc77b3          	and	a5,s8,a5
     a8c:	00f12023          	sw	a5,0(sp)
     a90:	02812883          	lw	a7,40(sp)
     a94:	000b8813          	mv	a6,s7
     a98:	01c12603          	lw	a2,28(sp)
     a9c:	00060713          	mv	a4,a2
     aa0:	000d0793          	mv	a5,s10
     aa4:	000a8693          	mv	a3,s5
     aa8:	00090613          	mv	a2,s2
     aac:	000a0593          	mv	a1,s4
     ab0:	00098513          	mv	a0,s3
     ab4:	0b0000ef          	jal	ra,b64 <_ftoa>
     ab8:	00050413          	mv	s0,a0
  if (minwidth) {
     abc:	ea0c8ee3          	beqz	s9,978 <_etoa+0x3bc>
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
     ac0:	01ac1513          	slli	a0,s8,0x1a
     ac4:	41f55513          	srai	a0,a0,0x1f
     ac8:	fe057513          	andi	a0,a0,-32
     acc:	00140493          	addi	s1,s0,1
     ad0:	000a8693          	mv	a3,s5
     ad4:	00040613          	mv	a2,s0
     ad8:	000a0593          	mv	a1,s4
     adc:	06550513          	addi	a0,a0,101
     ae0:	000980e7          	jalr	s3
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
     ae4:	41fdd713          	srai	a4,s11,0x1f
     ae8:	01b746b3          	xor	a3,a4,s11
     aec:	00500793          	li	a5,5
     af0:	00f12223          	sw	a5,4(sp)
     af4:	fffc8c93          	addi	s9,s9,-1
     af8:	01912023          	sw	s9,0(sp)
     afc:	00000893          	li	a7,0
     b00:	00a00813          	li	a6,10
     b04:	01fdd793          	srli	a5,s11,0x1f
     b08:	40e68733          	sub	a4,a3,a4
     b0c:	000a8693          	mv	a3,s5
     b10:	00048613          	mv	a2,s1
     b14:	000a0593          	mv	a1,s4
     b18:	00098513          	mv	a0,s3
     b1c:	851ff0ef          	jal	ra,36c <_ntoa_long>
     b20:	00050413          	mv	s0,a0
    if (flags & FLAGS_LEFT) {
     b24:	02c12783          	lw	a5,44(sp)
     b28:	e40788e3          	beqz	a5,978 <_etoa+0x3bc>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
     b2c:	41250933          	sub	s2,a0,s2
     b30:	e56974e3          	bgeu	s2,s6,978 <_etoa+0x3bc>
     b34:	00040613          	mv	a2,s0
     b38:	000a8693          	mv	a3,s5
     b3c:	00140413          	addi	s0,s0,1
     b40:	000a0593          	mv	a1,s4
     b44:	02000513          	li	a0,32
     b48:	000980e7          	jalr	s3
     b4c:	00190913          	addi	s2,s2,1
     b50:	ff6962e3          	bltu	s2,s6,b34 <_etoa+0x578>
     b54:	e25ff06f          	j	978 <_etoa+0x3bc>
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
     b58:	800007b7          	lui	a5,0x80000
     b5c:	01a7cd33          	xor	s10,a5,s10
     b60:	f21ff06f          	j	a80 <_etoa+0x4c4>

00000b64 <_ftoa>:
{
     b64:	f7010113          	addi	sp,sp,-144
     b68:	08112623          	sw	ra,140(sp)
     b6c:	08812423          	sw	s0,136(sp)
     b70:	08912223          	sw	s1,132(sp)
     b74:	09212023          	sw	s2,128(sp)
     b78:	07312e23          	sw	s3,124(sp)
     b7c:	07412c23          	sw	s4,120(sp)
     b80:	07512a23          	sw	s5,116(sp)
     b84:	07612823          	sw	s6,112(sp)
     b88:	07712623          	sw	s7,108(sp)
     b8c:	07812423          	sw	s8,104(sp)
     b90:	07912223          	sw	s9,100(sp)
     b94:	07a12023          	sw	s10,96(sp)
     b98:	05b12e23          	sw	s11,92(sp)
     b9c:	00050b93          	mv	s7,a0
     ba0:	00058c13          	mv	s8,a1
     ba4:	00060c93          	mv	s9,a2
     ba8:	00068d13          	mv	s10,a3
     bac:	00070913          	mv	s2,a4
     bb0:	00078993          	mv	s3,a5
     bb4:	00080493          	mv	s1,a6
     bb8:	00088b13          	mv	s6,a7
     bbc:	09012d83          	lw	s11,144(sp)
  if (value != value)
     bc0:	00070613          	mv	a2,a4
     bc4:	00078693          	mv	a3,a5
     bc8:	00070513          	mv	a0,a4
     bcc:	00078593          	mv	a1,a5
     bd0:	15d020ef          	jal	ra,352c <__eqdf2>
     bd4:	1e051863          	bnez	a0,dc4 <_ftoa+0x260>
  if (value < -DBL_MAX)
     bd8:	000207b7          	lui	a5,0x20
     bdc:	3607a603          	lw	a2,864(a5) # 20360 <__clz_tab+0x108>
     be0:	3647a683          	lw	a3,868(a5)
     be4:	00090513          	mv	a0,s2
     be8:	00098593          	mv	a1,s3
     bec:	2b1020ef          	jal	ra,369c <__ledf2>
     bf0:	20054063          	bltz	a0,df0 <_ftoa+0x28c>
  if (value > DBL_MAX)
     bf4:	000207b7          	lui	a5,0x20
     bf8:	3587a603          	lw	a2,856(a5) # 20358 <__clz_tab+0x100>
     bfc:	35c7a683          	lw	a3,860(a5)
     c00:	00090513          	mv	a0,s2
     c04:	00098593          	mv	a1,s3
     c08:	1b1020ef          	jal	ra,35b8 <__gedf2>
     c0c:	20a04863          	bgtz	a0,e1c <_ftoa+0x2b8>
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
     c10:	000207b7          	lui	a5,0x20
     c14:	3e07a603          	lw	a2,992(a5) # 203e0 <__clz_tab+0x188>
     c18:	3e47a683          	lw	a3,996(a5)
     c1c:	00090513          	mv	a0,s2
     c20:	00098593          	mv	a1,s3
     c24:	195020ef          	jal	ra,35b8 <__gedf2>
     c28:	22a04c63          	bgtz	a0,e60 <_ftoa+0x2fc>
     c2c:	000207b7          	lui	a5,0x20
     c30:	3e87a603          	lw	a2,1000(a5) # 203e8 <__clz_tab+0x190>
     c34:	3ec7a683          	lw	a3,1004(a5)
     c38:	00090513          	mv	a0,s2
     c3c:	00098593          	mv	a1,s3
     c40:	25d020ef          	jal	ra,369c <__ledf2>
     c44:	20054e63          	bltz	a0,e60 <_ftoa+0x2fc>
  if (value < 0) {
     c48:	00000613          	li	a2,0
     c4c:	00000693          	li	a3,0
     c50:	00090513          	mv	a0,s2
     c54:	00098593          	mv	a1,s3
     c58:	245020ef          	jal	ra,369c <__ledf2>
     c5c:	22054863          	bltz	a0,e8c <_ftoa+0x328>
  bool negative = false;
     c60:	02012623          	sw	zero,44(sp)
  if (!(flags & FLAGS_PRECISION)) {
     c64:	400df413          	andi	s0,s11,1024
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
     c68:	00600a13          	li	s4,6
  if (!(flags & FLAGS_PRECISION)) {
     c6c:	04040863          	beqz	s0,cbc <_ftoa+0x158>
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
     c70:	00900793          	li	a5,9
     c74:	00048a13          	mv	s4,s1
     c78:	00000413          	li	s0,0
     c7c:	0497f063          	bgeu	a5,s1,cbc <_ftoa+0x158>
    buf[len++] = '0';
     c80:	03000793          	li	a5,48
     c84:	02f10823          	sb	a5,48(sp)
    prec--;
     c88:	fff48a13          	addi	s4,s1,-1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
     c8c:	ff748413          	addi	s0,s1,-9
    buf[len++] = '0';
     c90:	00100793          	li	a5,1
     c94:	03000613          	li	a2,48
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
     c98:	02000693          	li	a3,32
     c9c:	02f40063          	beq	s0,a5,cbc <_ftoa+0x158>
    buf[len++] = '0';
     ca0:	00178793          	addi	a5,a5,1
     ca4:	03010713          	addi	a4,sp,48
     ca8:	00f70733          	add	a4,a4,a5
     cac:	fec70fa3          	sb	a2,-1(a4)
    prec--;
     cb0:	fffa0a13          	addi	s4,s4,-1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
     cb4:	fed794e3          	bne	a5,a3,c9c <_ftoa+0x138>
    buf[len++] = '0';
     cb8:	00078413          	mv	s0,a5
  int whole = (int)value;
     cbc:	00090513          	mv	a0,s2
     cc0:	00098593          	mv	a1,s3
     cc4:	0b9030ef          	jal	ra,457c <__fixdfsi>
     cc8:	00050493          	mv	s1,a0
  double tmp = (value - whole) * pow10[prec];
     ccc:	003a1713          	slli	a4,s4,0x3
     cd0:	000207b7          	lui	a5,0x20
     cd4:	1b878793          	addi	a5,a5,440 # 201b8 <pow10.0>
     cd8:	00e787b3          	add	a5,a5,a4
     cdc:	0047a803          	lw	a6,4(a5)
     ce0:	0007a783          	lw	a5,0(a5)
     ce4:	00f12c23          	sw	a5,24(sp)
     ce8:	01012e23          	sw	a6,28(sp)
     cec:	18d030ef          	jal	ra,4678 <__floatsidf>
     cf0:	00050613          	mv	a2,a0
     cf4:	00058693          	mv	a3,a1
     cf8:	00090513          	mv	a0,s2
     cfc:	00098593          	mv	a1,s3
     d00:	08c030ef          	jal	ra,3d8c <__subdf3>
     d04:	01812603          	lw	a2,24(sp)
     d08:	01c12683          	lw	a3,28(sp)
     d0c:	275020ef          	jal	ra,3780 <__muldf3>
     d10:	02a12223          	sw	a0,36(sp)
     d14:	02b12423          	sw	a1,40(sp)
  unsigned long frac = (unsigned long)tmp;
     d18:	0e5030ef          	jal	ra,45fc <__fixunsdfsi>
     d1c:	00050a93          	mv	s5,a0
  diff = tmp - frac;
     d20:	201030ef          	jal	ra,4720 <__floatunsidf>
     d24:	00050613          	mv	a2,a0
     d28:	00058693          	mv	a3,a1
     d2c:	02412503          	lw	a0,36(sp)
     d30:	02812583          	lw	a1,40(sp)
     d34:	058030ef          	jal	ra,3d8c <__subdf3>
     d38:	02a12223          	sw	a0,36(sp)
     d3c:	02b12423          	sw	a1,40(sp)
  if (diff > 0.5) {
     d40:	000207b7          	lui	a5,0x20
     d44:	3907a603          	lw	a2,912(a5) # 20390 <__clz_tab+0x138>
     d48:	3947a683          	lw	a3,916(a5)
     d4c:	06d020ef          	jal	ra,35b8 <__gedf2>
     d50:	16a05263          	blez	a0,eb4 <_ftoa+0x350>
    ++frac;
     d54:	001a8a93          	addi	s5,s5,1
    if (frac >= pow10[prec]) {
     d58:	000a8513          	mv	a0,s5
     d5c:	1c5030ef          	jal	ra,4720 <__floatunsidf>
     d60:	00050613          	mv	a2,a0
     d64:	00058693          	mv	a3,a1
     d68:	01812503          	lw	a0,24(sp)
     d6c:	01c12583          	lw	a1,28(sp)
     d70:	12d020ef          	jal	ra,369c <__ledf2>
     d74:	00a04663          	bgtz	a0,d80 <_ftoa+0x21c>
      ++whole;
     d78:	00148493          	addi	s1,s1,1
      frac = 0;
     d7c:	00000a93          	li	s5,0
  if (prec == 0U) {
     d80:	160a0263          	beqz	s4,ee4 <_ftoa+0x380>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
     d84:	01f00593          	li	a1,31
      buf[len++] = (char)(48U + (frac % 10U));
     d88:	00a00713          	li	a4,10
      if (!(frac /= 10U)) {
     d8c:	00900513          	li	a0,9
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
     d90:	1a85e863          	bltu	a1,s0,f40 <_ftoa+0x3dc>
      --count;
     d94:	fffa0693          	addi	a3,s4,-1
      buf[len++] = (char)(48U + (frac % 10U));
     d98:	00140413          	addi	s0,s0,1
     d9c:	03010793          	addi	a5,sp,48
     da0:	00878633          	add	a2,a5,s0
     da4:	02eaf7b3          	remu	a5,s5,a4
     da8:	03078793          	addi	a5,a5,48
     dac:	fef60fa3          	sb	a5,-1(a2)
      if (!(frac /= 10U)) {
     db0:	02ead7b3          	divu	a5,s5,a4
     db4:	1f557863          	bgeu	a0,s5,fa4 <_ftoa+0x440>
      --count;
     db8:	00068a13          	mv	s4,a3
      if (!(frac /= 10U)) {
     dbc:	00078a93          	mv	s5,a5
     dc0:	fd1ff06f          	j	d90 <_ftoa+0x22c>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
     dc4:	000d8893          	mv	a7,s11
     dc8:	000b0813          	mv	a6,s6
     dcc:	00300793          	li	a5,3
     dd0:	00020737          	lui	a4,0x20
     dd4:	00c70713          	addi	a4,a4,12 # 2000c <__clzsi2+0x1b86c>
     dd8:	000d0693          	mv	a3,s10
     ddc:	000c8613          	mv	a2,s9
     de0:	000c0593          	mv	a1,s8
     de4:	000b8513          	mv	a0,s7
     de8:	a64ff0ef          	jal	ra,4c <_out_rev>
     dec:	2980006f          	j	1084 <_ftoa+0x520>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
     df0:	000d8893          	mv	a7,s11
     df4:	000b0813          	mv	a6,s6
     df8:	00400793          	li	a5,4
     dfc:	00020737          	lui	a4,0x20
     e00:	01070713          	addi	a4,a4,16 # 20010 <__clzsi2+0x1b870>
     e04:	000d0693          	mv	a3,s10
     e08:	000c8613          	mv	a2,s9
     e0c:	000c0593          	mv	a1,s8
     e10:	000b8513          	mv	a0,s7
     e14:	a38ff0ef          	jal	ra,4c <_out_rev>
     e18:	26c0006f          	j	1084 <_ftoa+0x520>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
     e1c:	004df793          	andi	a5,s11,4
     e20:	02079863          	bnez	a5,e50 <_ftoa+0x2ec>
     e24:	00020737          	lui	a4,0x20
     e28:	00870713          	addi	a4,a4,8 # 20008 <__clzsi2+0x1b868>
     e2c:	00300793          	li	a5,3
     e30:	000d8893          	mv	a7,s11
     e34:	000b0813          	mv	a6,s6
     e38:	000d0693          	mv	a3,s10
     e3c:	000c8613          	mv	a2,s9
     e40:	000c0593          	mv	a1,s8
     e44:	000b8513          	mv	a0,s7
     e48:	a04ff0ef          	jal	ra,4c <_out_rev>
     e4c:	2380006f          	j	1084 <_ftoa+0x520>
     e50:	00020737          	lui	a4,0x20
     e54:	00070713          	mv	a4,a4
     e58:	00400793          	li	a5,4
     e5c:	fd5ff06f          	j	e30 <_ftoa+0x2cc>
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
     e60:	01b12023          	sw	s11,0(sp)
     e64:	000b0893          	mv	a7,s6
     e68:	00048813          	mv	a6,s1
     e6c:	00090713          	mv	a4,s2
     e70:	00098793          	mv	a5,s3
     e74:	000d0693          	mv	a3,s10
     e78:	000c8613          	mv	a2,s9
     e7c:	000c0593          	mv	a1,s8
     e80:	000b8513          	mv	a0,s7
     e84:	f38ff0ef          	jal	ra,5bc <_etoa>
     e88:	1fc0006f          	j	1084 <_ftoa+0x520>
    value = 0 - value;
     e8c:	00090613          	mv	a2,s2
     e90:	00098693          	mv	a3,s3
     e94:	00000513          	li	a0,0
     e98:	00000593          	li	a1,0
     e9c:	6f1020ef          	jal	ra,3d8c <__subdf3>
     ea0:	00050913          	mv	s2,a0
     ea4:	00058993          	mv	s3,a1
    negative = true;
     ea8:	00100793          	li	a5,1
     eac:	02f12623          	sw	a5,44(sp)
     eb0:	db5ff06f          	j	c64 <_ftoa+0x100>
  else if (diff < 0.5) {
     eb4:	000207b7          	lui	a5,0x20
     eb8:	3907a603          	lw	a2,912(a5) # 20390 <__clz_tab+0x138>
     ebc:	3947a683          	lw	a3,916(a5)
     ec0:	02412503          	lw	a0,36(sp)
     ec4:	02812583          	lw	a1,40(sp)
     ec8:	7d4020ef          	jal	ra,369c <__ledf2>
     ecc:	ea054ae3          	bltz	a0,d80 <_ftoa+0x21c>
  else if ((frac == 0U) || (frac & 1U)) {
     ed0:	000a8663          	beqz	s5,edc <_ftoa+0x378>
     ed4:	001af793          	andi	a5,s5,1
     ed8:	ea0784e3          	beqz	a5,d80 <_ftoa+0x21c>
    ++frac;
     edc:	001a8a93          	addi	s5,s5,1
     ee0:	ea1ff06f          	j	d80 <_ftoa+0x21c>
    diff = value - (double)whole;
     ee4:	00048513          	mv	a0,s1
     ee8:	790030ef          	jal	ra,4678 <__floatsidf>
     eec:	00050613          	mv	a2,a0
     ef0:	00058693          	mv	a3,a1
     ef4:	00090513          	mv	a0,s2
     ef8:	00098593          	mv	a1,s3
     efc:	691020ef          	jal	ra,3d8c <__subdf3>
     f00:	00050993          	mv	s3,a0
     f04:	00058913          	mv	s2,a1
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
     f08:	000207b7          	lui	a5,0x20
     f0c:	3907a603          	lw	a2,912(a5) # 20390 <__clz_tab+0x138>
     f10:	3947a683          	lw	a3,916(a5)
     f14:	788020ef          	jal	ra,369c <__ledf2>
     f18:	02055063          	bgez	a0,f38 <_ftoa+0x3d4>
     f1c:	000207b7          	lui	a5,0x20
     f20:	3907a603          	lw	a2,912(a5) # 20390 <__clz_tab+0x138>
     f24:	3947a683          	lw	a3,916(a5)
     f28:	00098513          	mv	a0,s3
     f2c:	00090593          	mv	a1,s2
     f30:	688020ef          	jal	ra,35b8 <__gedf2>
     f34:	00a05663          	blez	a0,f40 <_ftoa+0x3dc>
      ++whole;
     f38:	0014f793          	andi	a5,s1,1
     f3c:	00f484b3          	add	s1,s1,a5
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
     f40:	01f00613          	li	a2,31
    buf[len++] = (char)(48 + (whole % 10));
     f44:	00a00713          	li	a4,10
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
     f48:	10866663          	bltu	a2,s0,1054 <_ftoa+0x4f0>
    buf[len++] = (char)(48 + (whole % 10));
     f4c:	00140413          	addi	s0,s0,1
     f50:	03010793          	addi	a5,sp,48
     f54:	008786b3          	add	a3,a5,s0
     f58:	02e4e7b3          	rem	a5,s1,a4
     f5c:	03078793          	addi	a5,a5,48
     f60:	fef68fa3          	sb	a5,-1(a3)
    if (!(whole /= 10)) {
     f64:	02e4c4b3          	div	s1,s1,a4
     f68:	fe0490e3          	bnez	s1,f48 <_ftoa+0x3e4>
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
     f6c:	003df713          	andi	a4,s11,3
     f70:	00100793          	li	a5,1
     f74:	08f70463          	beq	a4,a5,ffc <_ftoa+0x498>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
     f78:	01f00793          	li	a5,31
     f7c:	0e87e263          	bltu	a5,s0,1060 <_ftoa+0x4fc>
    if (negative) {
     f80:	02c12783          	lw	a5,44(sp)
     f84:	08078463          	beqz	a5,100c <_ftoa+0x4a8>
      buf[len++] = '-';
     f88:	03040793          	addi	a5,s0,48
     f8c:	02010713          	addi	a4,sp,32
     f90:	00e787b3          	add	a5,a5,a4
     f94:	02d00713          	li	a4,45
     f98:	fee78023          	sb	a4,-32(a5)
     f9c:	00140413          	addi	s0,s0,1
     fa0:	0c00006f          	j	1060 <_ftoa+0x4fc>
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
     fa4:	01f00793          	li	a5,31
     fa8:	f887ece3          	bltu	a5,s0,f40 <_ftoa+0x3dc>
      buf[len++] = (char)(48U + (frac % 10U));
     fac:	00040713          	mv	a4,s0
      buf[len++] = '0';
     fb0:	03000593          	li	a1,48
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
     fb4:	02000613          	li	a2,32
     fb8:	02068463          	beqz	a3,fe0 <_ftoa+0x47c>
      buf[len++] = '0';
     fbc:	00170713          	addi	a4,a4,1 # 20001 <__clzsi2+0x1b861>
     fc0:	03010793          	addi	a5,sp,48
     fc4:	00e787b3          	add	a5,a5,a4
     fc8:	feb78fa3          	sb	a1,-1(a5)
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
     fcc:	0ec70a63          	beq	a4,a2,10c0 <_ftoa+0x55c>
     fd0:	40ea07b3          	sub	a5,s4,a4
     fd4:	fff78793          	addi	a5,a5,-1
     fd8:	00f407b3          	add	a5,s0,a5
     fdc:	fe0790e3          	bnez	a5,fbc <_ftoa+0x458>
      buf[len++] = '.';
     fe0:	00170413          	addi	s0,a4,1
     fe4:	03070793          	addi	a5,a4,48
     fe8:	02010713          	addi	a4,sp,32
     fec:	00e78733          	add	a4,a5,a4
     ff0:	02e00793          	li	a5,46
     ff4:	fef70023          	sb	a5,-32(a4)
     ff8:	f49ff06f          	j	f40 <_ftoa+0x3dc>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
     ffc:	f60b0ee3          	beqz	s6,f78 <_ftoa+0x414>
    1000:	0cc0006f          	j	10cc <_ftoa+0x568>
      buf[len++] = '0';
    1004:	000b0413          	mv	s0,s6
    1008:	f71ff06f          	j	f78 <_ftoa+0x414>
    else if (flags & FLAGS_PLUS) {
    100c:	004df793          	andi	a5,s11,4
    1010:	02078063          	beqz	a5,1030 <_ftoa+0x4cc>
      buf[len++] = '+';  // ignore the space if the '+' exists
    1014:	03040793          	addi	a5,s0,48
    1018:	02010713          	addi	a4,sp,32
    101c:	00e787b3          	add	a5,a5,a4
    1020:	02b00713          	li	a4,43
    1024:	fee78023          	sb	a4,-32(a5)
    1028:	00140413          	addi	s0,s0,1
    102c:	0340006f          	j	1060 <_ftoa+0x4fc>
    else if (flags & FLAGS_SPACE) {
    1030:	008df793          	andi	a5,s11,8
    1034:	02078663          	beqz	a5,1060 <_ftoa+0x4fc>
      buf[len++] = ' ';
    1038:	03040793          	addi	a5,s0,48
    103c:	02010713          	addi	a4,sp,32
    1040:	00e787b3          	add	a5,a5,a4
    1044:	02000713          	li	a4,32
    1048:	fee78023          	sb	a4,-32(a5)
    104c:	00140413          	addi	s0,s0,1
    1050:	0100006f          	j	1060 <_ftoa+0x4fc>
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
    1054:	003df713          	andi	a4,s11,3
    1058:	00100793          	li	a5,1
    105c:	06f70663          	beq	a4,a5,10c8 <_ftoa+0x564>
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    1060:	000d8893          	mv	a7,s11
    1064:	000b0813          	mv	a6,s6
    1068:	00040793          	mv	a5,s0
    106c:	03010713          	addi	a4,sp,48
    1070:	000d0693          	mv	a3,s10
    1074:	000c8613          	mv	a2,s9
    1078:	000c0593          	mv	a1,s8
    107c:	000b8513          	mv	a0,s7
    1080:	fcdfe0ef          	jal	ra,4c <_out_rev>
}
    1084:	08c12083          	lw	ra,140(sp)
    1088:	08812403          	lw	s0,136(sp)
    108c:	08412483          	lw	s1,132(sp)
    1090:	08012903          	lw	s2,128(sp)
    1094:	07c12983          	lw	s3,124(sp)
    1098:	07812a03          	lw	s4,120(sp)
    109c:	07412a83          	lw	s5,116(sp)
    10a0:	07012b03          	lw	s6,112(sp)
    10a4:	06c12b83          	lw	s7,108(sp)
    10a8:	06812c03          	lw	s8,104(sp)
    10ac:	06412c83          	lw	s9,100(sp)
    10b0:	06012d03          	lw	s10,96(sp)
    10b4:	05c12d83          	lw	s11,92(sp)
    10b8:	09010113          	addi	sp,sp,144
    10bc:	00008067          	ret
      buf[len++] = '0';
    10c0:	00070413          	mv	s0,a4
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
    10c4:	e7dff06f          	j	f40 <_ftoa+0x3dc>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    10c8:	f80b0ce3          	beqz	s6,1060 <_ftoa+0x4fc>
    10cc:	02c12783          	lw	a5,44(sp)
    10d0:	00079663          	bnez	a5,10dc <_ftoa+0x578>
    10d4:	00cdf793          	andi	a5,s11,12
    10d8:	00078463          	beqz	a5,10e0 <_ftoa+0x57c>
      width--;
    10dc:	fffb0b13          	addi	s6,s6,-1
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    10e0:	e9647ce3          	bgeu	s0,s6,f78 <_ftoa+0x414>
    10e4:	01f00793          	li	a5,31
      buf[len++] = '0';
    10e8:	03000713          	li	a4,48
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    10ec:	02000693          	li	a3,32
    10f0:	f687e8e3          	bltu	a5,s0,1060 <_ftoa+0x4fc>
      buf[len++] = '0';
    10f4:	00140413          	addi	s0,s0,1
    10f8:	03010793          	addi	a5,sp,48
    10fc:	008787b3          	add	a5,a5,s0
    1100:	fee78fa3          	sb	a4,-1(a5)
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    1104:	f16400e3          	beq	s0,s6,1004 <_ftoa+0x4a0>
    1108:	fed416e3          	bne	s0,a3,10f4 <_ftoa+0x590>
    110c:	f55ff06f          	j	1060 <_ftoa+0x4fc>

00001110 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    1110:	f9010113          	addi	sp,sp,-112
    1114:	06112623          	sw	ra,108(sp)
    1118:	06812423          	sw	s0,104(sp)
    111c:	06912223          	sw	s1,100(sp)
    1120:	07212023          	sw	s2,96(sp)
    1124:	05312e23          	sw	s3,92(sp)
    1128:	05412c23          	sw	s4,88(sp)
    112c:	05512a23          	sw	s5,84(sp)
    1130:	05612823          	sw	s6,80(sp)
    1134:	05712623          	sw	s7,76(sp)
    1138:	05812423          	sw	s8,72(sp)
    113c:	05912223          	sw	s9,68(sp)
    1140:	05a12023          	sw	s10,64(sp)
    1144:	03b12e23          	sw	s11,60(sp)
    1148:	00050a93          	mv	s5,a0
    114c:	00058a13          	mv	s4,a1
    1150:	00060993          	mv	s3,a2
    1154:	00068413          	mv	s0,a3
    1158:	00070d13          	mv	s10,a4
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    115c:	02058c63          	beqz	a1,1194 <_vsnprintf+0x84>
    // use null output function
    out = _out_null;
  }

  while (*format)
    1160:	00044503          	lbu	a0,0(s0)
    1164:	00000493          	li	s1,0
    1168:	78050a63          	beqz	a0,18fc <_vsnprintf+0x7ec>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    116c:	02500c93          	li	s9,37
    }

    // evaluate flags
    flags = 0U;
    do {
      switch (*format) {
    1170:	00020bb7          	lui	s7,0x20
    1174:	064b8b93          	addi	s7,s7,100 # 20064 <__clzsi2+0x1b8c4>
      default :
        break;
    }

    // evaluate specifier
    switch (*format) {
    1178:	000207b7          	lui	a5,0x20
    117c:	0a878793          	addi	a5,a5,168 # 200a8 <__clzsi2+0x1b908>
    1180:	02f12023          	sw	a5,32(sp)
    switch (*format) {
    1184:	000207b7          	lui	a5,0x20
    1188:	01878793          	addi	a5,a5,24 # 20018 <__clzsi2+0x1b878>
    118c:	00f12e23          	sw	a5,28(sp)
    1190:	0f50006f          	j	1a84 <_vsnprintf+0x974>
    out = _out_null;
    1194:	02000a93          	li	s5,32
    1198:	fc9ff06f          	j	1160 <_vsnprintf+0x50>
    flags = 0U;
    119c:	00240713          	addi	a4,s0,2
    11a0:	00000613          	li	a2,0
      switch (*format) {
    11a4:	01000513          	li	a0,16
    11a8:	0600006f          	j	1208 <_vsnprintf+0xf8>
  return (ch >= '0') && (ch <= '9');
    11ac:	fd068793          	addi	a5,a3,-48
    if (_is_digit(*format)) {
    11b0:	0ff7f793          	zext.b	a5,a5
    11b4:	00900713          	li	a4,9
    11b8:	08f77a63          	bgeu	a4,a5,124c <_vsnprintf+0x13c>
    else if (*format == '*') {
    11bc:	02a00793          	li	a5,42
    width = 0U;
    11c0:	00000913          	li	s2,0
    else if (*format == '*') {
    11c4:	0af68e63          	beq	a3,a5,1280 <_vsnprintf+0x170>
    if (*format == '.') {
    11c8:	00044703          	lbu	a4,0(s0)
    11cc:	02e00793          	li	a5,46
    precision = 0U;
    11d0:	00000b13          	li	s6,0
    if (*format == '.') {
    11d4:	0cf70a63          	beq	a4,a5,12a8 <_vsnprintf+0x198>
    switch (*format) {
    11d8:	00044783          	lbu	a5,0(s0)
    11dc:	f9878793          	addi	a5,a5,-104
    11e0:	0ff7f693          	zext.b	a3,a5
    11e4:	01200713          	li	a4,18
    11e8:	18d76663          	bltu	a4,a3,1374 <_vsnprintf+0x264>
    11ec:	00269793          	slli	a5,a3,0x2
    11f0:	01c12703          	lw	a4,28(sp)
    11f4:	00e787b3          	add	a5,a5,a4
    11f8:	0007a783          	lw	a5,0(a5)
    11fc:	00078067          	jr	a5
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    1200:	00166613          	ori	a2,a2,1
    } while (n);
    1204:	00170713          	addi	a4,a4,1
    1208:	fff70413          	addi	s0,a4,-1
      switch (*format) {
    120c:	fff74683          	lbu	a3,-1(a4)
    1210:	fe068793          	addi	a5,a3,-32
    1214:	0ff7f593          	zext.b	a1,a5
    1218:	f8b56ae3          	bltu	a0,a1,11ac <_vsnprintf+0x9c>
    121c:	00259793          	slli	a5,a1,0x2
    1220:	017787b3          	add	a5,a5,s7
    1224:	0007a783          	lw	a5,0(a5)
    1228:	00078067          	jr	a5
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    122c:	00266613          	ori	a2,a2,2
    } while (n);
    1230:	fd5ff06f          	j	1204 <_vsnprintf+0xf4>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    1234:	00466613          	ori	a2,a2,4
    } while (n);
    1238:	fcdff06f          	j	1204 <_vsnprintf+0xf4>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    123c:	00866613          	ori	a2,a2,8
    } while (n);
    1240:	fc5ff06f          	j	1204 <_vsnprintf+0xf4>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    1244:	01066613          	ori	a2,a2,16
    } while (n);
    1248:	fbdff06f          	j	1204 <_vsnprintf+0xf4>
  unsigned int i = 0U;
    124c:	00000913          	li	s2,0
  while (_is_digit(**str)) {
    1250:	00900713          	li	a4,9
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1254:	00140413          	addi	s0,s0,1
    1258:	00291793          	slli	a5,s2,0x2
    125c:	012787b3          	add	a5,a5,s2
    1260:	00179793          	slli	a5,a5,0x1
    1264:	00d787b3          	add	a5,a5,a3
    1268:	fd078913          	addi	s2,a5,-48
  while (_is_digit(**str)) {
    126c:	00044683          	lbu	a3,0(s0)
  return (ch >= '0') && (ch <= '9');
    1270:	fd068793          	addi	a5,a3,-48
  while (_is_digit(**str)) {
    1274:	0ff7f793          	zext.b	a5,a5
    1278:	fcf77ee3          	bgeu	a4,a5,1254 <_vsnprintf+0x144>
    127c:	f4dff06f          	j	11c8 <_vsnprintf+0xb8>
      const int w = va_arg(va, int);
    1280:	004d0713          	addi	a4,s10,4 # 80000004 <__bss_start+0x7ffd0004>
    1284:	000d2783          	lw	a5,0(s10)
        width = (unsigned int)w;
    1288:	00078913          	mv	s2,a5
      if (w < 0) {
    128c:	0007c863          	bltz	a5,129c <_vsnprintf+0x18c>
      format++;
    1290:	00140413          	addi	s0,s0,1
      const int w = va_arg(va, int);
    1294:	00070d13          	mv	s10,a4
    1298:	f31ff06f          	j	11c8 <_vsnprintf+0xb8>
        flags |= FLAGS_LEFT;    // reverse padding
    129c:	00266613          	ori	a2,a2,2
        width = (unsigned int)-w;
    12a0:	40f00933          	neg	s2,a5
    12a4:	fedff06f          	j	1290 <_vsnprintf+0x180>
      flags |= FLAGS_PRECISION;
    12a8:	40066613          	ori	a2,a2,1024
      format++;
    12ac:	00140693          	addi	a3,s0,1
      if (_is_digit(*format)) {
    12b0:	00144703          	lbu	a4,1(s0)
  return (ch >= '0') && (ch <= '9');
    12b4:	fd070793          	addi	a5,a4,-48
      if (_is_digit(*format)) {
    12b8:	0ff7f793          	zext.b	a5,a5
    12bc:	00900593          	li	a1,9
    12c0:	00f5fc63          	bgeu	a1,a5,12d8 <_vsnprintf+0x1c8>
      else if (*format == '*') {
    12c4:	02a00793          	li	a5,42
    12c8:	04f70063          	beq	a4,a5,1308 <_vsnprintf+0x1f8>
      format++;
    12cc:	00068413          	mv	s0,a3
    precision = 0U;
    12d0:	00000b13          	li	s6,0
    12d4:	f05ff06f          	j	11d8 <_vsnprintf+0xc8>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    12d8:	00168693          	addi	a3,a3,1
    12dc:	002b1793          	slli	a5,s6,0x2
    12e0:	016787b3          	add	a5,a5,s6
    12e4:	00179793          	slli	a5,a5,0x1
    12e8:	00e787b3          	add	a5,a5,a4
    12ec:	fd078b13          	addi	s6,a5,-48
  while (_is_digit(**str)) {
    12f0:	0006c703          	lbu	a4,0(a3)
  return (ch >= '0') && (ch <= '9');
    12f4:	fd070793          	addi	a5,a4,-48
  while (_is_digit(**str)) {
    12f8:	0ff7f793          	zext.b	a5,a5
    12fc:	fcf5fee3          	bgeu	a1,a5,12d8 <_vsnprintf+0x1c8>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1300:	00068413          	mv	s0,a3
    1304:	ed5ff06f          	j	11d8 <_vsnprintf+0xc8>
        precision = prec > 0 ? (unsigned int)prec : 0U;
    1308:	000d2b03          	lw	s6,0(s10)
    130c:	fffb4793          	not	a5,s6
    1310:	41f7d793          	srai	a5,a5,0x1f
    1314:	00fb7b33          	and	s6,s6,a5
        format++;
    1318:	00240413          	addi	s0,s0,2
        const int prec = (int)va_arg(va, int);
    131c:	004d0d13          	addi	s10,s10,4
    1320:	eb9ff06f          	j	11d8 <_vsnprintf+0xc8>
        if (*format == 'l') {
    1324:	00144703          	lbu	a4,1(s0)
    1328:	06c00793          	li	a5,108
    132c:	00f70863          	beq	a4,a5,133c <_vsnprintf+0x22c>
        flags |= FLAGS_LONG;
    1330:	10066613          	ori	a2,a2,256
        format++;
    1334:	00140413          	addi	s0,s0,1
    1338:	03c0006f          	j	1374 <_vsnprintf+0x264>
          flags |= FLAGS_LONG_LONG;
    133c:	30066613          	ori	a2,a2,768
          format++;
    1340:	00240413          	addi	s0,s0,2
    1344:	0300006f          	j	1374 <_vsnprintf+0x264>
        if (*format == 'h') {
    1348:	00144703          	lbu	a4,1(s0)
    134c:	06800793          	li	a5,104
    1350:	00f70863          	beq	a4,a5,1360 <_vsnprintf+0x250>
        flags |= FLAGS_SHORT;
    1354:	08066613          	ori	a2,a2,128
        format++;
    1358:	00140413          	addi	s0,s0,1
    135c:	0180006f          	j	1374 <_vsnprintf+0x264>
          flags |= FLAGS_CHAR;
    1360:	0c066613          	ori	a2,a2,192
          format++;
    1364:	00240413          	addi	s0,s0,2
    1368:	00c0006f          	j	1374 <_vsnprintf+0x264>
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    136c:	10066613          	ori	a2,a2,256
        format++;
    1370:	00140413          	addi	s0,s0,1
    switch (*format) {
    1374:	00044503          	lbu	a0,0(s0)
    1378:	06700793          	li	a5,103
    137c:	04a7e463          	bltu	a5,a0,13c4 <_vsnprintf+0x2b4>
    1380:	02400793          	li	a5,36
    1384:	06a7fc63          	bgeu	a5,a0,13fc <_vsnprintf+0x2ec>
    1388:	fdb50793          	addi	a5,a0,-37
    138c:	0ff7f693          	zext.b	a3,a5
    1390:	04200713          	li	a4,66
    1394:	06d76463          	bltu	a4,a3,13fc <_vsnprintf+0x2ec>
    1398:	00269793          	slli	a5,a3,0x2
    139c:	02012703          	lw	a4,32(sp)
    13a0:	00e787b3          	add	a5,a5,a4
    13a4:	0007a783          	lw	a5,0(a5)
    13a8:	00078067          	jr	a5
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    13ac:	20066613          	ori	a2,a2,512
        format++;
    13b0:	00140413          	addi	s0,s0,1
        break;
    13b4:	fc1ff06f          	j	1374 <_vsnprintf+0x264>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    13b8:	10066613          	ori	a2,a2,256
        format++;
    13bc:	00140413          	addi	s0,s0,1
        break;
    13c0:	fb5ff06f          	j	1374 <_vsnprintf+0x264>
    switch (*format) {
    13c4:	f9750793          	addi	a5,a0,-105
    13c8:	0ff7f793          	zext.b	a5,a5
    13cc:	00f00713          	li	a4,15
    13d0:	02f76663          	bltu	a4,a5,13fc <_vsnprintf+0x2ec>
    13d4:	00100713          	li	a4,1
    13d8:	00f71733          	sll	a4,a4,a5
    13dc:	000096b7          	lui	a3,0x9
    13e0:	04168693          	addi	a3,a3,65 # 9041 <__clzsi2+0x48a1>
    13e4:	00d77733          	and	a4,a4,a3
    13e8:	62071063          	bnez	a4,1a08 <_vsnprintf+0x8f8>
    13ec:	00a00713          	li	a4,10
    13f0:	34e78e63          	beq	a5,a4,174c <_vsnprintf+0x63c>
    13f4:	00700713          	li	a4,7
    13f8:	48e78c63          	beq	a5,a4,1890 <_vsnprintf+0x780>
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
    13fc:	00148913          	addi	s2,s1,1
    1400:	00098693          	mv	a3,s3
    1404:	00048613          	mv	a2,s1
    1408:	000a0593          	mv	a1,s4
    140c:	000a80e7          	jalr	s5
        format++;
    1410:	00140413          	addi	s0,s0,1
        out(*format, buffer, idx++, maxlen);
    1414:	00090493          	mv	s1,s2
        break;
    1418:	6640006f          	j	1a7c <_vsnprintf+0x96c>
        if (*format == 'x' || *format == 'X') {
    141c:	07800793          	li	a5,120
    1420:	52f50e63          	beq	a0,a5,195c <_vsnprintf+0x84c>
    1424:	06200793          	li	a5,98
    1428:	00200813          	li	a6,2
    142c:	5ef50463          	beq	a0,a5,1a14 <_vsnprintf+0x904>
    1430:	06f00793          	li	a5,111
    1434:	52f50863          	beq	a0,a5,1964 <_vsnprintf+0x854>
    1438:	05800793          	li	a5,88
    143c:	54f50a63          	beq	a0,a5,1990 <_vsnprintf+0x880>
          flags &= ~FLAGS_HASH;   // no hash for dec format
    1440:	fef67613          	andi	a2,a2,-17
          base = 10U;
    1444:	00a00813          	li	a6,10
    1448:	5cc0006f          	j	1a14 <_vsnprintf+0x904>
        if ((*format != 'i') && (*format != 'd')) {
    144c:	06400793          	li	a5,100
    1450:	54f51463          	bne	a0,a5,1998 <_vsnprintf+0x888>
        if (flags & FLAGS_PRECISION) {
    1454:	40067793          	andi	a5,a2,1024
    1458:	5c078663          	beqz	a5,1a24 <_vsnprintf+0x914>
          flags &= ~FLAGS_ZEROPAD;
    145c:	ffe67613          	andi	a2,a2,-2
        if ((*format == 'i') || (*format == 'd')) {
    1460:	5c40006f          	j	1a24 <_vsnprintf+0x914>
          flags &= ~FLAGS_ZEROPAD;
    1464:	00078613          	mv	a2,a5
    1468:	5bc0006f          	j	1a24 <_vsnprintf+0x914>
            const long long value = va_arg(va, long long);
    146c:	007d0713          	addi	a4,s10,7
    1470:	ff877713          	andi	a4,a4,-8
    1474:	00870d13          	addi	s10,a4,8
    1478:	00072783          	lw	a5,0(a4)
    147c:	00472503          	lw	a0,4(a4)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    1480:	41f55693          	srai	a3,a0,0x1f
    1484:	00f6c7b3          	xor	a5,a3,a5
    1488:	00a6c5b3          	xor	a1,a3,a0
    148c:	40d78733          	sub	a4,a5,a3
    1490:	00e7b7b3          	sltu	a5,a5,a4
    1494:	40d586b3          	sub	a3,a1,a3
    1498:	00c12623          	sw	a2,12(sp)
    149c:	01212423          	sw	s2,8(sp)
    14a0:	01612223          	sw	s6,4(sp)
    14a4:	00012023          	sw	zero,0(sp)
    14a8:	00080893          	mv	a7,a6
    14ac:	01f55813          	srli	a6,a0,0x1f
    14b0:	40f687b3          	sub	a5,a3,a5
    14b4:	00098693          	mv	a3,s3
    14b8:	00048613          	mv	a2,s1
    14bc:	000a0593          	mv	a1,s4
    14c0:	000a8513          	mv	a0,s5
    14c4:	f69fe0ef          	jal	ra,42c <_ntoa_long_long>
    14c8:	00050493          	mv	s1,a0
    14cc:	5ac0006f          	j	1a78 <_vsnprintf+0x968>
            const long value = va_arg(va, long);
    14d0:	004d0c13          	addi	s8,s10,4
    14d4:	000d2783          	lw	a5,0(s10)
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    14d8:	41f7d713          	srai	a4,a5,0x1f
    14dc:	00f746b3          	xor	a3,a4,a5
    14e0:	00c12223          	sw	a2,4(sp)
    14e4:	01212023          	sw	s2,0(sp)
    14e8:	000b0893          	mv	a7,s6
    14ec:	01f7d793          	srli	a5,a5,0x1f
    14f0:	40e68733          	sub	a4,a3,a4
    14f4:	00098693          	mv	a3,s3
    14f8:	00048613          	mv	a2,s1
    14fc:	000a0593          	mv	a1,s4
    1500:	000a8513          	mv	a0,s5
    1504:	e69fe0ef          	jal	ra,36c <_ntoa_long>
    1508:	00050493          	mv	s1,a0
            const long value = va_arg(va, long);
    150c:	000c0d13          	mv	s10,s8
    1510:	5680006f          	j	1a78 <_vsnprintf+0x968>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    1514:	08067793          	andi	a5,a2,128
    1518:	00078863          	beqz	a5,1528 <_vsnprintf+0x418>
    151c:	000d1783          	lh	a5,0(s10)
    1520:	004d0d13          	addi	s10,s10,4
    1524:	5200006f          	j	1a44 <_vsnprintf+0x934>
    1528:	000d2783          	lw	a5,0(s10)
    152c:	004d0d13          	addi	s10,s10,4
    1530:	5140006f          	j	1a44 <_vsnprintf+0x934>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    1534:	007d0713          	addi	a4,s10,7
    1538:	ff877713          	andi	a4,a4,-8
    153c:	00870d13          	addi	s10,a4,8
    1540:	00072603          	lw	a2,0(a4)
    1544:	00472683          	lw	a3,4(a4)
    1548:	00f12623          	sw	a5,12(sp)
    154c:	01212423          	sw	s2,8(sp)
    1550:	01612223          	sw	s6,4(sp)
    1554:	00012023          	sw	zero,0(sp)
    1558:	00080893          	mv	a7,a6
    155c:	00000813          	li	a6,0
    1560:	00060713          	mv	a4,a2
    1564:	00068793          	mv	a5,a3
    1568:	00098693          	mv	a3,s3
    156c:	00048613          	mv	a2,s1
    1570:	000a0593          	mv	a1,s4
    1574:	000a8513          	mv	a0,s5
    1578:	eb5fe0ef          	jal	ra,42c <_ntoa_long_long>
    157c:	00050493          	mv	s1,a0
    1580:	4f80006f          	j	1a78 <_vsnprintf+0x968>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    1584:	004d0c13          	addi	s8,s10,4
    1588:	000d2703          	lw	a4,0(s10)
    158c:	00f12223          	sw	a5,4(sp)
    1590:	01212023          	sw	s2,0(sp)
    1594:	000b0893          	mv	a7,s6
    1598:	00000793          	li	a5,0
    159c:	00098693          	mv	a3,s3
    15a0:	00048613          	mv	a2,s1
    15a4:	000a0593          	mv	a1,s4
    15a8:	000a8513          	mv	a0,s5
    15ac:	dc1fe0ef          	jal	ra,36c <_ntoa_long>
    15b0:	00050493          	mv	s1,a0
    15b4:	000c0d13          	mv	s10,s8
    15b8:	4c00006f          	j	1a78 <_vsnprintf+0x968>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    15bc:	0807f713          	andi	a4,a5,128
    15c0:	00070863          	beqz	a4,15d0 <_vsnprintf+0x4c0>
    15c4:	000d5703          	lhu	a4,0(s10)
    15c8:	004d0d13          	addi	s10,s10,4
    15cc:	4100006f          	j	19dc <_vsnprintf+0x8cc>
    15d0:	000d2703          	lw	a4,0(s10)
    15d4:	004d0d13          	addi	s10,s10,4
    15d8:	4040006f          	j	19dc <_vsnprintf+0x8cc>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
    15dc:	04600793          	li	a5,70
    15e0:	04f50263          	beq	a0,a5,1624 <_vsnprintf+0x514>
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    15e4:	007d0793          	addi	a5,s10,7
    15e8:	ff87f793          	andi	a5,a5,-8
    15ec:	00878d13          	addi	s10,a5,8
    15f0:	0007a703          	lw	a4,0(a5)
    15f4:	0047a783          	lw	a5,4(a5)
    15f8:	00c12023          	sw	a2,0(sp)
    15fc:	00090893          	mv	a7,s2
    1600:	000b0813          	mv	a6,s6
    1604:	00098693          	mv	a3,s3
    1608:	00048613          	mv	a2,s1
    160c:	000a0593          	mv	a1,s4
    1610:	000a8513          	mv	a0,s5
    1614:	d50ff0ef          	jal	ra,b64 <_ftoa>
    1618:	00050493          	mv	s1,a0
        format++;
    161c:	00140413          	addi	s0,s0,1
        break;
    1620:	45c0006f          	j	1a7c <_vsnprintf+0x96c>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
    1624:	02066613          	ori	a2,a2,32
    1628:	fbdff06f          	j	15e4 <_vsnprintf+0x4d4>
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
    162c:	0df57793          	andi	a5,a0,223
    1630:	04700713          	li	a4,71
    1634:	00e78863          	beq	a5,a4,1644 <_vsnprintf+0x534>
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
    1638:	04500793          	li	a5,69
    163c:	02f51263          	bne	a0,a5,1660 <_vsnprintf+0x550>
    1640:	01c0006f          	j	165c <_vsnprintf+0x54c>
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
    1644:	000017b7          	lui	a5,0x1
    1648:	80078793          	addi	a5,a5,-2048 # 800 <_etoa+0x244>
    164c:	00f66633          	or	a2,a2,a5
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
    1650:	0fd57513          	andi	a0,a0,253
    1654:	04500793          	li	a5,69
    1658:	00f51463          	bne	a0,a5,1660 <_vsnprintf+0x550>
    165c:	02066613          	ori	a2,a2,32
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    1660:	007d0793          	addi	a5,s10,7
    1664:	ff87f793          	andi	a5,a5,-8
    1668:	00878d13          	addi	s10,a5,8
    166c:	0007a703          	lw	a4,0(a5)
    1670:	0047a783          	lw	a5,4(a5)
    1674:	00c12023          	sw	a2,0(sp)
    1678:	00090893          	mv	a7,s2
    167c:	000b0813          	mv	a6,s6
    1680:	00098693          	mv	a3,s3
    1684:	00048613          	mv	a2,s1
    1688:	000a0593          	mv	a1,s4
    168c:	000a8513          	mv	a0,s5
    1690:	f2dfe0ef          	jal	ra,5bc <_etoa>
    1694:	00050493          	mv	s1,a0
        format++;
    1698:	00140413          	addi	s0,s0,1
        break;
    169c:	3e00006f          	j	1a7c <_vsnprintf+0x96c>
        if (!(flags & FLAGS_LEFT)) {
    16a0:	00267613          	andi	a2,a2,2
    16a4:	04060a63          	beqz	a2,16f8 <_vsnprintf+0x5e8>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    16a8:	004d0d93          	addi	s11,s10,4
    16ac:	00148b13          	addi	s6,s1,1
    16b0:	00098693          	mv	a3,s3
    16b4:	00048613          	mv	a2,s1
    16b8:	000a0593          	mv	a1,s4
    16bc:	000d4503          	lbu	a0,0(s10)
    16c0:	000a80e7          	jalr	s5
          while (l++ < width) {
    16c4:	00100793          	li	a5,1
    16c8:	00990c33          	add	s8,s2,s1
    16cc:	2b27f063          	bgeu	a5,s2,196c <_vsnprintf+0x85c>
            out(' ', buffer, idx++, maxlen);
    16d0:	000b0613          	mv	a2,s6
    16d4:	001b0b13          	addi	s6,s6,1
    16d8:	00098693          	mv	a3,s3
    16dc:	000a0593          	mv	a1,s4
    16e0:	02000513          	li	a0,32
    16e4:	000a80e7          	jalr	s5
          while (l++ < width) {
    16e8:	ff6c14e3          	bne	s8,s6,16d0 <_vsnprintf+0x5c0>
            out(' ', buffer, idx++, maxlen);
    16ec:	012484b3          	add	s1,s1,s2
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    16f0:	000d8d13          	mv	s10,s11
    16f4:	0500006f          	j	1744 <_vsnprintf+0x634>
          while (l++ < width) {
    16f8:	00100793          	li	a5,1
    16fc:	2727fe63          	bgeu	a5,s2,1978 <_vsnprintf+0x868>
    1700:	fff48793          	addi	a5,s1,-1
    1704:	01278933          	add	s2,a5,s2
            out(' ', buffer, idx++, maxlen);
    1708:	00048613          	mv	a2,s1
    170c:	00148493          	addi	s1,s1,1
    1710:	00098693          	mv	a3,s3
    1714:	000a0593          	mv	a1,s4
    1718:	02000513          	li	a0,32
    171c:	000a80e7          	jalr	s5
          while (l++ < width) {
    1720:	fe9914e3          	bne	s2,s1,1708 <_vsnprintf+0x5f8>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    1724:	004d0b13          	addi	s6,s10,4
    1728:	00190493          	addi	s1,s2,1
    172c:	00098693          	mv	a3,s3
    1730:	00090613          	mv	a2,s2
    1734:	000a0593          	mv	a1,s4
    1738:	000d4503          	lbu	a0,0(s10)
    173c:	000a80e7          	jalr	s5
    1740:	000b0d13          	mv	s10,s6
        format++;
    1744:	00140413          	addi	s0,s0,1
        break;
    1748:	3340006f          	j	1a7c <_vsnprintf+0x96c>
        const char* p = va_arg(va, char*);
    174c:	004d0793          	addi	a5,s10,4
    1750:	02f12423          	sw	a5,40(sp)
    1754:	000d2d03          	lw	s10,0(s10)
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
    1758:	000b0693          	mv	a3,s6
    175c:	000b1463          	bnez	s6,1764 <_vsnprintf+0x654>
    1760:	fff00693          	li	a3,-1
  for (s = str; *s && maxsize--; ++s);
    1764:	000d4503          	lbu	a0,0(s10)
    1768:	000d0793          	mv	a5,s10
    176c:	00050e63          	beqz	a0,1788 <_vsnprintf+0x678>
    1770:	00178793          	addi	a5,a5,1
    1774:	0007c703          	lbu	a4,0(a5)
    1778:	00070863          	beqz	a4,1788 <_vsnprintf+0x678>
    177c:	40fd0733          	sub	a4,s10,a5
    1780:	00d70733          	add	a4,a4,a3
    1784:	fe0716e3          	bnez	a4,1770 <_vsnprintf+0x660>
  return (unsigned int)(s - str);
    1788:	41a787b3          	sub	a5,a5,s10
    178c:	02f12223          	sw	a5,36(sp)
        if (flags & FLAGS_PRECISION) {
    1790:	40067d93          	andi	s11,a2,1024
    1794:	000d8663          	beqz	s11,17a0 <_vsnprintf+0x690>
          l = (l < precision ? l : precision);
    1798:	00fb7463          	bgeu	s6,a5,17a0 <_vsnprintf+0x690>
    179c:	03612223          	sw	s6,36(sp)
        if (!(flags & FLAGS_LEFT)) {
    17a0:	00267793          	andi	a5,a2,2
    17a4:	02f12623          	sw	a5,44(sp)
    17a8:	00078863          	beqz	a5,17b8 <_vsnprintf+0x6a8>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    17ac:	0a050663          	beqz	a0,1858 <_vsnprintf+0x748>
          out(*(p++), buffer, idx++, maxlen);
    17b0:	00048613          	mv	a2,s1
    17b4:	0780006f          	j	182c <_vsnprintf+0x71c>
          while (l++ < width) {
    17b8:	02412703          	lw	a4,36(sp)
    17bc:	00170793          	addi	a5,a4,1
    17c0:	1d277063          	bgeu	a4,s2,1980 <_vsnprintf+0x870>
    17c4:	00990c33          	add	s8,s2,s1
    17c8:	40ec0c33          	sub	s8,s8,a4
            out(' ', buffer, idx++, maxlen);
    17cc:	00048613          	mv	a2,s1
    17d0:	00148493          	addi	s1,s1,1
    17d4:	00098693          	mv	a3,s3
    17d8:	000a0593          	mv	a1,s4
    17dc:	02000513          	li	a0,32
    17e0:	000a80e7          	jalr	s5
          while (l++ < width) {
    17e4:	fe9c14e3          	bne	s8,s1,17cc <_vsnprintf+0x6bc>
    17e8:	00190793          	addi	a5,s2,1
    17ec:	02f12223          	sw	a5,36(sp)
            out(' ', buffer, idx++, maxlen);
    17f0:	000c0493          	mv	s1,s8
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    17f4:	000d4503          	lbu	a0,0(s10)
    17f8:	00048c13          	mv	s8,s1
    17fc:	fa051ae3          	bnez	a0,17b0 <_vsnprintf+0x6a0>
    1800:	0440006f          	j	1844 <_vsnprintf+0x734>
    1804:	00078b13          	mv	s6,a5
          out(*(p++), buffer, idx++, maxlen);
    1808:	00160c13          	addi	s8,a2,1
    180c:	00098693          	mv	a3,s3
    1810:	000a0593          	mv	a1,s4
    1814:	000a80e7          	jalr	s5
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    1818:	409c07b3          	sub	a5,s8,s1
    181c:	00fd07b3          	add	a5,s10,a5
    1820:	0007c503          	lbu	a0,0(a5)
    1824:	00050c63          	beqz	a0,183c <_vsnprintf+0x72c>
          out(*(p++), buffer, idx++, maxlen);
    1828:	000c0613          	mv	a2,s8
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    182c:	fc0d8ee3          	beqz	s11,1808 <_vsnprintf+0x6f8>
    1830:	fffb0793          	addi	a5,s6,-1
    1834:	fc0b18e3          	bnez	s6,1804 <_vsnprintf+0x6f4>
    1838:	00060c13          	mv	s8,a2
        if (flags & FLAGS_LEFT) {
    183c:	02c12783          	lw	a5,44(sp)
    1840:	00079a63          	bnez	a5,1854 <_vsnprintf+0x744>
        format++;
    1844:	00140413          	addi	s0,s0,1
        const char* p = va_arg(va, char*);
    1848:	02812d03          	lw	s10,40(sp)
        break;
    184c:	000c0493          	mv	s1,s8
    1850:	22c0006f          	j	1a7c <_vsnprintf+0x96c>
    1854:	000c0493          	mv	s1,s8
          while (l++ < width) {
    1858:	02412783          	lw	a5,36(sp)
    185c:	0327f663          	bgeu	a5,s2,1888 <_vsnprintf+0x778>
    1860:	00990c33          	add	s8,s2,s1
    1864:	40fc0c33          	sub	s8,s8,a5
            out(' ', buffer, idx++, maxlen);
    1868:	00048613          	mv	a2,s1
    186c:	00148493          	addi	s1,s1,1
    1870:	00098693          	mv	a3,s3
    1874:	000a0593          	mv	a1,s4
    1878:	02000513          	li	a0,32
    187c:	000a80e7          	jalr	s5
          while (l++ < width) {
    1880:	ff8494e3          	bne	s1,s8,1868 <_vsnprintf+0x758>
    1884:	fc1ff06f          	j	1844 <_vsnprintf+0x734>
    1888:	00048c13          	mv	s8,s1
    188c:	fb9ff06f          	j	1844 <_vsnprintf+0x734>
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    1890:	004d0913          	addi	s2,s10,4
    1894:	000d2703          	lw	a4,0(s10)
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    1898:	02166613          	ori	a2,a2,33
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    189c:	00c12223          	sw	a2,4(sp)
    18a0:	00800793          	li	a5,8
    18a4:	00f12023          	sw	a5,0(sp)
    18a8:	000b0893          	mv	a7,s6
    18ac:	01000813          	li	a6,16
    18b0:	00000793          	li	a5,0
    18b4:	00098693          	mv	a3,s3
    18b8:	00048613          	mv	a2,s1
    18bc:	000a0593          	mv	a1,s4
    18c0:	000a8513          	mv	a0,s5
    18c4:	aa9fe0ef          	jal	ra,36c <_ntoa_long>
    18c8:	00050493          	mv	s1,a0
        format++;
    18cc:	00140413          	addi	s0,s0,1
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    18d0:	00090d13          	mv	s10,s2
        break;
    18d4:	1a80006f          	j	1a7c <_vsnprintf+0x96c>
        out('%', buffer, idx++, maxlen);
    18d8:	00148913          	addi	s2,s1,1
    18dc:	00098693          	mv	a3,s3
    18e0:	00048613          	mv	a2,s1
    18e4:	000a0593          	mv	a1,s4
    18e8:	000c8513          	mv	a0,s9
    18ec:	000a80e7          	jalr	s5
        format++;
    18f0:	00140413          	addi	s0,s0,1
        out('%', buffer, idx++, maxlen);
    18f4:	00090493          	mv	s1,s2
        break;
    18f8:	1840006f          	j	1a7c <_vsnprintf+0x96c>
  while (*format)
    18fc:	00000493          	li	s1,0
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    1900:	00048613          	mv	a2,s1
    1904:	0134e463          	bltu	s1,s3,190c <_vsnprintf+0x7fc>
    1908:	fff98613          	addi	a2,s3,-1
    190c:	00098693          	mv	a3,s3
    1910:	000a0593          	mv	a1,s4
    1914:	00000513          	li	a0,0
    1918:	000a80e7          	jalr	s5

  // return written chars without terminating \0
  return (int)idx;
}
    191c:	00048513          	mv	a0,s1
    1920:	06c12083          	lw	ra,108(sp)
    1924:	06812403          	lw	s0,104(sp)
    1928:	06412483          	lw	s1,100(sp)
    192c:	06012903          	lw	s2,96(sp)
    1930:	05c12983          	lw	s3,92(sp)
    1934:	05812a03          	lw	s4,88(sp)
    1938:	05412a83          	lw	s5,84(sp)
    193c:	05012b03          	lw	s6,80(sp)
    1940:	04c12b83          	lw	s7,76(sp)
    1944:	04812c03          	lw	s8,72(sp)
    1948:	04412c83          	lw	s9,68(sp)
    194c:	04012d03          	lw	s10,64(sp)
    1950:	03c12d83          	lw	s11,60(sp)
    1954:	07010113          	addi	sp,sp,112
    1958:	00008067          	ret
          base = 16U;
    195c:	01000813          	li	a6,16
    1960:	0b40006f          	j	1a14 <_vsnprintf+0x904>
        if (*format == 'x' || *format == 'X') {
    1964:	00800813          	li	a6,8
    1968:	0ac0006f          	j	1a14 <_vsnprintf+0x904>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    196c:	000d8d13          	mv	s10,s11
    1970:	000b0493          	mv	s1,s6
    1974:	dd1ff06f          	j	1744 <_vsnprintf+0x634>
          while (l++ < width) {
    1978:	00048913          	mv	s2,s1
    197c:	da9ff06f          	j	1724 <_vsnprintf+0x614>
          while (l++ < width) {
    1980:	02f12223          	sw	a5,36(sp)
    1984:	e71ff06f          	j	17f4 <_vsnprintf+0x6e4>
          flags &= ~FLAGS_ZEROPAD;
    1988:	ffe67613          	andi	a2,a2,-2
        if ((*format == 'i') || (*format == 'd')) {
    198c:	0980006f          	j	1a24 <_vsnprintf+0x914>
          flags |= FLAGS_UPPERCASE;
    1990:	02066613          	ori	a2,a2,32
    1994:	01000813          	li	a6,16
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    1998:	ff367793          	andi	a5,a2,-13
        if (flags & FLAGS_PRECISION) {
    199c:	40067713          	andi	a4,a2,1024
    19a0:	00070e63          	beqz	a4,19bc <_vsnprintf+0x8ac>
          flags &= ~FLAGS_ZEROPAD;
    19a4:	ff267793          	andi	a5,a2,-14
        if ((*format == 'i') || (*format == 'd')) {
    19a8:	06900713          	li	a4,105
    19ac:	aae50ce3          	beq	a0,a4,1464 <_vsnprintf+0x354>
    19b0:	06400713          	li	a4,100
          flags &= ~FLAGS_ZEROPAD;
    19b4:	00078613          	mv	a2,a5
        if ((*format == 'i') || (*format == 'd')) {
    19b8:	06e50663          	beq	a0,a4,1a24 <_vsnprintf+0x914>
          if (flags & FLAGS_LONG_LONG) {
    19bc:	2007f713          	andi	a4,a5,512
    19c0:	b6071ae3          	bnez	a4,1534 <_vsnprintf+0x424>
          else if (flags & FLAGS_LONG) {
    19c4:	1007f713          	andi	a4,a5,256
    19c8:	ba071ee3          	bnez	a4,1584 <_vsnprintf+0x474>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    19cc:	0407f713          	andi	a4,a5,64
    19d0:	be0706e3          	beqz	a4,15bc <_vsnprintf+0x4ac>
    19d4:	000d4703          	lbu	a4,0(s10)
    19d8:	004d0d13          	addi	s10,s10,4
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    19dc:	00f12223          	sw	a5,4(sp)
    19e0:	01212023          	sw	s2,0(sp)
    19e4:	000b0893          	mv	a7,s6
    19e8:	00000793          	li	a5,0
    19ec:	00098693          	mv	a3,s3
    19f0:	00048613          	mv	a2,s1
    19f4:	000a0593          	mv	a1,s4
    19f8:	000a8513          	mv	a0,s5
    19fc:	971fe0ef          	jal	ra,36c <_ntoa_long>
    1a00:	00050493          	mv	s1,a0
    1a04:	0740006f          	j	1a78 <_vsnprintf+0x968>
        if (*format == 'x' || *format == 'X') {
    1a08:	07800793          	li	a5,120
          base = 16U;
    1a0c:	01000813          	li	a6,16
        if (*format == 'x' || *format == 'X') {
    1a10:	a2f510e3          	bne	a0,a5,1430 <_vsnprintf+0x320>
        if ((*format != 'i') && (*format != 'd')) {
    1a14:	06900793          	li	a5,105
    1a18:	a2f51ae3          	bne	a0,a5,144c <_vsnprintf+0x33c>
        if (flags & FLAGS_PRECISION) {
    1a1c:	40067793          	andi	a5,a2,1024
    1a20:	f60794e3          	bnez	a5,1988 <_vsnprintf+0x878>
          if (flags & FLAGS_LONG_LONG) {
    1a24:	20067793          	andi	a5,a2,512
    1a28:	a40792e3          	bnez	a5,146c <_vsnprintf+0x35c>
          else if (flags & FLAGS_LONG) {
    1a2c:	10067793          	andi	a5,a2,256
    1a30:	aa0790e3          	bnez	a5,14d0 <_vsnprintf+0x3c0>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    1a34:	04067793          	andi	a5,a2,64
    1a38:	ac078ee3          	beqz	a5,1514 <_vsnprintf+0x404>
    1a3c:	000d4783          	lbu	a5,0(s10)
    1a40:	004d0d13          	addi	s10,s10,4
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    1a44:	41f7d713          	srai	a4,a5,0x1f
    1a48:	00f746b3          	xor	a3,a4,a5
    1a4c:	00c12223          	sw	a2,4(sp)
    1a50:	01212023          	sw	s2,0(sp)
    1a54:	000b0893          	mv	a7,s6
    1a58:	01f7d793          	srli	a5,a5,0x1f
    1a5c:	40e68733          	sub	a4,a3,a4
    1a60:	00098693          	mv	a3,s3
    1a64:	00048613          	mv	a2,s1
    1a68:	000a0593          	mv	a1,s4
    1a6c:	000a8513          	mv	a0,s5
    1a70:	8fdfe0ef          	jal	ra,36c <_ntoa_long>
    1a74:	00050493          	mv	s1,a0
        format++;
    1a78:	00140413          	addi	s0,s0,1
  while (*format)
    1a7c:	00044503          	lbu	a0,0(s0)
    1a80:	e80500e3          	beqz	a0,1900 <_vsnprintf+0x7f0>
    if (*format != '%') {
    1a84:	f1950c63          	beq	a0,s9,119c <_vsnprintf+0x8c>
      out(*format, buffer, idx++, maxlen);
    1a88:	00148913          	addi	s2,s1,1
    1a8c:	00098693          	mv	a3,s3
    1a90:	00048613          	mv	a2,s1
    1a94:	000a0593          	mv	a1,s4
    1a98:	000a80e7          	jalr	s5
      format++;
    1a9c:	00140413          	addi	s0,s0,1
      out(*format, buffer, idx++, maxlen);
    1aa0:	00090493          	mv	s1,s2
      continue;
    1aa4:	fd9ff06f          	j	1a7c <_vsnprintf+0x96c>

00001aa8 <_out_char>:
  if (character) {
    1aa8:	00051463          	bnez	a0,1ab0 <_out_char+0x8>
    1aac:	00008067          	ret
{
    1ab0:	ff010113          	addi	sp,sp,-16
    1ab4:	00112623          	sw	ra,12(sp)
  uart_send_char(character);
    1ab8:	1ac000ef          	jal	ra,1c64 <uart_send_char>
}
    1abc:	00c12083          	lw	ra,12(sp)
    1ac0:	01010113          	addi	sp,sp,16
    1ac4:	00008067          	ret

00001ac8 <_putchar>:
void _putchar(char character){
    1ac8:	ff010113          	addi	sp,sp,-16
    1acc:	00112623          	sw	ra,12(sp)
  uart_send_char(character);
    1ad0:	194000ef          	jal	ra,1c64 <uart_send_char>
}
    1ad4:	00c12083          	lw	ra,12(sp)
    1ad8:	01010113          	addi	sp,sp,16
    1adc:	00008067          	ret

00001ae0 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
    1ae0:	fc010113          	addi	sp,sp,-64
    1ae4:	00112e23          	sw	ra,28(sp)
    1ae8:	02b12223          	sw	a1,36(sp)
    1aec:	02c12423          	sw	a2,40(sp)
    1af0:	02d12623          	sw	a3,44(sp)
    1af4:	02e12823          	sw	a4,48(sp)
    1af8:	02f12a23          	sw	a5,52(sp)
    1afc:	03012c23          	sw	a6,56(sp)
    1b00:	03112e23          	sw	a7,60(sp)
  va_list va;
  va_start(va, format);
    1b04:	02410713          	addi	a4,sp,36
    1b08:	00e12623          	sw	a4,12(sp)
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    1b0c:	00050693          	mv	a3,a0
    1b10:	fff00613          	li	a2,-1
    1b14:	00810593          	addi	a1,sp,8
    1b18:	00002537          	lui	a0,0x2
    1b1c:	aa850513          	addi	a0,a0,-1368 # 1aa8 <_out_char>
    1b20:	df0ff0ef          	jal	ra,1110 <_vsnprintf>
  va_end(va);
  return ret;
}
    1b24:	01c12083          	lw	ra,28(sp)
    1b28:	04010113          	addi	sp,sp,64
    1b2c:	00008067          	ret

00001b30 <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
    1b30:	fc010113          	addi	sp,sp,-64
    1b34:	00112e23          	sw	ra,28(sp)
    1b38:	02c12423          	sw	a2,40(sp)
    1b3c:	02d12623          	sw	a3,44(sp)
    1b40:	02e12823          	sw	a4,48(sp)
    1b44:	02f12a23          	sw	a5,52(sp)
    1b48:	03012c23          	sw	a6,56(sp)
    1b4c:	03112e23          	sw	a7,60(sp)
  va_list va;
  va_start(va, format);
    1b50:	02810713          	addi	a4,sp,40
    1b54:	00e12623          	sw	a4,12(sp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
    1b58:	00058693          	mv	a3,a1
    1b5c:	fff00613          	li	a2,-1
    1b60:	00050593          	mv	a1,a0
    1b64:	01000513          	li	a0,16
    1b68:	da8ff0ef          	jal	ra,1110 <_vsnprintf>
  va_end(va);
  return ret;
}
    1b6c:	01c12083          	lw	ra,28(sp)
    1b70:	04010113          	addi	sp,sp,64
    1b74:	00008067          	ret

00001b78 <snprintf_>:


int snprintf_(char* buffer, size_t count, const char* format, ...)
{
    1b78:	fc010113          	addi	sp,sp,-64
    1b7c:	00112e23          	sw	ra,28(sp)
    1b80:	02d12623          	sw	a3,44(sp)
    1b84:	02e12823          	sw	a4,48(sp)
    1b88:	02f12a23          	sw	a5,52(sp)
    1b8c:	03012c23          	sw	a6,56(sp)
    1b90:	03112e23          	sw	a7,60(sp)
  va_list va;
  va_start(va, format);
    1b94:	02c10713          	addi	a4,sp,44
    1b98:	00e12623          	sw	a4,12(sp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
    1b9c:	00060693          	mv	a3,a2
    1ba0:	00058613          	mv	a2,a1
    1ba4:	00050593          	mv	a1,a0
    1ba8:	01000513          	li	a0,16
    1bac:	d64ff0ef          	jal	ra,1110 <_vsnprintf>
  va_end(va);
  return ret;
}
    1bb0:	01c12083          	lw	ra,28(sp)
    1bb4:	04010113          	addi	sp,sp,64
    1bb8:	00008067          	ret

00001bbc <vprintf_>:


int vprintf_(const char* format, va_list va)
{
    1bbc:	fe010113          	addi	sp,sp,-32
    1bc0:	00112e23          	sw	ra,28(sp)
    1bc4:	00050693          	mv	a3,a0
    1bc8:	00058713          	mv	a4,a1
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    1bcc:	fff00613          	li	a2,-1
    1bd0:	00c10593          	addi	a1,sp,12
    1bd4:	00002537          	lui	a0,0x2
    1bd8:	aa850513          	addi	a0,a0,-1368 # 1aa8 <_out_char>
    1bdc:	d34ff0ef          	jal	ra,1110 <_vsnprintf>
}
    1be0:	01c12083          	lw	ra,28(sp)
    1be4:	02010113          	addi	sp,sp,32
    1be8:	00008067          	ret

00001bec <vsnprintf_>:


int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
    1bec:	ff010113          	addi	sp,sp,-16
    1bf0:	00112623          	sw	ra,12(sp)
    1bf4:	00068713          	mv	a4,a3
  return _vsnprintf(_out_buffer, buffer, count, format, va);
    1bf8:	00060693          	mv	a3,a2
    1bfc:	00058613          	mv	a2,a1
    1c00:	00050593          	mv	a1,a0
    1c04:	01000513          	li	a0,16
    1c08:	d08ff0ef          	jal	ra,1110 <_vsnprintf>
}
    1c0c:	00c12083          	lw	ra,12(sp)
    1c10:	01010113          	addi	sp,sp,16
    1c14:	00008067          	ret

00001c18 <fctprintf>:


int fctprintf(void (*out)(char character, void* arg), void* arg, const char* format, ...)
{
    1c18:	fc010113          	addi	sp,sp,-64
    1c1c:	00112e23          	sw	ra,28(sp)
    1c20:	02d12623          	sw	a3,44(sp)
    1c24:	02e12823          	sw	a4,48(sp)
    1c28:	02f12a23          	sw	a5,52(sp)
    1c2c:	03012c23          	sw	a6,56(sp)
    1c30:	03112e23          	sw	a7,60(sp)
  va_list va;
  va_start(va, format);
    1c34:	02c10713          	addi	a4,sp,44
    1c38:	00e12623          	sw	a4,12(sp)
  const out_fct_wrap_type out_fct_wrap = { out, arg };
    1c3c:	00a12223          	sw	a0,4(sp)
    1c40:	00b12423          	sw	a1,8(sp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
    1c44:	00060693          	mv	a3,a2
    1c48:	fff00613          	li	a2,-1
    1c4c:	00410593          	addi	a1,sp,4
    1c50:	02400513          	li	a0,36
    1c54:	cbcff0ef          	jal	ra,1110 <_vsnprintf>
  va_end(va);
  return ret;
}
    1c58:	01c12083          	lw	ra,28(sp)
    1c5c:	04010113          	addi	sp,sp,64
    1c60:	00008067          	ret

00001c64 <uart_send_char>:


#include <math.h>
void uart_send_char(uint8_t num){
    //asm("nop");
    UART0->DATA = num;
    1c64:	03000793          	li	a5,48
    1c68:	00a7a223          	sw	a0,4(a5)
    UART0->CTRL |= 1;
    1c6c:	0007a703          	lw	a4,0(a5)
    1c70:	00176713          	ori	a4,a4,1
    1c74:	00e7a023          	sw	a4,0(a5)
    while(UART0->CTRL & 2);
    1c78:	03002783          	lw	a5,48(zero) # 30 <_out_fct+0xc>
    1c7c:	0027f793          	andi	a5,a5,2
    1c80:	fe079ce3          	bnez	a5,1c78 <uart_send_char+0x14>
}
    1c84:	00008067          	ret

00001c88 <uart_send_string>:

void uart_send_string(uint8_t * str, uint32_t len){
    //asm("nop");
    //LEDS = (uint32_t) str;
    for(uint32_t i = 0; i < len; i++){
    1c88:	04058063          	beqz	a1,1cc8 <uart_send_string+0x40>
void uart_send_string(uint8_t * str, uint32_t len){
    1c8c:	ff010113          	addi	sp,sp,-16
    1c90:	00112623          	sw	ra,12(sp)
    1c94:	00812423          	sw	s0,8(sp)
    1c98:	00912223          	sw	s1,4(sp)
    1c9c:	00050413          	mv	s0,a0
    1ca0:	00b504b3          	add	s1,a0,a1
        uart_send_char(str[i]);
    1ca4:	00044503          	lbu	a0,0(s0)
    1ca8:	fbdff0ef          	jal	ra,1c64 <uart_send_char>
    for(uint32_t i = 0; i < len; i++){
    1cac:	00140413          	addi	s0,s0,1
    1cb0:	fe941ae3          	bne	s0,s1,1ca4 <uart_send_string+0x1c>
        //LEDS = (uint32_t) str;
    }
}
    1cb4:	00c12083          	lw	ra,12(sp)
    1cb8:	00812403          	lw	s0,8(sp)
    1cbc:	00412483          	lw	s1,4(sp)
    1cc0:	01010113          	addi	sp,sp,16
    1cc4:	00008067          	ret
    1cc8:	00008067          	ret

00001ccc <uart_send_stringn>:

void uart_send_stringn(uint8_t * str){
    1ccc:	ff010113          	addi	sp,sp,-16
    1cd0:	00112623          	sw	ra,12(sp)
    1cd4:	00812423          	sw	s0,8(sp)
    1cd8:	00050413          	mv	s0,a0

    while(*str){
    1cdc:	00054503          	lbu	a0,0(a0)
    1ce0:	00050a63          	beqz	a0,1cf4 <uart_send_stringn+0x28>
        uart_send_char(*str++);
    1ce4:	00140413          	addi	s0,s0,1
    1ce8:	f7dff0ef          	jal	ra,1c64 <uart_send_char>
    while(*str){
    1cec:	00044503          	lbu	a0,0(s0)
    1cf0:	fe051ae3          	bnez	a0,1ce4 <uart_send_stringn+0x18>
    }
}
    1cf4:	00c12083          	lw	ra,12(sp)
    1cf8:	00812403          	lw	s0,8(sp)
    1cfc:	01010113          	addi	sp,sp,16
    1d00:	00008067          	ret

00001d04 <uart_send_uint32>:

void uart_send_uint32(uint32_t num){
    1d04:	fe010113          	addi	sp,sp,-32
    1d08:	00112e23          	sw	ra,28(sp)
    uint8_t buf[11];

    uint32_t len = 0;
    uint32_t temp = num;
    1d0c:	00050713          	mv	a4,a0
    uint32_t len = 0;
    1d10:	00000793          	li	a5,0
    do{
        len++;
        temp /= 10;
    1d14:	00a00593          	li	a1,10
    }while(temp);
    1d18:	00900613          	li	a2,9
        len++;
    1d1c:	00178793          	addi	a5,a5,1
        temp /= 10;
    1d20:	00070693          	mv	a3,a4
    1d24:	02b75733          	divu	a4,a4,a1
    }while(temp);
    1d28:	fed66ae3          	bltu	a2,a3,1d1c <uart_send_uint32+0x18>
    
    buf[len] = 0;
    1d2c:	01078713          	addi	a4,a5,16
    1d30:	00270733          	add	a4,a4,sp
    1d34:	fe070a23          	sb	zero,-12(a4)
    1d38:	00410613          	addi	a2,sp,4
    1d3c:	00f607b3          	add	a5,a2,a5
    do{
        len--;
        buf[len] = (num % 10) + 0x30;
    1d40:	00a00693          	li	a3,10
    1d44:	02d57733          	remu	a4,a0,a3
    1d48:	03070713          	addi	a4,a4,48
    1d4c:	fee78fa3          	sb	a4,-1(a5)
        num /= 10;
    1d50:	02d55533          	divu	a0,a0,a3
    }while(len);
    1d54:	fff78793          	addi	a5,a5,-1
    1d58:	fec796e3          	bne	a5,a2,1d44 <uart_send_uint32+0x40>
    
    uart_send_stringn(buf);
    1d5c:	00410513          	addi	a0,sp,4
    1d60:	f6dff0ef          	jal	ra,1ccc <uart_send_stringn>
    1d64:	01c12083          	lw	ra,28(sp)
    1d68:	02010113          	addi	sp,sp,32
    1d6c:	00008067          	ret

00001d70 <main>:
#include "../inc/riscv.h"
#include "../inc/uart.h"
#include "../inc/printf.h"
//uint8_t buff[32];

void main(void){
    1d70:	fc010113          	addi	sp,sp,-64
    1d74:	02112e23          	sw	ra,60(sp)
    1d78:	02812c23          	sw	s0,56(sp)
    1d7c:	02912a23          	sw	s1,52(sp)
    1d80:	03212823          	sw	s2,48(sp)
    1d84:	03312623          	sw	s3,44(sp)
    1d88:	03412423          	sw	s4,40(sp)
    1d8c:	03512223          	sw	s5,36(sp)
    1d90:	03612023          	sw	s6,32(sp)
    1d94:	01712e23          	sw	s7,28(sp)
    1d98:	01812c23          	sw	s8,24(sp)
    1d9c:	01912a23          	sw	s9,20(sp)
    1da0:	01a12823          	sw	s10,16(sp)
    1da4:	01b12623          	sw	s11,12(sp)

    uint64_t c = sizeof(uint64_t);
    1da8:	00800493          	li	s1,8
    1dac:	00000d13          	li	s10,0
    while(1){
        LEDS = c++;
        printf_("%llu %llu %llu\n\r", c, (IPC*10000)/TICK, (BPCC*10000)/(BPC+1));
    1db0:	00002437          	lui	s0,0x2
    1db4:	71040413          	addi	s0,s0,1808 # 2710 <__adddf3+0x9c>
    1db8:	00020db7          	lui	s11,0x20
        LEDS = c++;
    1dbc:	00148913          	addi	s2,s1,1
    1dc0:	009934b3          	sltu	s1,s2,s1
    1dc4:	01a48cb3          	add	s9,s1,s10
    1dc8:	00090493          	mv	s1,s2
    1dcc:	000c8d13          	mv	s10,s9
    1dd0:	fff90793          	addi	a5,s2,-1
    1dd4:	00f02223          	sw	a5,4(zero) # 4 <_start+0x4>
        printf_("%llu %llu %llu\n\r", c, (IPC*10000)/TICK, (BPCC*10000)/(BPC+1));
    1dd8:	02002a03          	lw	s4,32(zero) # 20 <_out_null>
    1ddc:	02402a83          	lw	s5,36(zero) # 24 <_out_fct>
    1de0:	02802b03          	lw	s6,40(zero) # 28 <_out_fct+0x4>
    1de4:	02c02b83          	lw	s7,44(zero) # 2c <_out_fct+0x8>
    1de8:	01002303          	lw	t1,16(zero) # 10 <_out_buffer>
    1dec:	01402383          	lw	t2,20(zero) # 14 <_out_buffer+0x4>
    1df0:	01802703          	lw	a4,24(zero) # 18 <_out_buffer+0x8>
    1df4:	01c02783          	lw	a5,28(zero) # 1c <_out_buffer+0xc>
    1df8:	02838833          	mul	a6,t2,s0
    1dfc:	028335b3          	mulhu	a1,t1,s0
    1e00:	00170613          	addi	a2,a4,1
    1e04:	00e636b3          	sltu	a3,a2,a4
    1e08:	00f686b3          	add	a3,a3,a5
    1e0c:	02640533          	mul	a0,s0,t1
    1e10:	00b805b3          	add	a1,a6,a1
    1e14:	04c000ef          	jal	ra,1e60 <__udivdi3>
    1e18:	00050c13          	mv	s8,a0
    1e1c:	00058993          	mv	s3,a1
    1e20:	028a85b3          	mul	a1,s5,s0
    1e24:	028a37b3          	mulhu	a5,s4,s0
    1e28:	000b0613          	mv	a2,s6
    1e2c:	000b8693          	mv	a3,s7
    1e30:	03440533          	mul	a0,s0,s4
    1e34:	00f585b3          	add	a1,a1,a5
    1e38:	028000ef          	jal	ra,1e60 <__udivdi3>
    1e3c:	00050713          	mv	a4,a0
    1e40:	00058793          	mv	a5,a1
    1e44:	000c0813          	mv	a6,s8
    1e48:	00098893          	mv	a7,s3
    1e4c:	00090613          	mv	a2,s2
    1e50:	000c8693          	mv	a3,s9
    1e54:	208d8513          	addi	a0,s11,520 # 20208 <pow10.0+0x50>
    1e58:	c89ff0ef          	jal	ra,1ae0 <printf_>
    while(1){
    1e5c:	f61ff06f          	j	1dbc <main+0x4c>

00001e60 <__udivdi3>:
    1e60:	00050313          	mv	t1,a0
    1e64:	00058893          	mv	a7,a1
    1e68:	00060713          	mv	a4,a2
    1e6c:	00050813          	mv	a6,a0
    1e70:	00058793          	mv	a5,a1
    1e74:	28069263          	bnez	a3,20f8 <__udivdi3+0x298>
    1e78:	000205b7          	lui	a1,0x20
    1e7c:	25858593          	addi	a1,a1,600 # 20258 <__clz_tab>
    1e80:	0ec8f663          	bgeu	a7,a2,1f6c <__udivdi3+0x10c>
    1e84:	000106b7          	lui	a3,0x10
    1e88:	0cd67863          	bgeu	a2,a3,1f58 <__udivdi3+0xf8>
    1e8c:	10063693          	sltiu	a3,a2,256
    1e90:	0016c693          	xori	a3,a3,1
    1e94:	00369693          	slli	a3,a3,0x3
    1e98:	00d65533          	srl	a0,a2,a3
    1e9c:	00a585b3          	add	a1,a1,a0
    1ea0:	0005c583          	lbu	a1,0(a1)
    1ea4:	02000513          	li	a0,32
    1ea8:	00d586b3          	add	a3,a1,a3
    1eac:	40d505b3          	sub	a1,a0,a3
    1eb0:	00d50c63          	beq	a0,a3,1ec8 <__udivdi3+0x68>
    1eb4:	00b897b3          	sll	a5,a7,a1
    1eb8:	00d356b3          	srl	a3,t1,a3
    1ebc:	00b61733          	sll	a4,a2,a1
    1ec0:	00f6e7b3          	or	a5,a3,a5
    1ec4:	00b31833          	sll	a6,t1,a1
    1ec8:	01075593          	srli	a1,a4,0x10
    1ecc:	02b7d333          	divu	t1,a5,a1
    1ed0:	01071613          	slli	a2,a4,0x10
    1ed4:	01065613          	srli	a2,a2,0x10
    1ed8:	02b7f7b3          	remu	a5,a5,a1
    1edc:	00030513          	mv	a0,t1
    1ee0:	026608b3          	mul	a7,a2,t1
    1ee4:	01079693          	slli	a3,a5,0x10
    1ee8:	01085793          	srli	a5,a6,0x10
    1eec:	00d7e7b3          	or	a5,a5,a3
    1ef0:	0117fe63          	bgeu	a5,a7,1f0c <__udivdi3+0xac>
    1ef4:	00e787b3          	add	a5,a5,a4
    1ef8:	fff30513          	addi	a0,t1,-1
    1efc:	00e7e863          	bltu	a5,a4,1f0c <__udivdi3+0xac>
    1f00:	0117f663          	bgeu	a5,a7,1f0c <__udivdi3+0xac>
    1f04:	ffe30513          	addi	a0,t1,-2
    1f08:	00e787b3          	add	a5,a5,a4
    1f0c:	411787b3          	sub	a5,a5,a7
    1f10:	02b7d8b3          	divu	a7,a5,a1
    1f14:	01081813          	slli	a6,a6,0x10
    1f18:	01085813          	srli	a6,a6,0x10
    1f1c:	02b7f7b3          	remu	a5,a5,a1
    1f20:	031606b3          	mul	a3,a2,a7
    1f24:	01079793          	slli	a5,a5,0x10
    1f28:	00f86833          	or	a6,a6,a5
    1f2c:	00088793          	mv	a5,a7
    1f30:	00d87c63          	bgeu	a6,a3,1f48 <__udivdi3+0xe8>
    1f34:	01070833          	add	a6,a4,a6
    1f38:	fff88793          	addi	a5,a7,-1
    1f3c:	00e86663          	bltu	a6,a4,1f48 <__udivdi3+0xe8>
    1f40:	00d87463          	bgeu	a6,a3,1f48 <__udivdi3+0xe8>
    1f44:	ffe88793          	addi	a5,a7,-2
    1f48:	01051513          	slli	a0,a0,0x10
    1f4c:	00f56533          	or	a0,a0,a5
    1f50:	00000593          	li	a1,0
    1f54:	00008067          	ret
    1f58:	01000537          	lui	a0,0x1000
    1f5c:	01000693          	li	a3,16
    1f60:	f2a66ce3          	bltu	a2,a0,1e98 <__udivdi3+0x38>
    1f64:	01800693          	li	a3,24
    1f68:	f31ff06f          	j	1e98 <__udivdi3+0x38>
    1f6c:	00061463          	bnez	a2,1f74 <__udivdi3+0x114>
    1f70:	00100073          	ebreak
    1f74:	000107b7          	lui	a5,0x10
    1f78:	0cf67063          	bgeu	a2,a5,2038 <__udivdi3+0x1d8>
    1f7c:	10063693          	sltiu	a3,a2,256
    1f80:	0016c693          	xori	a3,a3,1
    1f84:	00369693          	slli	a3,a3,0x3
    1f88:	00d657b3          	srl	a5,a2,a3
    1f8c:	00f585b3          	add	a1,a1,a5
    1f90:	0005c783          	lbu	a5,0(a1)
    1f94:	00d787b3          	add	a5,a5,a3
    1f98:	02000693          	li	a3,32
    1f9c:	40f685b3          	sub	a1,a3,a5
    1fa0:	0af69663          	bne	a3,a5,204c <__udivdi3+0x1ec>
    1fa4:	40c887b3          	sub	a5,a7,a2
    1fa8:	00100593          	li	a1,1
    1fac:	01075893          	srli	a7,a4,0x10
    1fb0:	0317de33          	divu	t3,a5,a7
    1fb4:	01071613          	slli	a2,a4,0x10
    1fb8:	01065613          	srli	a2,a2,0x10
    1fbc:	01085693          	srli	a3,a6,0x10
    1fc0:	0317f7b3          	remu	a5,a5,a7
    1fc4:	000e0513          	mv	a0,t3
    1fc8:	03c60333          	mul	t1,a2,t3
    1fcc:	01079793          	slli	a5,a5,0x10
    1fd0:	00f6e7b3          	or	a5,a3,a5
    1fd4:	0067fe63          	bgeu	a5,t1,1ff0 <__udivdi3+0x190>
    1fd8:	00e787b3          	add	a5,a5,a4
    1fdc:	fffe0513          	addi	a0,t3,-1
    1fe0:	00e7e863          	bltu	a5,a4,1ff0 <__udivdi3+0x190>
    1fe4:	0067f663          	bgeu	a5,t1,1ff0 <__udivdi3+0x190>
    1fe8:	ffee0513          	addi	a0,t3,-2
    1fec:	00e787b3          	add	a5,a5,a4
    1ff0:	406787b3          	sub	a5,a5,t1
    1ff4:	0317d333          	divu	t1,a5,a7
    1ff8:	01081813          	slli	a6,a6,0x10
    1ffc:	01085813          	srli	a6,a6,0x10
    2000:	0317f7b3          	remu	a5,a5,a7
    2004:	026606b3          	mul	a3,a2,t1
    2008:	01079793          	slli	a5,a5,0x10
    200c:	00f86833          	or	a6,a6,a5
    2010:	00030793          	mv	a5,t1
    2014:	00d87c63          	bgeu	a6,a3,202c <__udivdi3+0x1cc>
    2018:	01070833          	add	a6,a4,a6
    201c:	fff30793          	addi	a5,t1,-1
    2020:	00e86663          	bltu	a6,a4,202c <__udivdi3+0x1cc>
    2024:	00d87463          	bgeu	a6,a3,202c <__udivdi3+0x1cc>
    2028:	ffe30793          	addi	a5,t1,-2
    202c:	01051513          	slli	a0,a0,0x10
    2030:	00f56533          	or	a0,a0,a5
    2034:	00008067          	ret
    2038:	010007b7          	lui	a5,0x1000
    203c:	01000693          	li	a3,16
    2040:	f4f664e3          	bltu	a2,a5,1f88 <__udivdi3+0x128>
    2044:	01800693          	li	a3,24
    2048:	f41ff06f          	j	1f88 <__udivdi3+0x128>
    204c:	00b61733          	sll	a4,a2,a1
    2050:	00f8d6b3          	srl	a3,a7,a5
    2054:	01075513          	srli	a0,a4,0x10
    2058:	00f357b3          	srl	a5,t1,a5
    205c:	00b31833          	sll	a6,t1,a1
    2060:	02a6d333          	divu	t1,a3,a0
    2064:	01071613          	slli	a2,a4,0x10
    2068:	00b898b3          	sll	a7,a7,a1
    206c:	01065613          	srli	a2,a2,0x10
    2070:	0117e7b3          	or	a5,a5,a7
    2074:	02a6f6b3          	remu	a3,a3,a0
    2078:	026608b3          	mul	a7,a2,t1
    207c:	01069593          	slli	a1,a3,0x10
    2080:	0107d693          	srli	a3,a5,0x10
    2084:	00b6e6b3          	or	a3,a3,a1
    2088:	00030593          	mv	a1,t1
    208c:	0116fe63          	bgeu	a3,a7,20a8 <__udivdi3+0x248>
    2090:	00e686b3          	add	a3,a3,a4
    2094:	fff30593          	addi	a1,t1,-1
    2098:	00e6e863          	bltu	a3,a4,20a8 <__udivdi3+0x248>
    209c:	0116f663          	bgeu	a3,a7,20a8 <__udivdi3+0x248>
    20a0:	ffe30593          	addi	a1,t1,-2
    20a4:	00e686b3          	add	a3,a3,a4
    20a8:	411686b3          	sub	a3,a3,a7
    20ac:	02a6d8b3          	divu	a7,a3,a0
    20b0:	01079793          	slli	a5,a5,0x10
    20b4:	0107d793          	srli	a5,a5,0x10
    20b8:	02a6f6b3          	remu	a3,a3,a0
    20bc:	03160633          	mul	a2,a2,a7
    20c0:	01069693          	slli	a3,a3,0x10
    20c4:	00d7e7b3          	or	a5,a5,a3
    20c8:	00088693          	mv	a3,a7
    20cc:	00c7fe63          	bgeu	a5,a2,20e8 <__udivdi3+0x288>
    20d0:	00e787b3          	add	a5,a5,a4
    20d4:	fff88693          	addi	a3,a7,-1
    20d8:	00e7e863          	bltu	a5,a4,20e8 <__udivdi3+0x288>
    20dc:	00c7f663          	bgeu	a5,a2,20e8 <__udivdi3+0x288>
    20e0:	ffe88693          	addi	a3,a7,-2
    20e4:	00e787b3          	add	a5,a5,a4
    20e8:	01059593          	slli	a1,a1,0x10
    20ec:	40c787b3          	sub	a5,a5,a2
    20f0:	00d5e5b3          	or	a1,a1,a3
    20f4:	eb9ff06f          	j	1fac <__udivdi3+0x14c>
    20f8:	18d5e663          	bltu	a1,a3,2284 <__udivdi3+0x424>
    20fc:	000107b7          	lui	a5,0x10
    2100:	04f6f463          	bgeu	a3,a5,2148 <__udivdi3+0x2e8>
    2104:	1006b713          	sltiu	a4,a3,256
    2108:	00174713          	xori	a4,a4,1
    210c:	00371713          	slli	a4,a4,0x3
    2110:	000207b7          	lui	a5,0x20
    2114:	00e6d5b3          	srl	a1,a3,a4
    2118:	25878793          	addi	a5,a5,600 # 20258 <__clz_tab>
    211c:	00b787b3          	add	a5,a5,a1
    2120:	0007c783          	lbu	a5,0(a5)
    2124:	00e787b3          	add	a5,a5,a4
    2128:	02000713          	li	a4,32
    212c:	40f705b3          	sub	a1,a4,a5
    2130:	02f71663          	bne	a4,a5,215c <__udivdi3+0x2fc>
    2134:	00100513          	li	a0,1
    2138:	e116eee3          	bltu	a3,a7,1f54 <__udivdi3+0xf4>
    213c:	00c33533          	sltu	a0,t1,a2
    2140:	00154513          	xori	a0,a0,1
    2144:	00008067          	ret
    2148:	010007b7          	lui	a5,0x1000
    214c:	01000713          	li	a4,16
    2150:	fcf6e0e3          	bltu	a3,a5,2110 <__udivdi3+0x2b0>
    2154:	01800713          	li	a4,24
    2158:	fb9ff06f          	j	2110 <__udivdi3+0x2b0>
    215c:	00f65733          	srl	a4,a2,a5
    2160:	00b696b3          	sll	a3,a3,a1
    2164:	00d766b3          	or	a3,a4,a3
    2168:	00f8d733          	srl	a4,a7,a5
    216c:	00b898b3          	sll	a7,a7,a1
    2170:	00f357b3          	srl	a5,t1,a5
    2174:	0117e7b3          	or	a5,a5,a7
    2178:	0106d893          	srli	a7,a3,0x10
    217c:	03175eb3          	divu	t4,a4,a7
    2180:	01069813          	slli	a6,a3,0x10
    2184:	01085813          	srli	a6,a6,0x10
    2188:	00b61633          	sll	a2,a2,a1
    218c:	03177733          	remu	a4,a4,a7
    2190:	03d80e33          	mul	t3,a6,t4
    2194:	01071513          	slli	a0,a4,0x10
    2198:	0107d713          	srli	a4,a5,0x10
    219c:	00a76733          	or	a4,a4,a0
    21a0:	000e8513          	mv	a0,t4
    21a4:	01c77e63          	bgeu	a4,t3,21c0 <__udivdi3+0x360>
    21a8:	00d70733          	add	a4,a4,a3
    21ac:	fffe8513          	addi	a0,t4,-1
    21b0:	00d76863          	bltu	a4,a3,21c0 <__udivdi3+0x360>
    21b4:	01c77663          	bgeu	a4,t3,21c0 <__udivdi3+0x360>
    21b8:	ffee8513          	addi	a0,t4,-2
    21bc:	00d70733          	add	a4,a4,a3
    21c0:	41c70733          	sub	a4,a4,t3
    21c4:	03175e33          	divu	t3,a4,a7
    21c8:	01079793          	slli	a5,a5,0x10
    21cc:	0107d793          	srli	a5,a5,0x10
    21d0:	03177733          	remu	a4,a4,a7
    21d4:	03c80833          	mul	a6,a6,t3
    21d8:	01071713          	slli	a4,a4,0x10
    21dc:	00e7e7b3          	or	a5,a5,a4
    21e0:	000e0713          	mv	a4,t3
    21e4:	0107fe63          	bgeu	a5,a6,2200 <__udivdi3+0x3a0>
    21e8:	00d787b3          	add	a5,a5,a3
    21ec:	fffe0713          	addi	a4,t3,-1
    21f0:	00d7e863          	bltu	a5,a3,2200 <__udivdi3+0x3a0>
    21f4:	0107f663          	bgeu	a5,a6,2200 <__udivdi3+0x3a0>
    21f8:	ffee0713          	addi	a4,t3,-2
    21fc:	00d787b3          	add	a5,a5,a3
    2200:	01051513          	slli	a0,a0,0x10
    2204:	00010e37          	lui	t3,0x10
    2208:	00e56533          	or	a0,a0,a4
    220c:	fffe0693          	addi	a3,t3,-1 # ffff <__clzsi2+0xb85f>
    2210:	00d57733          	and	a4,a0,a3
    2214:	410787b3          	sub	a5,a5,a6
    2218:	00d676b3          	and	a3,a2,a3
    221c:	01055813          	srli	a6,a0,0x10
    2220:	01065613          	srli	a2,a2,0x10
    2224:	02d708b3          	mul	a7,a4,a3
    2228:	02d806b3          	mul	a3,a6,a3
    222c:	02c70733          	mul	a4,a4,a2
    2230:	02c80833          	mul	a6,a6,a2
    2234:	00d70633          	add	a2,a4,a3
    2238:	0108d713          	srli	a4,a7,0x10
    223c:	00c70733          	add	a4,a4,a2
    2240:	00d77463          	bgeu	a4,a3,2248 <__udivdi3+0x3e8>
    2244:	01c80833          	add	a6,a6,t3
    2248:	01075693          	srli	a3,a4,0x10
    224c:	010686b3          	add	a3,a3,a6
    2250:	02d7e663          	bltu	a5,a3,227c <__udivdi3+0x41c>
    2254:	ced79ee3          	bne	a5,a3,1f50 <__udivdi3+0xf0>
    2258:	000107b7          	lui	a5,0x10
    225c:	fff78793          	addi	a5,a5,-1 # ffff <__clzsi2+0xb85f>
    2260:	00f77733          	and	a4,a4,a5
    2264:	01071713          	slli	a4,a4,0x10
    2268:	00f8f8b3          	and	a7,a7,a5
    226c:	00b31333          	sll	t1,t1,a1
    2270:	01170733          	add	a4,a4,a7
    2274:	00000593          	li	a1,0
    2278:	cce37ee3          	bgeu	t1,a4,1f54 <__udivdi3+0xf4>
    227c:	fff50513          	addi	a0,a0,-1 # ffffff <__bss_start+0xfcffff>
    2280:	cd1ff06f          	j	1f50 <__udivdi3+0xf0>
    2284:	00000593          	li	a1,0
    2288:	00000513          	li	a0,0
    228c:	00008067          	ret

00002290 <__umoddi3>:
    2290:	00060813          	mv	a6,a2
    2294:	00050793          	mv	a5,a0
    2298:	00058713          	mv	a4,a1
    229c:	20069663          	bnez	a3,24a8 <__umoddi3+0x218>
    22a0:	000208b7          	lui	a7,0x20
    22a4:	25888893          	addi	a7,a7,600 # 20258 <__clz_tab>
    22a8:	0cc5fc63          	bgeu	a1,a2,2380 <__umoddi3+0xf0>
    22ac:	000106b7          	lui	a3,0x10
    22b0:	0ad67e63          	bgeu	a2,a3,236c <__umoddi3+0xdc>
    22b4:	10063693          	sltiu	a3,a2,256
    22b8:	0016c693          	xori	a3,a3,1
    22bc:	00369693          	slli	a3,a3,0x3
    22c0:	00d65333          	srl	t1,a2,a3
    22c4:	006888b3          	add	a7,a7,t1
    22c8:	0008c883          	lbu	a7,0(a7)
    22cc:	02000313          	li	t1,32
    22d0:	00d886b3          	add	a3,a7,a3
    22d4:	40d308b3          	sub	a7,t1,a3
    22d8:	00d30c63          	beq	t1,a3,22f0 <__umoddi3+0x60>
    22dc:	01159733          	sll	a4,a1,a7
    22e0:	00d556b3          	srl	a3,a0,a3
    22e4:	01161833          	sll	a6,a2,a7
    22e8:	00e6e733          	or	a4,a3,a4
    22ec:	011517b3          	sll	a5,a0,a7
    22f0:	01085613          	srli	a2,a6,0x10
    22f4:	02c756b3          	divu	a3,a4,a2
    22f8:	01081513          	slli	a0,a6,0x10
    22fc:	01055513          	srli	a0,a0,0x10
    2300:	02c77733          	remu	a4,a4,a2
    2304:	02a686b3          	mul	a3,a3,a0
    2308:	01071593          	slli	a1,a4,0x10
    230c:	0107d713          	srli	a4,a5,0x10
    2310:	00b76733          	or	a4,a4,a1
    2314:	00d77a63          	bgeu	a4,a3,2328 <__umoddi3+0x98>
    2318:	01070733          	add	a4,a4,a6
    231c:	01076663          	bltu	a4,a6,2328 <__umoddi3+0x98>
    2320:	00d77463          	bgeu	a4,a3,2328 <__umoddi3+0x98>
    2324:	01070733          	add	a4,a4,a6
    2328:	40d70733          	sub	a4,a4,a3
    232c:	02c756b3          	divu	a3,a4,a2
    2330:	02c77733          	remu	a4,a4,a2
    2334:	02a686b3          	mul	a3,a3,a0
    2338:	01079793          	slli	a5,a5,0x10
    233c:	01071713          	slli	a4,a4,0x10
    2340:	0107d793          	srli	a5,a5,0x10
    2344:	00e7e7b3          	or	a5,a5,a4
    2348:	00d7fa63          	bgeu	a5,a3,235c <__umoddi3+0xcc>
    234c:	010787b3          	add	a5,a5,a6
    2350:	0107e663          	bltu	a5,a6,235c <__umoddi3+0xcc>
    2354:	00d7f463          	bgeu	a5,a3,235c <__umoddi3+0xcc>
    2358:	010787b3          	add	a5,a5,a6
    235c:	40d787b3          	sub	a5,a5,a3
    2360:	0117d533          	srl	a0,a5,a7
    2364:	00000593          	li	a1,0
    2368:	00008067          	ret
    236c:	01000337          	lui	t1,0x1000
    2370:	01000693          	li	a3,16
    2374:	f46666e3          	bltu	a2,t1,22c0 <__umoddi3+0x30>
    2378:	01800693          	li	a3,24
    237c:	f45ff06f          	j	22c0 <__umoddi3+0x30>
    2380:	00061463          	bnez	a2,2388 <__umoddi3+0xf8>
    2384:	00100073          	ebreak
    2388:	00010737          	lui	a4,0x10
    238c:	06e67e63          	bgeu	a2,a4,2408 <__umoddi3+0x178>
    2390:	10063693          	sltiu	a3,a2,256
    2394:	0016c693          	xori	a3,a3,1
    2398:	00369693          	slli	a3,a3,0x3
    239c:	00d65733          	srl	a4,a2,a3
    23a0:	00e888b3          	add	a7,a7,a4
    23a4:	0008c703          	lbu	a4,0(a7)
    23a8:	00d70733          	add	a4,a4,a3
    23ac:	02000693          	li	a3,32
    23b0:	40e688b3          	sub	a7,a3,a4
    23b4:	06e69463          	bne	a3,a4,241c <__umoddi3+0x18c>
    23b8:	40c58733          	sub	a4,a1,a2
    23bc:	01085593          	srli	a1,a6,0x10
    23c0:	02b75633          	divu	a2,a4,a1
    23c4:	01081513          	slli	a0,a6,0x10
    23c8:	01055513          	srli	a0,a0,0x10
    23cc:	0107d693          	srli	a3,a5,0x10
    23d0:	02b77733          	remu	a4,a4,a1
    23d4:	02a60633          	mul	a2,a2,a0
    23d8:	01071713          	slli	a4,a4,0x10
    23dc:	00e6e733          	or	a4,a3,a4
    23e0:	00c77a63          	bgeu	a4,a2,23f4 <__umoddi3+0x164>
    23e4:	01070733          	add	a4,a4,a6
    23e8:	01076663          	bltu	a4,a6,23f4 <__umoddi3+0x164>
    23ec:	00c77463          	bgeu	a4,a2,23f4 <__umoddi3+0x164>
    23f0:	01070733          	add	a4,a4,a6
    23f4:	40c70733          	sub	a4,a4,a2
    23f8:	02b756b3          	divu	a3,a4,a1
    23fc:	02b77733          	remu	a4,a4,a1
    2400:	02a686b3          	mul	a3,a3,a0
    2404:	f35ff06f          	j	2338 <__umoddi3+0xa8>
    2408:	01000737          	lui	a4,0x1000
    240c:	01000693          	li	a3,16
    2410:	f8e666e3          	bltu	a2,a4,239c <__umoddi3+0x10c>
    2414:	01800693          	li	a3,24
    2418:	f85ff06f          	j	239c <__umoddi3+0x10c>
    241c:	01161833          	sll	a6,a2,a7
    2420:	00e5d6b3          	srl	a3,a1,a4
    2424:	011517b3          	sll	a5,a0,a7
    2428:	011595b3          	sll	a1,a1,a7
    242c:	00e55733          	srl	a4,a0,a4
    2430:	01085513          	srli	a0,a6,0x10
    2434:	00b76733          	or	a4,a4,a1
    2438:	02a6d5b3          	divu	a1,a3,a0
    243c:	01081313          	slli	t1,a6,0x10
    2440:	01035313          	srli	t1,t1,0x10
    2444:	02a6f6b3          	remu	a3,a3,a0
    2448:	026585b3          	mul	a1,a1,t1
    244c:	01069613          	slli	a2,a3,0x10
    2450:	01075693          	srli	a3,a4,0x10
    2454:	00c6e6b3          	or	a3,a3,a2
    2458:	00b6fa63          	bgeu	a3,a1,246c <__umoddi3+0x1dc>
    245c:	010686b3          	add	a3,a3,a6
    2460:	0106e663          	bltu	a3,a6,246c <__umoddi3+0x1dc>
    2464:	00b6f463          	bgeu	a3,a1,246c <__umoddi3+0x1dc>
    2468:	010686b3          	add	a3,a3,a6
    246c:	40b686b3          	sub	a3,a3,a1
    2470:	02a6d633          	divu	a2,a3,a0
    2474:	01071713          	slli	a4,a4,0x10
    2478:	01075713          	srli	a4,a4,0x10
    247c:	02a6f6b3          	remu	a3,a3,a0
    2480:	02660633          	mul	a2,a2,t1
    2484:	01069693          	slli	a3,a3,0x10
    2488:	00d76733          	or	a4,a4,a3
    248c:	00c77a63          	bgeu	a4,a2,24a0 <__umoddi3+0x210>
    2490:	01070733          	add	a4,a4,a6
    2494:	01076663          	bltu	a4,a6,24a0 <__umoddi3+0x210>
    2498:	00c77463          	bgeu	a4,a2,24a0 <__umoddi3+0x210>
    249c:	01070733          	add	a4,a4,a6
    24a0:	40c70733          	sub	a4,a4,a2
    24a4:	f19ff06f          	j	23bc <__umoddi3+0x12c>
    24a8:	1cd5e463          	bltu	a1,a3,2670 <__umoddi3+0x3e0>
    24ac:	00010837          	lui	a6,0x10
    24b0:	0506fe63          	bgeu	a3,a6,250c <__umoddi3+0x27c>
    24b4:	1006b813          	sltiu	a6,a3,256
    24b8:	00184813          	xori	a6,a6,1
    24bc:	00381813          	slli	a6,a6,0x3
    24c0:	000208b7          	lui	a7,0x20
    24c4:	0106d333          	srl	t1,a3,a6
    24c8:	25888893          	addi	a7,a7,600 # 20258 <__clz_tab>
    24cc:	006888b3          	add	a7,a7,t1
    24d0:	0008c883          	lbu	a7,0(a7)
    24d4:	02000313          	li	t1,32
    24d8:	010888b3          	add	a7,a7,a6
    24dc:	41130833          	sub	a6,t1,a7
    24e0:	05131063          	bne	t1,a7,2520 <__umoddi3+0x290>
    24e4:	00b6e463          	bltu	a3,a1,24ec <__umoddi3+0x25c>
    24e8:	00c56c63          	bltu	a0,a2,2500 <__umoddi3+0x270>
    24ec:	40c50633          	sub	a2,a0,a2
    24f0:	40d586b3          	sub	a3,a1,a3
    24f4:	00c53733          	sltu	a4,a0,a2
    24f8:	40e68733          	sub	a4,a3,a4
    24fc:	00060793          	mv	a5,a2
    2500:	00078513          	mv	a0,a5
    2504:	00070593          	mv	a1,a4
    2508:	00008067          	ret
    250c:	010008b7          	lui	a7,0x1000
    2510:	01000813          	li	a6,16
    2514:	fb16e6e3          	bltu	a3,a7,24c0 <__umoddi3+0x230>
    2518:	01800813          	li	a6,24
    251c:	fa5ff06f          	j	24c0 <__umoddi3+0x230>
    2520:	010696b3          	sll	a3,a3,a6
    2524:	01165333          	srl	t1,a2,a7
    2528:	00d36333          	or	t1,t1,a3
    252c:	01035e13          	srli	t3,t1,0x10
    2530:	0115d6b3          	srl	a3,a1,a7
    2534:	03c6df33          	divu	t5,a3,t3
    2538:	01031713          	slli	a4,t1,0x10
    253c:	01075713          	srli	a4,a4,0x10
    2540:	010597b3          	sll	a5,a1,a6
    2544:	011555b3          	srl	a1,a0,a7
    2548:	00f5e5b3          	or	a1,a1,a5
    254c:	0105d793          	srli	a5,a1,0x10
    2550:	01061633          	sll	a2,a2,a6
    2554:	01051533          	sll	a0,a0,a6
    2558:	03c6f6b3          	remu	a3,a3,t3
    255c:	03e70eb3          	mul	t4,a4,t5
    2560:	01069693          	slli	a3,a3,0x10
    2564:	00d7e7b3          	or	a5,a5,a3
    2568:	000f0693          	mv	a3,t5
    256c:	01d7fe63          	bgeu	a5,t4,2588 <__umoddi3+0x2f8>
    2570:	006787b3          	add	a5,a5,t1
    2574:	ffff0693          	addi	a3,t5,-1
    2578:	0067e863          	bltu	a5,t1,2588 <__umoddi3+0x2f8>
    257c:	01d7f663          	bgeu	a5,t4,2588 <__umoddi3+0x2f8>
    2580:	ffef0693          	addi	a3,t5,-2
    2584:	006787b3          	add	a5,a5,t1
    2588:	41d787b3          	sub	a5,a5,t4
    258c:	03c7deb3          	divu	t4,a5,t3
    2590:	01059593          	slli	a1,a1,0x10
    2594:	0105d593          	srli	a1,a1,0x10
    2598:	03c7f7b3          	remu	a5,a5,t3
    259c:	03d70733          	mul	a4,a4,t4
    25a0:	01079793          	slli	a5,a5,0x10
    25a4:	00f5e5b3          	or	a1,a1,a5
    25a8:	000e8793          	mv	a5,t4
    25ac:	00e5fe63          	bgeu	a1,a4,25c8 <__umoddi3+0x338>
    25b0:	006585b3          	add	a1,a1,t1
    25b4:	fffe8793          	addi	a5,t4,-1
    25b8:	0065e863          	bltu	a1,t1,25c8 <__umoddi3+0x338>
    25bc:	00e5f663          	bgeu	a1,a4,25c8 <__umoddi3+0x338>
    25c0:	ffee8793          	addi	a5,t4,-2
    25c4:	006585b3          	add	a1,a1,t1
    25c8:	01069693          	slli	a3,a3,0x10
    25cc:	00010f37          	lui	t5,0x10
    25d0:	00f6e6b3          	or	a3,a3,a5
    25d4:	ffff0793          	addi	a5,t5,-1 # ffff <__clzsi2+0xb85f>
    25d8:	01065e13          	srli	t3,a2,0x10
    25dc:	40e585b3          	sub	a1,a1,a4
    25e0:	00f6f733          	and	a4,a3,a5
    25e4:	0106d693          	srli	a3,a3,0x10
    25e8:	00f677b3          	and	a5,a2,a5
    25ec:	02f70eb3          	mul	t4,a4,a5
    25f0:	02f687b3          	mul	a5,a3,a5
    25f4:	03c70733          	mul	a4,a4,t3
    25f8:	03c686b3          	mul	a3,a3,t3
    25fc:	00f70e33          	add	t3,a4,a5
    2600:	010ed713          	srli	a4,t4,0x10
    2604:	01c70733          	add	a4,a4,t3
    2608:	00f77463          	bgeu	a4,a5,2610 <__umoddi3+0x380>
    260c:	01e686b3          	add	a3,a3,t5
    2610:	01075793          	srli	a5,a4,0x10
    2614:	00d787b3          	add	a5,a5,a3
    2618:	000106b7          	lui	a3,0x10
    261c:	fff68693          	addi	a3,a3,-1 # ffff <__clzsi2+0xb85f>
    2620:	00d77733          	and	a4,a4,a3
    2624:	01071713          	slli	a4,a4,0x10
    2628:	00defeb3          	and	t4,t4,a3
    262c:	01d70733          	add	a4,a4,t4
    2630:	00f5e663          	bltu	a1,a5,263c <__umoddi3+0x3ac>
    2634:	00f59e63          	bne	a1,a5,2650 <__umoddi3+0x3c0>
    2638:	00e57c63          	bgeu	a0,a4,2650 <__umoddi3+0x3c0>
    263c:	40c70633          	sub	a2,a4,a2
    2640:	00c73733          	sltu	a4,a4,a2
    2644:	00670733          	add	a4,a4,t1
    2648:	40e787b3          	sub	a5,a5,a4
    264c:	00060713          	mv	a4,a2
    2650:	40e50733          	sub	a4,a0,a4
    2654:	00e53533          	sltu	a0,a0,a4
    2658:	40f585b3          	sub	a1,a1,a5
    265c:	40a585b3          	sub	a1,a1,a0
    2660:	011598b3          	sll	a7,a1,a7
    2664:	01075733          	srl	a4,a4,a6
    2668:	00e8e533          	or	a0,a7,a4
    266c:	0105d5b3          	srl	a1,a1,a6
    2670:	00008067          	ret

00002674 <__adddf3>:
    2674:	00100837          	lui	a6,0x100
    2678:	fff80813          	addi	a6,a6,-1 # fffff <__bss_start+0xcffff>
    267c:	fe010113          	addi	sp,sp,-32
    2680:	00b878b3          	and	a7,a6,a1
    2684:	0145d713          	srli	a4,a1,0x14
    2688:	01d55793          	srli	a5,a0,0x1d
    268c:	00d87833          	and	a6,a6,a3
    2690:	00812c23          	sw	s0,24(sp)
    2694:	7ff77413          	andi	s0,a4,2047
    2698:	00389713          	slli	a4,a7,0x3
    269c:	0146d893          	srli	a7,a3,0x14
    26a0:	00381813          	slli	a6,a6,0x3
    26a4:	00912a23          	sw	s1,20(sp)
    26a8:	00e7e7b3          	or	a5,a5,a4
    26ac:	7ff8f893          	andi	a7,a7,2047
    26b0:	01d65713          	srli	a4,a2,0x1d
    26b4:	00112e23          	sw	ra,28(sp)
    26b8:	01212823          	sw	s2,16(sp)
    26bc:	01312623          	sw	s3,12(sp)
    26c0:	01f5d493          	srli	s1,a1,0x1f
    26c4:	01f6d693          	srli	a3,a3,0x1f
    26c8:	01076733          	or	a4,a4,a6
    26cc:	00351513          	slli	a0,a0,0x3
    26d0:	00361613          	slli	a2,a2,0x3
    26d4:	41140833          	sub	a6,s0,a7
    26d8:	2cd49863          	bne	s1,a3,29a8 <__adddf3+0x334>
    26dc:	13005063          	blez	a6,27fc <__adddf3+0x188>
    26e0:	04089063          	bnez	a7,2720 <__adddf3+0xac>
    26e4:	00c766b3          	or	a3,a4,a2
    26e8:	70068e63          	beqz	a3,2e04 <__adddf3+0x790>
    26ec:	fff80593          	addi	a1,a6,-1
    26f0:	02059063          	bnez	a1,2710 <__adddf3+0x9c>
    26f4:	00c50633          	add	a2,a0,a2
    26f8:	00e78733          	add	a4,a5,a4
    26fc:	00a637b3          	sltu	a5,a2,a0
    2700:	00f707b3          	add	a5,a4,a5
    2704:	00060513          	mv	a0,a2
    2708:	00100413          	li	s0,1
    270c:	0700006f          	j	277c <__adddf3+0x108>
    2710:	7ff00693          	li	a3,2047
    2714:	02d81063          	bne	a6,a3,2734 <__adddf3+0xc0>
    2718:	7ff00413          	li	s0,2047
    271c:	2140006f          	j	2930 <__adddf3+0x2bc>
    2720:	7ff00693          	li	a3,2047
    2724:	20d40663          	beq	s0,a3,2930 <__adddf3+0x2bc>
    2728:	008006b7          	lui	a3,0x800
    272c:	00d76733          	or	a4,a4,a3
    2730:	00080593          	mv	a1,a6
    2734:	03800693          	li	a3,56
    2738:	0ab6cc63          	blt	a3,a1,27f0 <__adddf3+0x17c>
    273c:	01f00693          	li	a3,31
    2740:	06b6ce63          	blt	a3,a1,27bc <__adddf3+0x148>
    2744:	02000813          	li	a6,32
    2748:	40b80833          	sub	a6,a6,a1
    274c:	010716b3          	sll	a3,a4,a6
    2750:	00b658b3          	srl	a7,a2,a1
    2754:	01061833          	sll	a6,a2,a6
    2758:	0116e6b3          	or	a3,a3,a7
    275c:	01003833          	snez	a6,a6
    2760:	0106e6b3          	or	a3,a3,a6
    2764:	00b755b3          	srl	a1,a4,a1
    2768:	00a686b3          	add	a3,a3,a0
    276c:	00f585b3          	add	a1,a1,a5
    2770:	00a6b7b3          	sltu	a5,a3,a0
    2774:	00f587b3          	add	a5,a1,a5
    2778:	00068513          	mv	a0,a3
    277c:	00800737          	lui	a4,0x800
    2780:	00e7f733          	and	a4,a5,a4
    2784:	1a070663          	beqz	a4,2930 <__adddf3+0x2bc>
    2788:	00140413          	addi	s0,s0,1
    278c:	7ff00713          	li	a4,2047
    2790:	5ce40a63          	beq	s0,a4,2d64 <__adddf3+0x6f0>
    2794:	ff800737          	lui	a4,0xff800
    2798:	fff70713          	addi	a4,a4,-1 # ff7fffff <__bss_start+0xff7cffff>
    279c:	00e7f7b3          	and	a5,a5,a4
    27a0:	00155713          	srli	a4,a0,0x1
    27a4:	00157513          	andi	a0,a0,1
    27a8:	00a76733          	or	a4,a4,a0
    27ac:	01f79513          	slli	a0,a5,0x1f
    27b0:	00e56533          	or	a0,a0,a4
    27b4:	0017d793          	srli	a5,a5,0x1
    27b8:	1780006f          	j	2930 <__adddf3+0x2bc>
    27bc:	fe058693          	addi	a3,a1,-32
    27c0:	02000893          	li	a7,32
    27c4:	00d756b3          	srl	a3,a4,a3
    27c8:	00000813          	li	a6,0
    27cc:	01158863          	beq	a1,a7,27dc <__adddf3+0x168>
    27d0:	04000813          	li	a6,64
    27d4:	40b80833          	sub	a6,a6,a1
    27d8:	01071833          	sll	a6,a4,a6
    27dc:	00c86833          	or	a6,a6,a2
    27e0:	01003833          	snez	a6,a6
    27e4:	0106e6b3          	or	a3,a3,a6
    27e8:	00000593          	li	a1,0
    27ec:	f7dff06f          	j	2768 <__adddf3+0xf4>
    27f0:	00c766b3          	or	a3,a4,a2
    27f4:	00d036b3          	snez	a3,a3
    27f8:	ff1ff06f          	j	27e8 <__adddf3+0x174>
    27fc:	0e080263          	beqz	a6,28e0 <__adddf3+0x26c>
    2800:	408885b3          	sub	a1,a7,s0
    2804:	02041e63          	bnez	s0,2840 <__adddf3+0x1cc>
    2808:	00a7e6b3          	or	a3,a5,a0
    280c:	52068c63          	beqz	a3,2d44 <__adddf3+0x6d0>
    2810:	fff58693          	addi	a3,a1,-1
    2814:	00069c63          	bnez	a3,282c <__adddf3+0x1b8>
    2818:	00c50533          	add	a0,a0,a2
    281c:	00e78733          	add	a4,a5,a4
    2820:	00c53633          	sltu	a2,a0,a2
    2824:	00c707b3          	add	a5,a4,a2
    2828:	ee1ff06f          	j	2708 <__adddf3+0x94>
    282c:	7ff00813          	li	a6,2047
    2830:	03059263          	bne	a1,a6,2854 <__adddf3+0x1e0>
    2834:	00070793          	mv	a5,a4
    2838:	00060513          	mv	a0,a2
    283c:	eddff06f          	j	2718 <__adddf3+0xa4>
    2840:	7ff00693          	li	a3,2047
    2844:	fed888e3          	beq	a7,a3,2834 <__adddf3+0x1c0>
    2848:	008006b7          	lui	a3,0x800
    284c:	00d7e7b3          	or	a5,a5,a3
    2850:	00058693          	mv	a3,a1
    2854:	03800593          	li	a1,56
    2858:	06d5ce63          	blt	a1,a3,28d4 <__adddf3+0x260>
    285c:	01f00593          	li	a1,31
    2860:	04d5c063          	blt	a1,a3,28a0 <__adddf3+0x22c>
    2864:	02000813          	li	a6,32
    2868:	40d80833          	sub	a6,a6,a3
    286c:	010795b3          	sll	a1,a5,a6
    2870:	00d55333          	srl	t1,a0,a3
    2874:	01051833          	sll	a6,a0,a6
    2878:	0065e5b3          	or	a1,a1,t1
    287c:	01003833          	snez	a6,a6
    2880:	0105e5b3          	or	a1,a1,a6
    2884:	00d7d6b3          	srl	a3,a5,a3
    2888:	00c58533          	add	a0,a1,a2
    288c:	00e686b3          	add	a3,a3,a4
    2890:	00c53633          	sltu	a2,a0,a2
    2894:	00c687b3          	add	a5,a3,a2
    2898:	00088413          	mv	s0,a7
    289c:	ee1ff06f          	j	277c <__adddf3+0x108>
    28a0:	fe068593          	addi	a1,a3,-32 # 7fffe0 <__bss_start+0x7cffe0>
    28a4:	02000313          	li	t1,32
    28a8:	00b7d5b3          	srl	a1,a5,a1
    28ac:	00000813          	li	a6,0
    28b0:	00668863          	beq	a3,t1,28c0 <__adddf3+0x24c>
    28b4:	04000813          	li	a6,64
    28b8:	40d80833          	sub	a6,a6,a3
    28bc:	01079833          	sll	a6,a5,a6
    28c0:	00a86833          	or	a6,a6,a0
    28c4:	01003833          	snez	a6,a6
    28c8:	0105e5b3          	or	a1,a1,a6
    28cc:	00000693          	li	a3,0
    28d0:	fb9ff06f          	j	2888 <__adddf3+0x214>
    28d4:	00a7e5b3          	or	a1,a5,a0
    28d8:	00b035b3          	snez	a1,a1
    28dc:	ff1ff06f          	j	28cc <__adddf3+0x258>
    28e0:	00140693          	addi	a3,s0,1
    28e4:	7fe6f593          	andi	a1,a3,2046
    28e8:	08059863          	bnez	a1,2978 <__adddf3+0x304>
    28ec:	00a7e6b3          	or	a3,a5,a0
    28f0:	06041463          	bnez	s0,2958 <__adddf3+0x2e4>
    28f4:	46068063          	beqz	a3,2d54 <__adddf3+0x6e0>
    28f8:	00c766b3          	or	a3,a4,a2
    28fc:	02068a63          	beqz	a3,2930 <__adddf3+0x2bc>
    2900:	00c50633          	add	a2,a0,a2
    2904:	00e78733          	add	a4,a5,a4
    2908:	00a637b3          	sltu	a5,a2,a0
    290c:	00f707b3          	add	a5,a4,a5
    2910:	00800737          	lui	a4,0x800
    2914:	00e7f733          	and	a4,a5,a4
    2918:	00060513          	mv	a0,a2
    291c:	00070a63          	beqz	a4,2930 <__adddf3+0x2bc>
    2920:	ff800737          	lui	a4,0xff800
    2924:	fff70713          	addi	a4,a4,-1 # ff7fffff <__bss_start+0xff7cffff>
    2928:	00e7f7b3          	and	a5,a5,a4
    292c:	00100413          	li	s0,1
    2930:	00757713          	andi	a4,a0,7
    2934:	42070c63          	beqz	a4,2d6c <__adddf3+0x6f8>
    2938:	00f57713          	andi	a4,a0,15
    293c:	00400693          	li	a3,4
    2940:	42d70663          	beq	a4,a3,2d6c <__adddf3+0x6f8>
    2944:	00450713          	addi	a4,a0,4
    2948:	00a73533          	sltu	a0,a4,a0
    294c:	00a787b3          	add	a5,a5,a0
    2950:	00070513          	mv	a0,a4
    2954:	4180006f          	j	2d6c <__adddf3+0x6f8>
    2958:	ec068ee3          	beqz	a3,2834 <__adddf3+0x1c0>
    295c:	00c76733          	or	a4,a4,a2
    2960:	da070ce3          	beqz	a4,2718 <__adddf3+0xa4>
    2964:	00000493          	li	s1,0
    2968:	004007b7          	lui	a5,0x400
    296c:	00000513          	li	a0,0
    2970:	7ff00413          	li	s0,2047
    2974:	3f80006f          	j	2d6c <__adddf3+0x6f8>
    2978:	7ff00593          	li	a1,2047
    297c:	3eb68263          	beq	a3,a1,2d60 <__adddf3+0x6ec>
    2980:	00c50633          	add	a2,a0,a2
    2984:	00a63533          	sltu	a0,a2,a0
    2988:	00e78733          	add	a4,a5,a4
    298c:	00a70733          	add	a4,a4,a0
    2990:	01f71513          	slli	a0,a4,0x1f
    2994:	00165613          	srli	a2,a2,0x1
    2998:	00c56533          	or	a0,a0,a2
    299c:	00175793          	srli	a5,a4,0x1
    29a0:	00068413          	mv	s0,a3
    29a4:	f8dff06f          	j	2930 <__adddf3+0x2bc>
    29a8:	0f005c63          	blez	a6,2aa0 <__adddf3+0x42c>
    29ac:	08089e63          	bnez	a7,2a48 <__adddf3+0x3d4>
    29b0:	00c766b3          	or	a3,a4,a2
    29b4:	44068863          	beqz	a3,2e04 <__adddf3+0x790>
    29b8:	fff80593          	addi	a1,a6,-1
    29bc:	02059063          	bnez	a1,29dc <__adddf3+0x368>
    29c0:	40c50633          	sub	a2,a0,a2
    29c4:	40e78733          	sub	a4,a5,a4
    29c8:	00c537b3          	sltu	a5,a0,a2
    29cc:	40f707b3          	sub	a5,a4,a5
    29d0:	00060513          	mv	a0,a2
    29d4:	00100413          	li	s0,1
    29d8:	0540006f          	j	2a2c <__adddf3+0x3b8>
    29dc:	7ff00693          	li	a3,2047
    29e0:	d2d80ce3          	beq	a6,a3,2718 <__adddf3+0xa4>
    29e4:	03800693          	li	a3,56
    29e8:	0ab6c663          	blt	a3,a1,2a94 <__adddf3+0x420>
    29ec:	01f00693          	li	a3,31
    29f0:	06b6c863          	blt	a3,a1,2a60 <__adddf3+0x3ec>
    29f4:	02000813          	li	a6,32
    29f8:	40b80833          	sub	a6,a6,a1
    29fc:	010716b3          	sll	a3,a4,a6
    2a00:	00b658b3          	srl	a7,a2,a1
    2a04:	01061833          	sll	a6,a2,a6
    2a08:	0116e6b3          	or	a3,a3,a7
    2a0c:	01003833          	snez	a6,a6
    2a10:	0106e6b3          	or	a3,a3,a6
    2a14:	00b755b3          	srl	a1,a4,a1
    2a18:	40d506b3          	sub	a3,a0,a3
    2a1c:	40b785b3          	sub	a1,a5,a1
    2a20:	00d537b3          	sltu	a5,a0,a3
    2a24:	40f587b3          	sub	a5,a1,a5
    2a28:	00068513          	mv	a0,a3
    2a2c:	00800937          	lui	s2,0x800
    2a30:	0127f733          	and	a4,a5,s2
    2a34:	ee070ee3          	beqz	a4,2930 <__adddf3+0x2bc>
    2a38:	fff90913          	addi	s2,s2,-1 # 7fffff <__bss_start+0x7cffff>
    2a3c:	0127f933          	and	s2,a5,s2
    2a40:	00050993          	mv	s3,a0
    2a44:	2140006f          	j	2c58 <__adddf3+0x5e4>
    2a48:	7ff00693          	li	a3,2047
    2a4c:	eed402e3          	beq	s0,a3,2930 <__adddf3+0x2bc>
    2a50:	008006b7          	lui	a3,0x800
    2a54:	00d76733          	or	a4,a4,a3
    2a58:	00080593          	mv	a1,a6
    2a5c:	f89ff06f          	j	29e4 <__adddf3+0x370>
    2a60:	fe058693          	addi	a3,a1,-32
    2a64:	02000893          	li	a7,32
    2a68:	00d756b3          	srl	a3,a4,a3
    2a6c:	00000813          	li	a6,0
    2a70:	01158863          	beq	a1,a7,2a80 <__adddf3+0x40c>
    2a74:	04000813          	li	a6,64
    2a78:	40b80833          	sub	a6,a6,a1
    2a7c:	01071833          	sll	a6,a4,a6
    2a80:	00c86833          	or	a6,a6,a2
    2a84:	01003833          	snez	a6,a6
    2a88:	0106e6b3          	or	a3,a3,a6
    2a8c:	00000593          	li	a1,0
    2a90:	f89ff06f          	j	2a18 <__adddf3+0x3a4>
    2a94:	00c766b3          	or	a3,a4,a2
    2a98:	00d036b3          	snez	a3,a3
    2a9c:	ff1ff06f          	j	2a8c <__adddf3+0x418>
    2aa0:	0e080863          	beqz	a6,2b90 <__adddf3+0x51c>
    2aa4:	40888833          	sub	a6,a7,s0
    2aa8:	04041263          	bnez	s0,2aec <__adddf3+0x478>
    2aac:	00a7e5b3          	or	a1,a5,a0
    2ab0:	34058e63          	beqz	a1,2e0c <__adddf3+0x798>
    2ab4:	fff80593          	addi	a1,a6,-1
    2ab8:	00059e63          	bnez	a1,2ad4 <__adddf3+0x460>
    2abc:	40a60533          	sub	a0,a2,a0
    2ac0:	40f70733          	sub	a4,a4,a5
    2ac4:	00a63633          	sltu	a2,a2,a0
    2ac8:	40c707b3          	sub	a5,a4,a2
    2acc:	00068493          	mv	s1,a3
    2ad0:	f05ff06f          	j	29d4 <__adddf3+0x360>
    2ad4:	7ff00313          	li	t1,2047
    2ad8:	02681463          	bne	a6,t1,2b00 <__adddf3+0x48c>
    2adc:	00070793          	mv	a5,a4
    2ae0:	00060513          	mv	a0,a2
    2ae4:	7ff00413          	li	s0,2047
    2ae8:	0d00006f          	j	2bb8 <__adddf3+0x544>
    2aec:	7ff00593          	li	a1,2047
    2af0:	feb886e3          	beq	a7,a1,2adc <__adddf3+0x468>
    2af4:	008005b7          	lui	a1,0x800
    2af8:	00b7e7b3          	or	a5,a5,a1
    2afc:	00080593          	mv	a1,a6
    2b00:	03800813          	li	a6,56
    2b04:	08b84063          	blt	a6,a1,2b84 <__adddf3+0x510>
    2b08:	01f00813          	li	a6,31
    2b0c:	04b84263          	blt	a6,a1,2b50 <__adddf3+0x4dc>
    2b10:	02000313          	li	t1,32
    2b14:	40b30333          	sub	t1,t1,a1
    2b18:	00b55e33          	srl	t3,a0,a1
    2b1c:	00679833          	sll	a6,a5,t1
    2b20:	00651333          	sll	t1,a0,t1
    2b24:	01c86833          	or	a6,a6,t3
    2b28:	00603333          	snez	t1,t1
    2b2c:	00686533          	or	a0,a6,t1
    2b30:	00b7d5b3          	srl	a1,a5,a1
    2b34:	40a60533          	sub	a0,a2,a0
    2b38:	40b705b3          	sub	a1,a4,a1
    2b3c:	00a63633          	sltu	a2,a2,a0
    2b40:	40c587b3          	sub	a5,a1,a2
    2b44:	00088413          	mv	s0,a7
    2b48:	00068493          	mv	s1,a3
    2b4c:	ee1ff06f          	j	2a2c <__adddf3+0x3b8>
    2b50:	fe058813          	addi	a6,a1,-32 # 7fffe0 <__bss_start+0x7cffe0>
    2b54:	02000e13          	li	t3,32
    2b58:	0107d833          	srl	a6,a5,a6
    2b5c:	00000313          	li	t1,0
    2b60:	01c58863          	beq	a1,t3,2b70 <__adddf3+0x4fc>
    2b64:	04000313          	li	t1,64
    2b68:	40b30333          	sub	t1,t1,a1
    2b6c:	00679333          	sll	t1,a5,t1
    2b70:	00a36333          	or	t1,t1,a0
    2b74:	00603333          	snez	t1,t1
    2b78:	00686533          	or	a0,a6,t1
    2b7c:	00000593          	li	a1,0
    2b80:	fb5ff06f          	j	2b34 <__adddf3+0x4c0>
    2b84:	00a7e533          	or	a0,a5,a0
    2b88:	00a03533          	snez	a0,a0
    2b8c:	ff1ff06f          	j	2b7c <__adddf3+0x508>
    2b90:	00140593          	addi	a1,s0,1
    2b94:	7fe5f593          	andi	a1,a1,2046
    2b98:	08059863          	bnez	a1,2c28 <__adddf3+0x5b4>
    2b9c:	00a7e833          	or	a6,a5,a0
    2ba0:	00c765b3          	or	a1,a4,a2
    2ba4:	06041263          	bnez	s0,2c08 <__adddf3+0x594>
    2ba8:	00081c63          	bnez	a6,2bc0 <__adddf3+0x54c>
    2bac:	26058863          	beqz	a1,2e1c <__adddf3+0x7a8>
    2bb0:	00070793          	mv	a5,a4
    2bb4:	00060513          	mv	a0,a2
    2bb8:	00068493          	mv	s1,a3
    2bbc:	d75ff06f          	j	2930 <__adddf3+0x2bc>
    2bc0:	d60588e3          	beqz	a1,2930 <__adddf3+0x2bc>
    2bc4:	40c50833          	sub	a6,a0,a2
    2bc8:	010538b3          	sltu	a7,a0,a6
    2bcc:	40e785b3          	sub	a1,a5,a4
    2bd0:	411585b3          	sub	a1,a1,a7
    2bd4:	008008b7          	lui	a7,0x800
    2bd8:	0115f8b3          	and	a7,a1,a7
    2bdc:	00088c63          	beqz	a7,2bf4 <__adddf3+0x580>
    2be0:	40a60533          	sub	a0,a2,a0
    2be4:	40f70733          	sub	a4,a4,a5
    2be8:	00a63633          	sltu	a2,a2,a0
    2bec:	40c707b3          	sub	a5,a4,a2
    2bf0:	fc9ff06f          	j	2bb8 <__adddf3+0x544>
    2bf4:	00b86533          	or	a0,a6,a1
    2bf8:	22050a63          	beqz	a0,2e2c <__adddf3+0x7b8>
    2bfc:	00058793          	mv	a5,a1
    2c00:	00080513          	mv	a0,a6
    2c04:	d2dff06f          	j	2930 <__adddf3+0x2bc>
    2c08:	00081c63          	bnez	a6,2c20 <__adddf3+0x5ac>
    2c0c:	22058463          	beqz	a1,2e34 <__adddf3+0x7c0>
    2c10:	00070793          	mv	a5,a4
    2c14:	00060513          	mv	a0,a2
    2c18:	00068493          	mv	s1,a3
    2c1c:	afdff06f          	j	2718 <__adddf3+0xa4>
    2c20:	ae058ce3          	beqz	a1,2718 <__adddf3+0xa4>
    2c24:	d41ff06f          	j	2964 <__adddf3+0x2f0>
    2c28:	40c509b3          	sub	s3,a0,a2
    2c2c:	013535b3          	sltu	a1,a0,s3
    2c30:	40e78933          	sub	s2,a5,a4
    2c34:	40b90933          	sub	s2,s2,a1
    2c38:	008005b7          	lui	a1,0x800
    2c3c:	00b975b3          	and	a1,s2,a1
    2c40:	08058463          	beqz	a1,2cc8 <__adddf3+0x654>
    2c44:	40a609b3          	sub	s3,a2,a0
    2c48:	40f70933          	sub	s2,a4,a5
    2c4c:	01363633          	sltu	a2,a2,s3
    2c50:	40c90933          	sub	s2,s2,a2
    2c54:	00068493          	mv	s1,a3
    2c58:	08090263          	beqz	s2,2cdc <__adddf3+0x668>
    2c5c:	00090513          	mv	a0,s2
    2c60:	341010ef          	jal	ra,47a0 <__clzsi2>
    2c64:	ff850713          	addi	a4,a0,-8
    2c68:	01f00793          	li	a5,31
    2c6c:	08e7c063          	blt	a5,a4,2cec <__adddf3+0x678>
    2c70:	02000793          	li	a5,32
    2c74:	40e787b3          	sub	a5,a5,a4
    2c78:	00e91933          	sll	s2,s2,a4
    2c7c:	00f9d7b3          	srl	a5,s3,a5
    2c80:	0127e7b3          	or	a5,a5,s2
    2c84:	00e99533          	sll	a0,s3,a4
    2c88:	0a874463          	blt	a4,s0,2d30 <__adddf3+0x6bc>
    2c8c:	40870733          	sub	a4,a4,s0
    2c90:	00170613          	addi	a2,a4,1
    2c94:	01f00693          	li	a3,31
    2c98:	06c6c263          	blt	a3,a2,2cfc <__adddf3+0x688>
    2c9c:	02000713          	li	a4,32
    2ca0:	40c70733          	sub	a4,a4,a2
    2ca4:	00e796b3          	sll	a3,a5,a4
    2ca8:	00c555b3          	srl	a1,a0,a2
    2cac:	00e51733          	sll	a4,a0,a4
    2cb0:	00b6e6b3          	or	a3,a3,a1
    2cb4:	00e03733          	snez	a4,a4
    2cb8:	00e6e533          	or	a0,a3,a4
    2cbc:	00c7d7b3          	srl	a5,a5,a2
    2cc0:	00000413          	li	s0,0
    2cc4:	c6dff06f          	j	2930 <__adddf3+0x2bc>
    2cc8:	0129e533          	or	a0,s3,s2
    2ccc:	f80516e3          	bnez	a0,2c58 <__adddf3+0x5e4>
    2cd0:	00000793          	li	a5,0
    2cd4:	00000413          	li	s0,0
    2cd8:	14c0006f          	j	2e24 <__adddf3+0x7b0>
    2cdc:	00098513          	mv	a0,s3
    2ce0:	2c1010ef          	jal	ra,47a0 <__clzsi2>
    2ce4:	02050513          	addi	a0,a0,32
    2ce8:	f7dff06f          	j	2c64 <__adddf3+0x5f0>
    2cec:	fd850793          	addi	a5,a0,-40
    2cf0:	00f997b3          	sll	a5,s3,a5
    2cf4:	00000513          	li	a0,0
    2cf8:	f91ff06f          	j	2c88 <__adddf3+0x614>
    2cfc:	fe170713          	addi	a4,a4,-31
    2d00:	02000593          	li	a1,32
    2d04:	00e7d733          	srl	a4,a5,a4
    2d08:	00000693          	li	a3,0
    2d0c:	00b60863          	beq	a2,a1,2d1c <__adddf3+0x6a8>
    2d10:	04000693          	li	a3,64
    2d14:	40c686b3          	sub	a3,a3,a2
    2d18:	00d796b3          	sll	a3,a5,a3
    2d1c:	00d566b3          	or	a3,a0,a3
    2d20:	00d036b3          	snez	a3,a3
    2d24:	00d76533          	or	a0,a4,a3
    2d28:	00000793          	li	a5,0
    2d2c:	f95ff06f          	j	2cc0 <__adddf3+0x64c>
    2d30:	40e40433          	sub	s0,s0,a4
    2d34:	ff800737          	lui	a4,0xff800
    2d38:	fff70713          	addi	a4,a4,-1 # ff7fffff <__bss_start+0xff7cffff>
    2d3c:	00e7f7b3          	and	a5,a5,a4
    2d40:	bf1ff06f          	j	2930 <__adddf3+0x2bc>
    2d44:	00070793          	mv	a5,a4
    2d48:	00060513          	mv	a0,a2
    2d4c:	00058413          	mv	s0,a1
    2d50:	be1ff06f          	j	2930 <__adddf3+0x2bc>
    2d54:	00070793          	mv	a5,a4
    2d58:	00060513          	mv	a0,a2
    2d5c:	bd5ff06f          	j	2930 <__adddf3+0x2bc>
    2d60:	7ff00413          	li	s0,2047
    2d64:	00000793          	li	a5,0
    2d68:	00000513          	li	a0,0
    2d6c:	00800737          	lui	a4,0x800
    2d70:	00e7f733          	and	a4,a5,a4
    2d74:	00070e63          	beqz	a4,2d90 <__adddf3+0x71c>
    2d78:	00140413          	addi	s0,s0,1
    2d7c:	7ff00713          	li	a4,2047
    2d80:	0ce40263          	beq	s0,a4,2e44 <__adddf3+0x7d0>
    2d84:	ff800737          	lui	a4,0xff800
    2d88:	fff70713          	addi	a4,a4,-1 # ff7fffff <__bss_start+0xff7cffff>
    2d8c:	00e7f7b3          	and	a5,a5,a4
    2d90:	01d79693          	slli	a3,a5,0x1d
    2d94:	00355513          	srli	a0,a0,0x3
    2d98:	7ff00713          	li	a4,2047
    2d9c:	00a6e6b3          	or	a3,a3,a0
    2da0:	0037d793          	srli	a5,a5,0x3
    2da4:	00e41e63          	bne	s0,a4,2dc0 <__adddf3+0x74c>
    2da8:	00f6e6b3          	or	a3,a3,a5
    2dac:	00000793          	li	a5,0
    2db0:	00068863          	beqz	a3,2dc0 <__adddf3+0x74c>
    2db4:	000807b7          	lui	a5,0x80
    2db8:	00000693          	li	a3,0
    2dbc:	00000493          	li	s1,0
    2dc0:	01441713          	slli	a4,s0,0x14
    2dc4:	7ff00637          	lui	a2,0x7ff00
    2dc8:	00c79793          	slli	a5,a5,0xc
    2dcc:	01c12083          	lw	ra,28(sp)
    2dd0:	01812403          	lw	s0,24(sp)
    2dd4:	00c77733          	and	a4,a4,a2
    2dd8:	00c7d793          	srli	a5,a5,0xc
    2ddc:	01f49493          	slli	s1,s1,0x1f
    2de0:	00f767b3          	or	a5,a4,a5
    2de4:	0097e733          	or	a4,a5,s1
    2de8:	01012903          	lw	s2,16(sp)
    2dec:	01412483          	lw	s1,20(sp)
    2df0:	00c12983          	lw	s3,12(sp)
    2df4:	00068513          	mv	a0,a3
    2df8:	00070593          	mv	a1,a4
    2dfc:	02010113          	addi	sp,sp,32
    2e00:	00008067          	ret
    2e04:	00080413          	mv	s0,a6
    2e08:	b29ff06f          	j	2930 <__adddf3+0x2bc>
    2e0c:	00070793          	mv	a5,a4
    2e10:	00060513          	mv	a0,a2
    2e14:	00080413          	mv	s0,a6
    2e18:	da1ff06f          	j	2bb8 <__adddf3+0x544>
    2e1c:	00000793          	li	a5,0
    2e20:	00000513          	li	a0,0
    2e24:	00000493          	li	s1,0
    2e28:	f45ff06f          	j	2d6c <__adddf3+0x6f8>
    2e2c:	00000793          	li	a5,0
    2e30:	ff5ff06f          	j	2e24 <__adddf3+0x7b0>
    2e34:	00000513          	li	a0,0
    2e38:	00000493          	li	s1,0
    2e3c:	004007b7          	lui	a5,0x400
    2e40:	b31ff06f          	j	2970 <__adddf3+0x2fc>
    2e44:	00000793          	li	a5,0
    2e48:	00000513          	li	a0,0
    2e4c:	f45ff06f          	j	2d90 <__adddf3+0x71c>

00002e50 <__divdf3>:
    2e50:	fd010113          	addi	sp,sp,-48
    2e54:	0145d813          	srli	a6,a1,0x14
    2e58:	02912223          	sw	s1,36(sp)
    2e5c:	01312e23          	sw	s3,28(sp)
    2e60:	01412c23          	sw	s4,24(sp)
    2e64:	01612823          	sw	s6,16(sp)
    2e68:	01812423          	sw	s8,8(sp)
    2e6c:	00c59493          	slli	s1,a1,0xc
    2e70:	02112623          	sw	ra,44(sp)
    2e74:	02812423          	sw	s0,40(sp)
    2e78:	03212023          	sw	s2,32(sp)
    2e7c:	01512a23          	sw	s5,20(sp)
    2e80:	01712623          	sw	s7,12(sp)
    2e84:	7ff87813          	andi	a6,a6,2047
    2e88:	00050a13          	mv	s4,a0
    2e8c:	00060b13          	mv	s6,a2
    2e90:	00068c13          	mv	s8,a3
    2e94:	00c4d493          	srli	s1,s1,0xc
    2e98:	01f5d993          	srli	s3,a1,0x1f
    2e9c:	0a080063          	beqz	a6,2f3c <__divdf3+0xec>
    2ea0:	7ff00793          	li	a5,2047
    2ea4:	0ef80e63          	beq	a6,a5,2fa0 <__divdf3+0x150>
    2ea8:	01d55a93          	srli	s5,a0,0x1d
    2eac:	00349493          	slli	s1,s1,0x3
    2eb0:	009aeab3          	or	s5,s5,s1
    2eb4:	008007b7          	lui	a5,0x800
    2eb8:	00faeab3          	or	s5,s5,a5
    2ebc:	00351413          	slli	s0,a0,0x3
    2ec0:	c0180913          	addi	s2,a6,-1023
    2ec4:	00000b93          	li	s7,0
    2ec8:	014c5793          	srli	a5,s8,0x14
    2ecc:	00cc1493          	slli	s1,s8,0xc
    2ed0:	7ff7f793          	andi	a5,a5,2047
    2ed4:	00c4d493          	srli	s1,s1,0xc
    2ed8:	01fc5c13          	srli	s8,s8,0x1f
    2edc:	10078063          	beqz	a5,2fdc <__divdf3+0x18c>
    2ee0:	7ff00713          	li	a4,2047
    2ee4:	16e78063          	beq	a5,a4,3044 <__divdf3+0x1f4>
    2ee8:	00349493          	slli	s1,s1,0x3
    2eec:	01db5713          	srli	a4,s6,0x1d
    2ef0:	00976733          	or	a4,a4,s1
    2ef4:	008004b7          	lui	s1,0x800
    2ef8:	009764b3          	or	s1,a4,s1
    2efc:	003b1e93          	slli	t4,s6,0x3
    2f00:	c0178793          	addi	a5,a5,-1023 # 7ffc01 <__bss_start+0x7cfc01>
    2f04:	00000713          	li	a4,0
    2f08:	40f90833          	sub	a6,s2,a5
    2f0c:	002b9793          	slli	a5,s7,0x2
    2f10:	00e7e7b3          	or	a5,a5,a4
    2f14:	fff78793          	addi	a5,a5,-1
    2f18:	00e00693          	li	a3,14
    2f1c:	0189c633          	xor	a2,s3,s8
    2f20:	14f6ee63          	bltu	a3,a5,307c <__divdf3+0x22c>
    2f24:	000206b7          	lui	a3,0x20
    2f28:	00279793          	slli	a5,a5,0x2
    2f2c:	21c68693          	addi	a3,a3,540 # 2021c <pow10.0+0x64>
    2f30:	00d787b3          	add	a5,a5,a3
    2f34:	0007a783          	lw	a5,0(a5)
    2f38:	00078067          	jr	a5
    2f3c:	00a4eab3          	or	s5,s1,a0
    2f40:	060a8e63          	beqz	s5,2fbc <__divdf3+0x16c>
    2f44:	04048063          	beqz	s1,2f84 <__divdf3+0x134>
    2f48:	00048513          	mv	a0,s1
    2f4c:	055010ef          	jal	ra,47a0 <__clzsi2>
    2f50:	ff550793          	addi	a5,a0,-11
    2f54:	01c00713          	li	a4,28
    2f58:	02f74c63          	blt	a4,a5,2f90 <__divdf3+0x140>
    2f5c:	01d00a93          	li	s5,29
    2f60:	ff850413          	addi	s0,a0,-8
    2f64:	40fa8ab3          	sub	s5,s5,a5
    2f68:	008494b3          	sll	s1,s1,s0
    2f6c:	015a5ab3          	srl	s5,s4,s5
    2f70:	009aeab3          	or	s5,s5,s1
    2f74:	008a1433          	sll	s0,s4,s0
    2f78:	c0d00813          	li	a6,-1011
    2f7c:	40a80933          	sub	s2,a6,a0
    2f80:	f45ff06f          	j	2ec4 <__divdf3+0x74>
    2f84:	01d010ef          	jal	ra,47a0 <__clzsi2>
    2f88:	02050513          	addi	a0,a0,32
    2f8c:	fc5ff06f          	j	2f50 <__divdf3+0x100>
    2f90:	fd850a93          	addi	s5,a0,-40
    2f94:	015a1ab3          	sll	s5,s4,s5
    2f98:	00000413          	li	s0,0
    2f9c:	fddff06f          	j	2f78 <__divdf3+0x128>
    2fa0:	00a4eab3          	or	s5,s1,a0
    2fa4:	020a8463          	beqz	s5,2fcc <__divdf3+0x17c>
    2fa8:	00050413          	mv	s0,a0
    2fac:	00048a93          	mv	s5,s1
    2fb0:	7ff00913          	li	s2,2047
    2fb4:	00300b93          	li	s7,3
    2fb8:	f11ff06f          	j	2ec8 <__divdf3+0x78>
    2fbc:	00000413          	li	s0,0
    2fc0:	00000913          	li	s2,0
    2fc4:	00100b93          	li	s7,1
    2fc8:	f01ff06f          	j	2ec8 <__divdf3+0x78>
    2fcc:	00000413          	li	s0,0
    2fd0:	7ff00913          	li	s2,2047
    2fd4:	00200b93          	li	s7,2
    2fd8:	ef1ff06f          	j	2ec8 <__divdf3+0x78>
    2fdc:	0164eeb3          	or	t4,s1,s6
    2fe0:	060e8e63          	beqz	t4,305c <__divdf3+0x20c>
    2fe4:	04048063          	beqz	s1,3024 <__divdf3+0x1d4>
    2fe8:	00048513          	mv	a0,s1
    2fec:	7b4010ef          	jal	ra,47a0 <__clzsi2>
    2ff0:	ff550713          	addi	a4,a0,-11
    2ff4:	01c00793          	li	a5,28
    2ff8:	02e7ce63          	blt	a5,a4,3034 <__divdf3+0x1e4>
    2ffc:	01d00793          	li	a5,29
    3000:	ff850e93          	addi	t4,a0,-8
    3004:	40e787b3          	sub	a5,a5,a4
    3008:	01d494b3          	sll	s1,s1,t4
    300c:	00fb57b3          	srl	a5,s6,a5
    3010:	0097e4b3          	or	s1,a5,s1
    3014:	01db1eb3          	sll	t4,s6,t4
    3018:	c0d00793          	li	a5,-1011
    301c:	40a787b3          	sub	a5,a5,a0
    3020:	ee5ff06f          	j	2f04 <__divdf3+0xb4>
    3024:	000b0513          	mv	a0,s6
    3028:	778010ef          	jal	ra,47a0 <__clzsi2>
    302c:	02050513          	addi	a0,a0,32
    3030:	fc1ff06f          	j	2ff0 <__divdf3+0x1a0>
    3034:	fd850493          	addi	s1,a0,-40
    3038:	009b14b3          	sll	s1,s6,s1
    303c:	00000e93          	li	t4,0
    3040:	fd9ff06f          	j	3018 <__divdf3+0x1c8>
    3044:	0164eeb3          	or	t4,s1,s6
    3048:	020e8263          	beqz	t4,306c <__divdf3+0x21c>
    304c:	000b0e93          	mv	t4,s6
    3050:	7ff00793          	li	a5,2047
    3054:	00300713          	li	a4,3
    3058:	eb1ff06f          	j	2f08 <__divdf3+0xb8>
    305c:	00000493          	li	s1,0
    3060:	00000793          	li	a5,0
    3064:	00100713          	li	a4,1
    3068:	ea1ff06f          	j	2f08 <__divdf3+0xb8>
    306c:	00000493          	li	s1,0
    3070:	7ff00793          	li	a5,2047
    3074:	00200713          	li	a4,2
    3078:	e91ff06f          	j	2f08 <__divdf3+0xb8>
    307c:	0154e663          	bltu	s1,s5,3088 <__divdf3+0x238>
    3080:	349a9e63          	bne	s5,s1,33dc <__divdf3+0x58c>
    3084:	35d46c63          	bltu	s0,t4,33dc <__divdf3+0x58c>
    3088:	01fa9713          	slli	a4,s5,0x1f
    308c:	00145793          	srli	a5,s0,0x1
    3090:	01f41f13          	slli	t5,s0,0x1f
    3094:	001ada93          	srli	s5,s5,0x1
    3098:	00f76433          	or	s0,a4,a5
    309c:	00849513          	slli	a0,s1,0x8
    30a0:	018ed693          	srli	a3,t4,0x18
    30a4:	00a6e6b3          	or	a3,a3,a0
    30a8:	01055513          	srli	a0,a0,0x10
    30ac:	02aade33          	divu	t3,s5,a0
    30b0:	01069313          	slli	t1,a3,0x10
    30b4:	01035313          	srli	t1,t1,0x10
    30b8:	01045793          	srli	a5,s0,0x10
    30bc:	008e9593          	slli	a1,t4,0x8
    30c0:	02aafab3          	remu	s5,s5,a0
    30c4:	000e0713          	mv	a4,t3
    30c8:	03c308b3          	mul	a7,t1,t3
    30cc:	010a9a93          	slli	s5,s5,0x10
    30d0:	0157e7b3          	or	a5,a5,s5
    30d4:	0117fe63          	bgeu	a5,a7,30f0 <__divdf3+0x2a0>
    30d8:	00d787b3          	add	a5,a5,a3
    30dc:	fffe0713          	addi	a4,t3,-1
    30e0:	00d7e863          	bltu	a5,a3,30f0 <__divdf3+0x2a0>
    30e4:	0117f663          	bgeu	a5,a7,30f0 <__divdf3+0x2a0>
    30e8:	ffee0713          	addi	a4,t3,-2
    30ec:	00d787b3          	add	a5,a5,a3
    30f0:	411787b3          	sub	a5,a5,a7
    30f4:	02a7de33          	divu	t3,a5,a0
    30f8:	01041413          	slli	s0,s0,0x10
    30fc:	01045413          	srli	s0,s0,0x10
    3100:	02a7f7b3          	remu	a5,a5,a0
    3104:	03c308b3          	mul	a7,t1,t3
    3108:	01079793          	slli	a5,a5,0x10
    310c:	00f46433          	or	s0,s0,a5
    3110:	000e0793          	mv	a5,t3
    3114:	01147e63          	bgeu	s0,a7,3130 <__divdf3+0x2e0>
    3118:	00d40433          	add	s0,s0,a3
    311c:	fffe0793          	addi	a5,t3,-1
    3120:	00d46863          	bltu	s0,a3,3130 <__divdf3+0x2e0>
    3124:	01147663          	bgeu	s0,a7,3130 <__divdf3+0x2e0>
    3128:	ffee0793          	addi	a5,t3,-2
    312c:	00d40433          	add	s0,s0,a3
    3130:	01071713          	slli	a4,a4,0x10
    3134:	000103b7          	lui	t2,0x10
    3138:	00f76fb3          	or	t6,a4,a5
    313c:	41140433          	sub	s0,s0,a7
    3140:	fff38893          	addi	a7,t2,-1 # ffff <__clzsi2+0xb85f>
    3144:	011ff7b3          	and	a5,t6,a7
    3148:	010fde93          	srli	t4,t6,0x10
    314c:	0105de13          	srli	t3,a1,0x10
    3150:	0115f8b3          	and	a7,a1,a7
    3154:	02f882b3          	mul	t0,a7,a5
    3158:	031e84b3          	mul	s1,t4,a7
    315c:	0102d713          	srli	a4,t0,0x10
    3160:	02fe07b3          	mul	a5,t3,a5
    3164:	009787b3          	add	a5,a5,s1
    3168:	00f70733          	add	a4,a4,a5
    316c:	03ce8eb3          	mul	t4,t4,t3
    3170:	00977463          	bgeu	a4,s1,3178 <__divdf3+0x328>
    3174:	007e8eb3          	add	t4,t4,t2
    3178:	01075793          	srli	a5,a4,0x10
    317c:	01d787b3          	add	a5,a5,t4
    3180:	00010eb7          	lui	t4,0x10
    3184:	fffe8e93          	addi	t4,t4,-1 # ffff <__clzsi2+0xb85f>
    3188:	01d77733          	and	a4,a4,t4
    318c:	01071713          	slli	a4,a4,0x10
    3190:	01d2f2b3          	and	t0,t0,t4
    3194:	00570733          	add	a4,a4,t0
    3198:	00f46863          	bltu	s0,a5,31a8 <__divdf3+0x358>
    319c:	000f8493          	mv	s1,t6
    31a0:	04f41463          	bne	s0,a5,31e8 <__divdf3+0x398>
    31a4:	04ef7263          	bgeu	t5,a4,31e8 <__divdf3+0x398>
    31a8:	00bf0f33          	add	t5,t5,a1
    31ac:	00bf3eb3          	sltu	t4,t5,a1
    31b0:	00de8eb3          	add	t4,t4,a3
    31b4:	01d40433          	add	s0,s0,t4
    31b8:	ffff8493          	addi	s1,t6,-1
    31bc:	0086e663          	bltu	a3,s0,31c8 <__divdf3+0x378>
    31c0:	02869463          	bne	a3,s0,31e8 <__divdf3+0x398>
    31c4:	02bf6263          	bltu	t5,a1,31e8 <__divdf3+0x398>
    31c8:	00f46663          	bltu	s0,a5,31d4 <__divdf3+0x384>
    31cc:	00879e63          	bne	a5,s0,31e8 <__divdf3+0x398>
    31d0:	00ef7c63          	bgeu	t5,a4,31e8 <__divdf3+0x398>
    31d4:	00bf0f33          	add	t5,t5,a1
    31d8:	00bf3eb3          	sltu	t4,t5,a1
    31dc:	00de8eb3          	add	t4,t4,a3
    31e0:	ffef8493          	addi	s1,t6,-2
    31e4:	01d40433          	add	s0,s0,t4
    31e8:	40ef0733          	sub	a4,t5,a4
    31ec:	40f40433          	sub	s0,s0,a5
    31f0:	00ef37b3          	sltu	a5,t5,a4
    31f4:	40f40433          	sub	s0,s0,a5
    31f8:	fff00e93          	li	t4,-1
    31fc:	12868463          	beq	a3,s0,3324 <__divdf3+0x4d4>
    3200:	02a45fb3          	divu	t6,s0,a0
    3204:	01075793          	srli	a5,a4,0x10
    3208:	02a47433          	remu	s0,s0,a0
    320c:	000f8e93          	mv	t4,t6
    3210:	03f30f33          	mul	t5,t1,t6
    3214:	01041413          	slli	s0,s0,0x10
    3218:	0087e7b3          	or	a5,a5,s0
    321c:	01e7fe63          	bgeu	a5,t5,3238 <__divdf3+0x3e8>
    3220:	00d787b3          	add	a5,a5,a3
    3224:	ffff8e93          	addi	t4,t6,-1
    3228:	00d7e863          	bltu	a5,a3,3238 <__divdf3+0x3e8>
    322c:	01e7f663          	bgeu	a5,t5,3238 <__divdf3+0x3e8>
    3230:	ffef8e93          	addi	t4,t6,-2
    3234:	00d787b3          	add	a5,a5,a3
    3238:	41e787b3          	sub	a5,a5,t5
    323c:	02a7df33          	divu	t5,a5,a0
    3240:	01071713          	slli	a4,a4,0x10
    3244:	01075713          	srli	a4,a4,0x10
    3248:	02a7f7b3          	remu	a5,a5,a0
    324c:	000f0513          	mv	a0,t5
    3250:	03e30333          	mul	t1,t1,t5
    3254:	01079793          	slli	a5,a5,0x10
    3258:	00f76733          	or	a4,a4,a5
    325c:	00677e63          	bgeu	a4,t1,3278 <__divdf3+0x428>
    3260:	00d70733          	add	a4,a4,a3
    3264:	ffff0513          	addi	a0,t5,-1
    3268:	00d76863          	bltu	a4,a3,3278 <__divdf3+0x428>
    326c:	00677663          	bgeu	a4,t1,3278 <__divdf3+0x428>
    3270:	ffef0513          	addi	a0,t5,-2
    3274:	00d70733          	add	a4,a4,a3
    3278:	010e9793          	slli	a5,t4,0x10
    327c:	00a7e7b3          	or	a5,a5,a0
    3280:	01079513          	slli	a0,a5,0x10
    3284:	01055513          	srli	a0,a0,0x10
    3288:	40670733          	sub	a4,a4,t1
    328c:	0107d313          	srli	t1,a5,0x10
    3290:	03150eb3          	mul	t4,a0,a7
    3294:	031308b3          	mul	a7,t1,a7
    3298:	026e0333          	mul	t1,t3,t1
    329c:	02ae0e33          	mul	t3,t3,a0
    32a0:	010ed513          	srli	a0,t4,0x10
    32a4:	011e0e33          	add	t3,t3,a7
    32a8:	01c50533          	add	a0,a0,t3
    32ac:	01157663          	bgeu	a0,a7,32b8 <__divdf3+0x468>
    32b0:	000108b7          	lui	a7,0x10
    32b4:	01130333          	add	t1,t1,a7
    32b8:	01055893          	srli	a7,a0,0x10
    32bc:	006888b3          	add	a7,a7,t1
    32c0:	00010337          	lui	t1,0x10
    32c4:	fff30313          	addi	t1,t1,-1 # ffff <__clzsi2+0xb85f>
    32c8:	00657533          	and	a0,a0,t1
    32cc:	01051513          	slli	a0,a0,0x10
    32d0:	006efeb3          	and	t4,t4,t1
    32d4:	01d50533          	add	a0,a0,t4
    32d8:	01176863          	bltu	a4,a7,32e8 <__divdf3+0x498>
    32dc:	25171463          	bne	a4,a7,3524 <__divdf3+0x6d4>
    32e0:	00078e93          	mv	t4,a5
    32e4:	04050063          	beqz	a0,3324 <__divdf3+0x4d4>
    32e8:	00e68733          	add	a4,a3,a4
    32ec:	fff78e93          	addi	t4,a5,-1
    32f0:	02d76463          	bltu	a4,a3,3318 <__divdf3+0x4c8>
    32f4:	01176663          	bltu	a4,a7,3300 <__divdf3+0x4b0>
    32f8:	23171463          	bne	a4,a7,3520 <__divdf3+0x6d0>
    32fc:	02a5f063          	bgeu	a1,a0,331c <__divdf3+0x4cc>
    3300:	ffe78e93          	addi	t4,a5,-2
    3304:	00159793          	slli	a5,a1,0x1
    3308:	00b7b5b3          	sltu	a1,a5,a1
    330c:	00d585b3          	add	a1,a1,a3
    3310:	00b70733          	add	a4,a4,a1
    3314:	00078593          	mv	a1,a5
    3318:	01171463          	bne	a4,a7,3320 <__divdf3+0x4d0>
    331c:	00b50463          	beq	a0,a1,3324 <__divdf3+0x4d4>
    3320:	001eee93          	ori	t4,t4,1
    3324:	3ff80793          	addi	a5,a6,1023
    3328:	10f05a63          	blez	a5,343c <__divdf3+0x5ec>
    332c:	007ef713          	andi	a4,t4,7
    3330:	02070063          	beqz	a4,3350 <__divdf3+0x500>
    3334:	00fef713          	andi	a4,t4,15
    3338:	00400693          	li	a3,4
    333c:	00d70a63          	beq	a4,a3,3350 <__divdf3+0x500>
    3340:	004e8713          	addi	a4,t4,4
    3344:	01d73eb3          	sltu	t4,a4,t4
    3348:	01d484b3          	add	s1,s1,t4
    334c:	00070e93          	mv	t4,a4
    3350:	01000737          	lui	a4,0x1000
    3354:	00e4f733          	and	a4,s1,a4
    3358:	00070a63          	beqz	a4,336c <__divdf3+0x51c>
    335c:	ff0007b7          	lui	a5,0xff000
    3360:	fff78793          	addi	a5,a5,-1 # feffffff <__bss_start+0xfefcffff>
    3364:	00f4f4b3          	and	s1,s1,a5
    3368:	40080793          	addi	a5,a6,1024
    336c:	7fe00713          	li	a4,2046
    3370:	0af74063          	blt	a4,a5,3410 <__divdf3+0x5c0>
    3374:	003ede93          	srli	t4,t4,0x3
    3378:	01d49713          	slli	a4,s1,0x1d
    337c:	01d76733          	or	a4,a4,t4
    3380:	0034d513          	srli	a0,s1,0x3
    3384:	7ff006b7          	lui	a3,0x7ff00
    3388:	01479793          	slli	a5,a5,0x14
    338c:	00c51513          	slli	a0,a0,0xc
    3390:	02c12083          	lw	ra,44(sp)
    3394:	02812403          	lw	s0,40(sp)
    3398:	00d7f7b3          	and	a5,a5,a3
    339c:	00c55513          	srli	a0,a0,0xc
    33a0:	00a7e7b3          	or	a5,a5,a0
    33a4:	01f61613          	slli	a2,a2,0x1f
    33a8:	00c7e6b3          	or	a3,a5,a2
    33ac:	02412483          	lw	s1,36(sp)
    33b0:	02012903          	lw	s2,32(sp)
    33b4:	01c12983          	lw	s3,28(sp)
    33b8:	01812a03          	lw	s4,24(sp)
    33bc:	01412a83          	lw	s5,20(sp)
    33c0:	01012b03          	lw	s6,16(sp)
    33c4:	00c12b83          	lw	s7,12(sp)
    33c8:	00812c03          	lw	s8,8(sp)
    33cc:	00070513          	mv	a0,a4
    33d0:	00068593          	mv	a1,a3
    33d4:	03010113          	addi	sp,sp,48
    33d8:	00008067          	ret
    33dc:	fff80813          	addi	a6,a6,-1
    33e0:	00000f13          	li	t5,0
    33e4:	cb9ff06f          	j	309c <__divdf3+0x24c>
    33e8:	00098613          	mv	a2,s3
    33ec:	000a8493          	mv	s1,s5
    33f0:	00040e93          	mv	t4,s0
    33f4:	000b8713          	mv	a4,s7
    33f8:	00300793          	li	a5,3
    33fc:	10f70063          	beq	a4,a5,34fc <__divdf3+0x6ac>
    3400:	00100793          	li	a5,1
    3404:	0ef70663          	beq	a4,a5,34f0 <__divdf3+0x6a0>
    3408:	00200793          	li	a5,2
    340c:	f0f71ce3          	bne	a4,a5,3324 <__divdf3+0x4d4>
    3410:	00000513          	li	a0,0
    3414:	00000713          	li	a4,0
    3418:	7ff00793          	li	a5,2047
    341c:	f69ff06f          	j	3384 <__divdf3+0x534>
    3420:	000c0613          	mv	a2,s8
    3424:	fd5ff06f          	j	33f8 <__divdf3+0x5a8>
    3428:	000804b7          	lui	s1,0x80
    342c:	00000e93          	li	t4,0
    3430:	00000613          	li	a2,0
    3434:	00300713          	li	a4,3
    3438:	fc1ff06f          	j	33f8 <__divdf3+0x5a8>
    343c:	00100513          	li	a0,1
    3440:	40f50533          	sub	a0,a0,a5
    3444:	03800713          	li	a4,56
    3448:	0aa74463          	blt	a4,a0,34f0 <__divdf3+0x6a0>
    344c:	01f00713          	li	a4,31
    3450:	06a74663          	blt	a4,a0,34bc <__divdf3+0x66c>
    3454:	41e80813          	addi	a6,a6,1054
    3458:	010497b3          	sll	a5,s1,a6
    345c:	00aed733          	srl	a4,t4,a0
    3460:	010e9833          	sll	a6,t4,a6
    3464:	00e7e7b3          	or	a5,a5,a4
    3468:	01003833          	snez	a6,a6
    346c:	0107e7b3          	or	a5,a5,a6
    3470:	00a4d533          	srl	a0,s1,a0
    3474:	0077f713          	andi	a4,a5,7
    3478:	02070063          	beqz	a4,3498 <__divdf3+0x648>
    347c:	00f7f713          	andi	a4,a5,15
    3480:	00400693          	li	a3,4
    3484:	00d70a63          	beq	a4,a3,3498 <__divdf3+0x648>
    3488:	00478713          	addi	a4,a5,4
    348c:	00f737b3          	sltu	a5,a4,a5
    3490:	00f50533          	add	a0,a0,a5
    3494:	00070793          	mv	a5,a4
    3498:	00800737          	lui	a4,0x800
    349c:	00e57733          	and	a4,a0,a4
    34a0:	06071863          	bnez	a4,3510 <__divdf3+0x6c0>
    34a4:	01d51713          	slli	a4,a0,0x1d
    34a8:	0037d793          	srli	a5,a5,0x3
    34ac:	00f76733          	or	a4,a4,a5
    34b0:	00355513          	srli	a0,a0,0x3
    34b4:	00000793          	li	a5,0
    34b8:	ecdff06f          	j	3384 <__divdf3+0x534>
    34bc:	fe100713          	li	a4,-31
    34c0:	40f707b3          	sub	a5,a4,a5
    34c4:	02000693          	li	a3,32
    34c8:	00f4d7b3          	srl	a5,s1,a5
    34cc:	00000713          	li	a4,0
    34d0:	00d50663          	beq	a0,a3,34dc <__divdf3+0x68c>
    34d4:	43e80713          	addi	a4,a6,1086
    34d8:	00e49733          	sll	a4,s1,a4
    34dc:	01d76733          	or	a4,a4,t4
    34e0:	00e03733          	snez	a4,a4
    34e4:	00e7e7b3          	or	a5,a5,a4
    34e8:	00000513          	li	a0,0
    34ec:	f89ff06f          	j	3474 <__divdf3+0x624>
    34f0:	00000513          	li	a0,0
    34f4:	00000713          	li	a4,0
    34f8:	fbdff06f          	j	34b4 <__divdf3+0x664>
    34fc:	00080537          	lui	a0,0x80
    3500:	00000713          	li	a4,0
    3504:	7ff00793          	li	a5,2047
    3508:	00000613          	li	a2,0
    350c:	e79ff06f          	j	3384 <__divdf3+0x534>
    3510:	00000513          	li	a0,0
    3514:	00000713          	li	a4,0
    3518:	00100793          	li	a5,1
    351c:	e69ff06f          	j	3384 <__divdf3+0x534>
    3520:	000e8793          	mv	a5,t4
    3524:	00078e93          	mv	t4,a5
    3528:	df9ff06f          	j	3320 <__divdf3+0x4d0>

0000352c <__eqdf2>:
    352c:	0145d713          	srli	a4,a1,0x14
    3530:	001007b7          	lui	a5,0x100
    3534:	fff78793          	addi	a5,a5,-1 # fffff <__bss_start+0xcffff>
    3538:	0146d813          	srli	a6,a3,0x14
    353c:	00050313          	mv	t1,a0
    3540:	00050e93          	mv	t4,a0
    3544:	7ff77713          	andi	a4,a4,2047
    3548:	7ff00513          	li	a0,2047
    354c:	00b7f8b3          	and	a7,a5,a1
    3550:	00060f13          	mv	t5,a2
    3554:	00d7f7b3          	and	a5,a5,a3
    3558:	01f5d593          	srli	a1,a1,0x1f
    355c:	7ff87813          	andi	a6,a6,2047
    3560:	01f6d693          	srli	a3,a3,0x1f
    3564:	00a71c63          	bne	a4,a0,357c <__eqdf2+0x50>
    3568:	0068ee33          	or	t3,a7,t1
    356c:	00100513          	li	a0,1
    3570:	000e1463          	bnez	t3,3578 <__eqdf2+0x4c>
    3574:	00e80663          	beq	a6,a4,3580 <__eqdf2+0x54>
    3578:	00008067          	ret
    357c:	00a81863          	bne	a6,a0,358c <__eqdf2+0x60>
    3580:	00c7e633          	or	a2,a5,a2
    3584:	00100513          	li	a0,1
    3588:	fe0618e3          	bnez	a2,3578 <__eqdf2+0x4c>
    358c:	00100513          	li	a0,1
    3590:	ff0714e3          	bne	a4,a6,3578 <__eqdf2+0x4c>
    3594:	fef892e3          	bne	a7,a5,3578 <__eqdf2+0x4c>
    3598:	ffee90e3          	bne	t4,t5,3578 <__eqdf2+0x4c>
    359c:	00d58a63          	beq	a1,a3,35b0 <__eqdf2+0x84>
    35a0:	fc071ce3          	bnez	a4,3578 <__eqdf2+0x4c>
    35a4:	0068e8b3          	or	a7,a7,t1
    35a8:	01103533          	snez	a0,a7
    35ac:	00008067          	ret
    35b0:	00000513          	li	a0,0
    35b4:	00008067          	ret

000035b8 <__gedf2>:
    35b8:	00100737          	lui	a4,0x100
    35bc:	fff70713          	addi	a4,a4,-1 # fffff <__bss_start+0xcffff>
    35c0:	0145d813          	srli	a6,a1,0x14
    35c4:	00b778b3          	and	a7,a4,a1
    35c8:	00050793          	mv	a5,a0
    35cc:	00050313          	mv	t1,a0
    35d0:	7ff87813          	andi	a6,a6,2047
    35d4:	01f5d513          	srli	a0,a1,0x1f
    35d8:	7ff00e93          	li	t4,2047
    35dc:	0146d593          	srli	a1,a3,0x14
    35e0:	00d77733          	and	a4,a4,a3
    35e4:	00060e13          	mv	t3,a2
    35e8:	7ff5f593          	andi	a1,a1,2047
    35ec:	01f6d693          	srli	a3,a3,0x1f
    35f0:	01d81a63          	bne	a6,t4,3604 <__gedf2+0x4c>
    35f4:	00f8eeb3          	or	t4,a7,a5
    35f8:	080e8a63          	beqz	t4,368c <__gedf2+0xd4>
    35fc:	ffe00513          	li	a0,-2
    3600:	00008067          	ret
    3604:	01d59663          	bne	a1,t4,3610 <__gedf2+0x58>
    3608:	00c76eb3          	or	t4,a4,a2
    360c:	fe0e98e3          	bnez	t4,35fc <__gedf2+0x44>
    3610:	08081063          	bnez	a6,3690 <__gedf2+0xd8>
    3614:	00f8e7b3          	or	a5,a7,a5
    3618:	0017b793          	seqz	a5,a5
    361c:	00059663          	bnez	a1,3628 <__gedf2+0x70>
    3620:	00c76633          	or	a2,a4,a2
    3624:	04060c63          	beqz	a2,367c <__gedf2+0xc4>
    3628:	00079c63          	bnez	a5,3640 <__gedf2+0x88>
    362c:	00d51463          	bne	a0,a3,3634 <__gedf2+0x7c>
    3630:	0305d063          	bge	a1,a6,3650 <__gedf2+0x98>
    3634:	04050063          	beqz	a0,3674 <__gedf2+0xbc>
    3638:	fff00513          	li	a0,-1
    363c:	00008067          	ret
    3640:	fff00513          	li	a0,-1
    3644:	00068a63          	beqz	a3,3658 <__gedf2+0xa0>
    3648:	00068513          	mv	a0,a3
    364c:	00008067          	ret
    3650:	00b85663          	bge	a6,a1,365c <__gedf2+0xa4>
    3654:	fe0502e3          	beqz	a0,3638 <__gedf2+0x80>
    3658:	00008067          	ret
    365c:	fd176ce3          	bltu	a4,a7,3634 <__gedf2+0x7c>
    3660:	02e89263          	bne	a7,a4,3684 <__gedf2+0xcc>
    3664:	fc6e68e3          	bltu	t3,t1,3634 <__gedf2+0x7c>
    3668:	ffc366e3          	bltu	t1,t3,3654 <__gedf2+0x9c>
    366c:	00000513          	li	a0,0
    3670:	00008067          	ret
    3674:	00100513          	li	a0,1
    3678:	00008067          	ret
    367c:	fe0798e3          	bnez	a5,366c <__gedf2+0xb4>
    3680:	fb5ff06f          	j	3634 <__gedf2+0x7c>
    3684:	fce8e8e3          	bltu	a7,a4,3654 <__gedf2+0x9c>
    3688:	fe5ff06f          	j	366c <__gedf2+0xb4>
    368c:	f7058ee3          	beq	a1,a6,3608 <__gedf2+0x50>
    3690:	f8059ee3          	bnez	a1,362c <__gedf2+0x74>
    3694:	00000793          	li	a5,0
    3698:	f89ff06f          	j	3620 <__gedf2+0x68>

0000369c <__ledf2>:
    369c:	00100737          	lui	a4,0x100
    36a0:	fff70713          	addi	a4,a4,-1 # fffff <__bss_start+0xcffff>
    36a4:	0145d813          	srli	a6,a1,0x14
    36a8:	00b778b3          	and	a7,a4,a1
    36ac:	00050793          	mv	a5,a0
    36b0:	00050313          	mv	t1,a0
    36b4:	7ff87813          	andi	a6,a6,2047
    36b8:	01f5d513          	srli	a0,a1,0x1f
    36bc:	7ff00e93          	li	t4,2047
    36c0:	0146d593          	srli	a1,a3,0x14
    36c4:	00d77733          	and	a4,a4,a3
    36c8:	00060e13          	mv	t3,a2
    36cc:	7ff5f593          	andi	a1,a1,2047
    36d0:	01f6d693          	srli	a3,a3,0x1f
    36d4:	01d81a63          	bne	a6,t4,36e8 <__ledf2+0x4c>
    36d8:	00f8eeb3          	or	t4,a7,a5
    36dc:	080e8a63          	beqz	t4,3770 <__ledf2+0xd4>
    36e0:	00200513          	li	a0,2
    36e4:	00008067          	ret
    36e8:	01d59663          	bne	a1,t4,36f4 <__ledf2+0x58>
    36ec:	00c76eb3          	or	t4,a4,a2
    36f0:	fe0e98e3          	bnez	t4,36e0 <__ledf2+0x44>
    36f4:	08081063          	bnez	a6,3774 <__ledf2+0xd8>
    36f8:	00f8e7b3          	or	a5,a7,a5
    36fc:	0017b793          	seqz	a5,a5
    3700:	00059663          	bnez	a1,370c <__ledf2+0x70>
    3704:	00c76633          	or	a2,a4,a2
    3708:	04060c63          	beqz	a2,3760 <__ledf2+0xc4>
    370c:	00079c63          	bnez	a5,3724 <__ledf2+0x88>
    3710:	00d51463          	bne	a0,a3,3718 <__ledf2+0x7c>
    3714:	0305d063          	bge	a1,a6,3734 <__ledf2+0x98>
    3718:	04050063          	beqz	a0,3758 <__ledf2+0xbc>
    371c:	fff00513          	li	a0,-1
    3720:	00008067          	ret
    3724:	fff00513          	li	a0,-1
    3728:	00068a63          	beqz	a3,373c <__ledf2+0xa0>
    372c:	00068513          	mv	a0,a3
    3730:	00008067          	ret
    3734:	00b85663          	bge	a6,a1,3740 <__ledf2+0xa4>
    3738:	fe0502e3          	beqz	a0,371c <__ledf2+0x80>
    373c:	00008067          	ret
    3740:	fd176ce3          	bltu	a4,a7,3718 <__ledf2+0x7c>
    3744:	02e89263          	bne	a7,a4,3768 <__ledf2+0xcc>
    3748:	fc6e68e3          	bltu	t3,t1,3718 <__ledf2+0x7c>
    374c:	ffc366e3          	bltu	t1,t3,3738 <__ledf2+0x9c>
    3750:	00000513          	li	a0,0
    3754:	00008067          	ret
    3758:	00100513          	li	a0,1
    375c:	00008067          	ret
    3760:	fe0798e3          	bnez	a5,3750 <__ledf2+0xb4>
    3764:	fb5ff06f          	j	3718 <__ledf2+0x7c>
    3768:	fce8e8e3          	bltu	a7,a4,3738 <__ledf2+0x9c>
    376c:	fe5ff06f          	j	3750 <__ledf2+0xb4>
    3770:	f7058ee3          	beq	a1,a6,36ec <__ledf2+0x50>
    3774:	f8059ee3          	bnez	a1,3710 <__ledf2+0x74>
    3778:	00000793          	li	a5,0
    377c:	f89ff06f          	j	3704 <__ledf2+0x68>

00003780 <__muldf3>:
    3780:	fd010113          	addi	sp,sp,-48
    3784:	01312e23          	sw	s3,28(sp)
    3788:	0145d993          	srli	s3,a1,0x14
    378c:	02812423          	sw	s0,40(sp)
    3790:	02912223          	sw	s1,36(sp)
    3794:	01412c23          	sw	s4,24(sp)
    3798:	01512a23          	sw	s5,20(sp)
    379c:	01712623          	sw	s7,12(sp)
    37a0:	00c59493          	slli	s1,a1,0xc
    37a4:	02112623          	sw	ra,44(sp)
    37a8:	03212023          	sw	s2,32(sp)
    37ac:	01612823          	sw	s6,16(sp)
    37b0:	7ff9f993          	andi	s3,s3,2047
    37b4:	00050413          	mv	s0,a0
    37b8:	00060b93          	mv	s7,a2
    37bc:	00068a93          	mv	s5,a3
    37c0:	00c4d493          	srli	s1,s1,0xc
    37c4:	01f5da13          	srli	s4,a1,0x1f
    37c8:	30098863          	beqz	s3,3ad8 <__muldf3+0x358>
    37cc:	7ff00793          	li	a5,2047
    37d0:	36f98663          	beq	s3,a5,3b3c <__muldf3+0x3bc>
    37d4:	00349493          	slli	s1,s1,0x3
    37d8:	01d55793          	srli	a5,a0,0x1d
    37dc:	0097e7b3          	or	a5,a5,s1
    37e0:	008004b7          	lui	s1,0x800
    37e4:	0097e4b3          	or	s1,a5,s1
    37e8:	00351913          	slli	s2,a0,0x3
    37ec:	c0198993          	addi	s3,s3,-1023
    37f0:	00000b13          	li	s6,0
    37f4:	014ad713          	srli	a4,s5,0x14
    37f8:	00ca9413          	slli	s0,s5,0xc
    37fc:	7ff77713          	andi	a4,a4,2047
    3800:	00c45413          	srli	s0,s0,0xc
    3804:	01fada93          	srli	s5,s5,0x1f
    3808:	36070663          	beqz	a4,3b74 <__muldf3+0x3f4>
    380c:	7ff00793          	li	a5,2047
    3810:	3cf70663          	beq	a4,a5,3bdc <__muldf3+0x45c>
    3814:	00341413          	slli	s0,s0,0x3
    3818:	01dbd793          	srli	a5,s7,0x1d
    381c:	0087e7b3          	or	a5,a5,s0
    3820:	00800437          	lui	s0,0x800
    3824:	0087e433          	or	s0,a5,s0
    3828:	c0170713          	addi	a4,a4,-1023
    382c:	003b9793          	slli	a5,s7,0x3
    3830:	00000513          	li	a0,0
    3834:	00e989b3          	add	s3,s3,a4
    3838:	002b1713          	slli	a4,s6,0x2
    383c:	00a76733          	or	a4,a4,a0
    3840:	00a00693          	li	a3,10
    3844:	015a4633          	xor	a2,s4,s5
    3848:	00198593          	addi	a1,s3,1
    384c:	40e6c863          	blt	a3,a4,3c5c <__muldf3+0x4dc>
    3850:	00200693          	li	a3,2
    3854:	3ce6c063          	blt	a3,a4,3c14 <__muldf3+0x494>
    3858:	fff70713          	addi	a4,a4,-1
    385c:	00100693          	li	a3,1
    3860:	3ce6fc63          	bgeu	a3,a4,3c38 <__muldf3+0x4b8>
    3864:	00010e37          	lui	t3,0x10
    3868:	fffe0313          	addi	t1,t3,-1 # ffff <__clzsi2+0xb85f>
    386c:	01095813          	srli	a6,s2,0x10
    3870:	0107d513          	srli	a0,a5,0x10
    3874:	00697933          	and	s2,s2,t1
    3878:	0067feb3          	and	t4,a5,t1
    387c:	03d907b3          	mul	a5,s2,t4
    3880:	03d80f33          	mul	t5,a6,t4
    3884:	0107d713          	srli	a4,a5,0x10
    3888:	032506b3          	mul	a3,a0,s2
    388c:	01e686b3          	add	a3,a3,t5
    3890:	00d70733          	add	a4,a4,a3
    3894:	02a808b3          	mul	a7,a6,a0
    3898:	01e77463          	bgeu	a4,t5,38a0 <__muldf3+0x120>
    389c:	01c888b3          	add	a7,a7,t3
    38a0:	006776b3          	and	a3,a4,t1
    38a4:	0067f7b3          	and	a5,a5,t1
    38a8:	01069693          	slli	a3,a3,0x10
    38ac:	00647e33          	and	t3,s0,t1
    38b0:	00f686b3          	add	a3,a3,a5
    38b4:	01045793          	srli	a5,s0,0x10
    38b8:	01075293          	srli	t0,a4,0x10
    38bc:	03c90f33          	mul	t5,s2,t3
    38c0:	03c80333          	mul	t1,a6,t3
    38c4:	010f5713          	srli	a4,t5,0x10
    38c8:	03278933          	mul	s2,a5,s2
    38cc:	00690933          	add	s2,s2,t1
    38d0:	01270733          	add	a4,a4,s2
    38d4:	02f80833          	mul	a6,a6,a5
    38d8:	00677663          	bgeu	a4,t1,38e4 <__muldf3+0x164>
    38dc:	00010337          	lui	t1,0x10
    38e0:	00680833          	add	a6,a6,t1
    38e4:	00010937          	lui	s2,0x10
    38e8:	fff90f93          	addi	t6,s2,-1 # ffff <__clzsi2+0xb85f>
    38ec:	01075313          	srli	t1,a4,0x10
    38f0:	01ff7f33          	and	t5,t5,t6
    38f4:	01f77733          	and	a4,a4,t6
    38f8:	0104d413          	srli	s0,s1,0x10
    38fc:	01f4ffb3          	and	t6,s1,t6
    3900:	03fe83b3          	mul	t2,t4,t6
    3904:	01030333          	add	t1,t1,a6
    3908:	01071713          	slli	a4,a4,0x10
    390c:	01e70f33          	add	t5,a4,t5
    3910:	01e282b3          	add	t0,t0,t5
    3914:	03d40833          	mul	a6,s0,t4
    3918:	0103d713          	srli	a4,t2,0x10
    391c:	028504b3          	mul	s1,a0,s0
    3920:	03f50533          	mul	a0,a0,t6
    3924:	01050533          	add	a0,a0,a6
    3928:	00a70733          	add	a4,a4,a0
    392c:	01077463          	bgeu	a4,a6,3934 <__muldf3+0x1b4>
    3930:	012484b3          	add	s1,s1,s2
    3934:	01075e93          	srli	t4,a4,0x10
    3938:	009e8eb3          	add	t4,t4,s1
    393c:	000104b7          	lui	s1,0x10
    3940:	fff48513          	addi	a0,s1,-1 # ffff <__clzsi2+0xb85f>
    3944:	00a77733          	and	a4,a4,a0
    3948:	00a3f3b3          	and	t2,t2,a0
    394c:	01071713          	slli	a4,a4,0x10
    3950:	03c40533          	mul	a0,s0,t3
    3954:	00770733          	add	a4,a4,t2
    3958:	02878833          	mul	a6,a5,s0
    395c:	03fe03b3          	mul	t2,t3,t6
    3960:	03f787b3          	mul	a5,a5,t6
    3964:	0103df93          	srli	t6,t2,0x10
    3968:	00a787b3          	add	a5,a5,a0
    396c:	00ff8fb3          	add	t6,t6,a5
    3970:	00aff463          	bgeu	t6,a0,3978 <__muldf3+0x1f8>
    3974:	00980833          	add	a6,a6,s1
    3978:	00010537          	lui	a0,0x10
    397c:	fff50513          	addi	a0,a0,-1 # ffff <__clzsi2+0xb85f>
    3980:	00aff7b3          	and	a5,t6,a0
    3984:	00a3f3b3          	and	t2,t2,a0
    3988:	01079793          	slli	a5,a5,0x10
    398c:	005888b3          	add	a7,a7,t0
    3990:	007787b3          	add	a5,a5,t2
    3994:	01e8bf33          	sltu	t5,a7,t5
    3998:	006787b3          	add	a5,a5,t1
    399c:	01e782b3          	add	t0,a5,t5
    39a0:	00e888b3          	add	a7,a7,a4
    39a4:	00e8b733          	sltu	a4,a7,a4
    39a8:	01d28533          	add	a0,t0,t4
    39ac:	00e50e33          	add	t3,a0,a4
    39b0:	0067b433          	sltu	s0,a5,t1
    39b4:	01e2b2b3          	sltu	t0,t0,t5
    39b8:	010fd793          	srli	a5,t6,0x10
    39bc:	00ee3733          	sltu	a4,t3,a4
    39c0:	00546433          	or	s0,s0,t0
    39c4:	01d53533          	sltu	a0,a0,t4
    39c8:	00f40433          	add	s0,s0,a5
    39cc:	00e56533          	or	a0,a0,a4
    39d0:	00a40433          	add	s0,s0,a0
    39d4:	01040433          	add	s0,s0,a6
    39d8:	017e5793          	srli	a5,t3,0x17
    39dc:	00941413          	slli	s0,s0,0x9
    39e0:	00f46433          	or	s0,s0,a5
    39e4:	00989793          	slli	a5,a7,0x9
    39e8:	00d7e7b3          	or	a5,a5,a3
    39ec:	00f037b3          	snez	a5,a5
    39f0:	0178d893          	srli	a7,a7,0x17
    39f4:	009e1713          	slli	a4,t3,0x9
    39f8:	0117e7b3          	or	a5,a5,a7
    39fc:	00e7e7b3          	or	a5,a5,a4
    3a00:	01000737          	lui	a4,0x1000
    3a04:	00e47733          	and	a4,s0,a4
    3a08:	28070663          	beqz	a4,3c94 <__muldf3+0x514>
    3a0c:	0017d713          	srli	a4,a5,0x1
    3a10:	0017f793          	andi	a5,a5,1
    3a14:	00f76733          	or	a4,a4,a5
    3a18:	01f41793          	slli	a5,s0,0x1f
    3a1c:	00f767b3          	or	a5,a4,a5
    3a20:	00145413          	srli	s0,s0,0x1
    3a24:	3ff58693          	addi	a3,a1,1023 # 8003ff <__bss_start+0x7d03ff>
    3a28:	26d05a63          	blez	a3,3c9c <__muldf3+0x51c>
    3a2c:	0077f713          	andi	a4,a5,7
    3a30:	02070063          	beqz	a4,3a50 <__muldf3+0x2d0>
    3a34:	00f7f713          	andi	a4,a5,15
    3a38:	00400513          	li	a0,4
    3a3c:	00a70a63          	beq	a4,a0,3a50 <__muldf3+0x2d0>
    3a40:	00478713          	addi	a4,a5,4
    3a44:	00f737b3          	sltu	a5,a4,a5
    3a48:	00f40433          	add	s0,s0,a5
    3a4c:	00070793          	mv	a5,a4
    3a50:	01000737          	lui	a4,0x1000
    3a54:	00e47733          	and	a4,s0,a4
    3a58:	00070a63          	beqz	a4,3a6c <__muldf3+0x2ec>
    3a5c:	ff000737          	lui	a4,0xff000
    3a60:	fff70713          	addi	a4,a4,-1 # feffffff <__bss_start+0xfefcffff>
    3a64:	00e47433          	and	s0,s0,a4
    3a68:	40058693          	addi	a3,a1,1024
    3a6c:	7fe00713          	li	a4,2046
    3a70:	2ed74e63          	blt	a4,a3,3d6c <__muldf3+0x5ec>
    3a74:	01d41713          	slli	a4,s0,0x1d
    3a78:	0037d793          	srli	a5,a5,0x3
    3a7c:	00f76733          	or	a4,a4,a5
    3a80:	00345413          	srli	s0,s0,0x3
    3a84:	7ff007b7          	lui	a5,0x7ff00
    3a88:	01469693          	slli	a3,a3,0x14
    3a8c:	00c41413          	slli	s0,s0,0xc
    3a90:	00f6f6b3          	and	a3,a3,a5
    3a94:	00c45413          	srli	s0,s0,0xc
    3a98:	02c12083          	lw	ra,44(sp)
    3a9c:	0086e6b3          	or	a3,a3,s0
    3aa0:	02812403          	lw	s0,40(sp)
    3aa4:	01f61613          	slli	a2,a2,0x1f
    3aa8:	00c6e7b3          	or	a5,a3,a2
    3aac:	02412483          	lw	s1,36(sp)
    3ab0:	02012903          	lw	s2,32(sp)
    3ab4:	01c12983          	lw	s3,28(sp)
    3ab8:	01812a03          	lw	s4,24(sp)
    3abc:	01412a83          	lw	s5,20(sp)
    3ac0:	01012b03          	lw	s6,16(sp)
    3ac4:	00c12b83          	lw	s7,12(sp)
    3ac8:	00070513          	mv	a0,a4
    3acc:	00078593          	mv	a1,a5
    3ad0:	03010113          	addi	sp,sp,48
    3ad4:	00008067          	ret
    3ad8:	00a4e933          	or	s2,s1,a0
    3adc:	06090c63          	beqz	s2,3b54 <__muldf3+0x3d4>
    3ae0:	04048063          	beqz	s1,3b20 <__muldf3+0x3a0>
    3ae4:	00048513          	mv	a0,s1
    3ae8:	4b9000ef          	jal	ra,47a0 <__clzsi2>
    3aec:	ff550713          	addi	a4,a0,-11
    3af0:	01c00793          	li	a5,28
    3af4:	02e7cc63          	blt	a5,a4,3b2c <__muldf3+0x3ac>
    3af8:	01d00793          	li	a5,29
    3afc:	ff850913          	addi	s2,a0,-8
    3b00:	40e787b3          	sub	a5,a5,a4
    3b04:	012494b3          	sll	s1,s1,s2
    3b08:	00f457b3          	srl	a5,s0,a5
    3b0c:	0097e4b3          	or	s1,a5,s1
    3b10:	01241933          	sll	s2,s0,s2
    3b14:	c0d00993          	li	s3,-1011
    3b18:	40a989b3          	sub	s3,s3,a0
    3b1c:	cd5ff06f          	j	37f0 <__muldf3+0x70>
    3b20:	481000ef          	jal	ra,47a0 <__clzsi2>
    3b24:	02050513          	addi	a0,a0,32
    3b28:	fc5ff06f          	j	3aec <__muldf3+0x36c>
    3b2c:	fd850493          	addi	s1,a0,-40
    3b30:	009414b3          	sll	s1,s0,s1
    3b34:	00000913          	li	s2,0
    3b38:	fddff06f          	j	3b14 <__muldf3+0x394>
    3b3c:	00a4e933          	or	s2,s1,a0
    3b40:	02090263          	beqz	s2,3b64 <__muldf3+0x3e4>
    3b44:	00050913          	mv	s2,a0
    3b48:	7ff00993          	li	s3,2047
    3b4c:	00300b13          	li	s6,3
    3b50:	ca5ff06f          	j	37f4 <__muldf3+0x74>
    3b54:	00000493          	li	s1,0
    3b58:	00000993          	li	s3,0
    3b5c:	00100b13          	li	s6,1
    3b60:	c95ff06f          	j	37f4 <__muldf3+0x74>
    3b64:	00000493          	li	s1,0
    3b68:	7ff00993          	li	s3,2047
    3b6c:	00200b13          	li	s6,2
    3b70:	c85ff06f          	j	37f4 <__muldf3+0x74>
    3b74:	017467b3          	or	a5,s0,s7
    3b78:	06078e63          	beqz	a5,3bf4 <__muldf3+0x474>
    3b7c:	04040063          	beqz	s0,3bbc <__muldf3+0x43c>
    3b80:	00040513          	mv	a0,s0
    3b84:	41d000ef          	jal	ra,47a0 <__clzsi2>
    3b88:	ff550693          	addi	a3,a0,-11
    3b8c:	01c00793          	li	a5,28
    3b90:	02d7ce63          	blt	a5,a3,3bcc <__muldf3+0x44c>
    3b94:	01d00713          	li	a4,29
    3b98:	ff850793          	addi	a5,a0,-8
    3b9c:	40d70733          	sub	a4,a4,a3
    3ba0:	00f41433          	sll	s0,s0,a5
    3ba4:	00ebd733          	srl	a4,s7,a4
    3ba8:	00876433          	or	s0,a4,s0
    3bac:	00fb97b3          	sll	a5,s7,a5
    3bb0:	c0d00713          	li	a4,-1011
    3bb4:	40a70733          	sub	a4,a4,a0
    3bb8:	c79ff06f          	j	3830 <__muldf3+0xb0>
    3bbc:	000b8513          	mv	a0,s7
    3bc0:	3e1000ef          	jal	ra,47a0 <__clzsi2>
    3bc4:	02050513          	addi	a0,a0,32
    3bc8:	fc1ff06f          	j	3b88 <__muldf3+0x408>
    3bcc:	fd850413          	addi	s0,a0,-40
    3bd0:	008b9433          	sll	s0,s7,s0
    3bd4:	00000793          	li	a5,0
    3bd8:	fd9ff06f          	j	3bb0 <__muldf3+0x430>
    3bdc:	017467b3          	or	a5,s0,s7
    3be0:	02078263          	beqz	a5,3c04 <__muldf3+0x484>
    3be4:	000b8793          	mv	a5,s7
    3be8:	7ff00713          	li	a4,2047
    3bec:	00300513          	li	a0,3
    3bf0:	c45ff06f          	j	3834 <__muldf3+0xb4>
    3bf4:	00000413          	li	s0,0
    3bf8:	00000713          	li	a4,0
    3bfc:	00100513          	li	a0,1
    3c00:	c35ff06f          	j	3834 <__muldf3+0xb4>
    3c04:	00000413          	li	s0,0
    3c08:	7ff00713          	li	a4,2047
    3c0c:	00200513          	li	a0,2
    3c10:	c25ff06f          	j	3834 <__muldf3+0xb4>
    3c14:	00100693          	li	a3,1
    3c18:	00e696b3          	sll	a3,a3,a4
    3c1c:	5306f713          	andi	a4,a3,1328
    3c20:	04071863          	bnez	a4,3c70 <__muldf3+0x4f0>
    3c24:	2406f813          	andi	a6,a3,576
    3c28:	12081463          	bnez	a6,3d50 <__muldf3+0x5d0>
    3c2c:	0886f693          	andi	a3,a3,136
    3c30:	c2068ae3          	beqz	a3,3864 <__muldf3+0xe4>
    3c34:	000a8613          	mv	a2,s5
    3c38:	00200713          	li	a4,2
    3c3c:	12e50863          	beq	a0,a4,3d6c <__muldf3+0x5ec>
    3c40:	00300713          	li	a4,3
    3c44:	10e50e63          	beq	a0,a4,3d60 <__muldf3+0x5e0>
    3c48:	00100713          	li	a4,1
    3c4c:	dce51ce3          	bne	a0,a4,3a24 <__muldf3+0x2a4>
    3c50:	00000413          	li	s0,0
    3c54:	00000713          	li	a4,0
    3c58:	0bc0006f          	j	3d14 <__muldf3+0x594>
    3c5c:	00f00693          	li	a3,15
    3c60:	02d70063          	beq	a4,a3,3c80 <__muldf3+0x500>
    3c64:	00b00693          	li	a3,11
    3c68:	fcd706e3          	beq	a4,a3,3c34 <__muldf3+0x4b4>
    3c6c:	000a0613          	mv	a2,s4
    3c70:	00048413          	mv	s0,s1
    3c74:	00090793          	mv	a5,s2
    3c78:	000b0513          	mv	a0,s6
    3c7c:	fbdff06f          	j	3c38 <__muldf3+0x4b8>
    3c80:	00080437          	lui	s0,0x80
    3c84:	00000793          	li	a5,0
    3c88:	00000613          	li	a2,0
    3c8c:	00300513          	li	a0,3
    3c90:	fb1ff06f          	j	3c40 <__muldf3+0x4c0>
    3c94:	00098593          	mv	a1,s3
    3c98:	d8dff06f          	j	3a24 <__muldf3+0x2a4>
    3c9c:	00100513          	li	a0,1
    3ca0:	40d50533          	sub	a0,a0,a3
    3ca4:	03800713          	li	a4,56
    3ca8:	faa744e3          	blt	a4,a0,3c50 <__muldf3+0x4d0>
    3cac:	01f00713          	li	a4,31
    3cb0:	06a74663          	blt	a4,a0,3d1c <__muldf3+0x59c>
    3cb4:	41e58593          	addi	a1,a1,1054
    3cb8:	00b41733          	sll	a4,s0,a1
    3cbc:	00a7d6b3          	srl	a3,a5,a0
    3cc0:	00b795b3          	sll	a1,a5,a1
    3cc4:	00d76733          	or	a4,a4,a3
    3cc8:	00b035b3          	snez	a1,a1
    3ccc:	00b767b3          	or	a5,a4,a1
    3cd0:	00a45433          	srl	s0,s0,a0
    3cd4:	0077f713          	andi	a4,a5,7
    3cd8:	02070063          	beqz	a4,3cf8 <__muldf3+0x578>
    3cdc:	00f7f713          	andi	a4,a5,15
    3ce0:	00400693          	li	a3,4
    3ce4:	00d70a63          	beq	a4,a3,3cf8 <__muldf3+0x578>
    3ce8:	00478713          	addi	a4,a5,4 # 7ff00004 <__bss_start+0x7fed0004>
    3cec:	00f737b3          	sltu	a5,a4,a5
    3cf0:	00f40433          	add	s0,s0,a5
    3cf4:	00070793          	mv	a5,a4
    3cf8:	00800737          	lui	a4,0x800
    3cfc:	00e47733          	and	a4,s0,a4
    3d00:	06071e63          	bnez	a4,3d7c <__muldf3+0x5fc>
    3d04:	01d41713          	slli	a4,s0,0x1d
    3d08:	0037d793          	srli	a5,a5,0x3
    3d0c:	00f76733          	or	a4,a4,a5
    3d10:	00345413          	srli	s0,s0,0x3
    3d14:	00000693          	li	a3,0
    3d18:	d6dff06f          	j	3a84 <__muldf3+0x304>
    3d1c:	fe100713          	li	a4,-31
    3d20:	40d70733          	sub	a4,a4,a3
    3d24:	02000813          	li	a6,32
    3d28:	00e45733          	srl	a4,s0,a4
    3d2c:	00000693          	li	a3,0
    3d30:	01050663          	beq	a0,a6,3d3c <__muldf3+0x5bc>
    3d34:	43e58593          	addi	a1,a1,1086
    3d38:	00b416b3          	sll	a3,s0,a1
    3d3c:	00f6e6b3          	or	a3,a3,a5
    3d40:	00d036b3          	snez	a3,a3
    3d44:	00d767b3          	or	a5,a4,a3
    3d48:	00000413          	li	s0,0
    3d4c:	f89ff06f          	j	3cd4 <__muldf3+0x554>
    3d50:	00080437          	lui	s0,0x80
    3d54:	7ff00693          	li	a3,2047
    3d58:	00000613          	li	a2,0
    3d5c:	d29ff06f          	j	3a84 <__muldf3+0x304>
    3d60:	00080437          	lui	s0,0x80
    3d64:	00000713          	li	a4,0
    3d68:	fedff06f          	j	3d54 <__muldf3+0x5d4>
    3d6c:	00000413          	li	s0,0
    3d70:	00000713          	li	a4,0
    3d74:	7ff00693          	li	a3,2047
    3d78:	d0dff06f          	j	3a84 <__muldf3+0x304>
    3d7c:	00000413          	li	s0,0
    3d80:	00000713          	li	a4,0
    3d84:	00100693          	li	a3,1
    3d88:	cfdff06f          	j	3a84 <__muldf3+0x304>

00003d8c <__subdf3>:
    3d8c:	00100837          	lui	a6,0x100
    3d90:	fff80813          	addi	a6,a6,-1 # fffff <__bss_start+0xcffff>
    3d94:	fe010113          	addi	sp,sp,-32
    3d98:	00b878b3          	and	a7,a6,a1
    3d9c:	0145d713          	srli	a4,a1,0x14
    3da0:	01d55793          	srli	a5,a0,0x1d
    3da4:	00d87833          	and	a6,a6,a3
    3da8:	00812c23          	sw	s0,24(sp)
    3dac:	7ff77413          	andi	s0,a4,2047
    3db0:	00389713          	slli	a4,a7,0x3
    3db4:	0146d893          	srli	a7,a3,0x14
    3db8:	00912a23          	sw	s1,20(sp)
    3dbc:	00e7e7b3          	or	a5,a5,a4
    3dc0:	01f5d493          	srli	s1,a1,0x1f
    3dc4:	01d65713          	srli	a4,a2,0x1d
    3dc8:	00381813          	slli	a6,a6,0x3
    3dcc:	00112e23          	sw	ra,28(sp)
    3dd0:	01212823          	sw	s2,16(sp)
    3dd4:	01312623          	sw	s3,12(sp)
    3dd8:	7ff8f893          	andi	a7,a7,2047
    3ddc:	7ff00593          	li	a1,2047
    3de0:	00351513          	slli	a0,a0,0x3
    3de4:	01f6d693          	srli	a3,a3,0x1f
    3de8:	01076733          	or	a4,a4,a6
    3dec:	00361613          	slli	a2,a2,0x3
    3df0:	00b89663          	bne	a7,a1,3dfc <__subdf3+0x70>
    3df4:	00c765b3          	or	a1,a4,a2
    3df8:	00059463          	bnez	a1,3e00 <__subdf3+0x74>
    3dfc:	0016c693          	xori	a3,a3,1
    3e00:	41140833          	sub	a6,s0,a7
    3e04:	2c969863          	bne	a3,s1,40d4 <__subdf3+0x348>
    3e08:	13005063          	blez	a6,3f28 <__subdf3+0x19c>
    3e0c:	04089063          	bnez	a7,3e4c <__subdf3+0xc0>
    3e10:	00c766b3          	or	a3,a4,a2
    3e14:	70068e63          	beqz	a3,4530 <__subdf3+0x7a4>
    3e18:	fff80593          	addi	a1,a6,-1
    3e1c:	02059063          	bnez	a1,3e3c <__subdf3+0xb0>
    3e20:	00c50633          	add	a2,a0,a2
    3e24:	00e78733          	add	a4,a5,a4
    3e28:	00a637b3          	sltu	a5,a2,a0
    3e2c:	00f707b3          	add	a5,a4,a5
    3e30:	00060513          	mv	a0,a2
    3e34:	00100413          	li	s0,1
    3e38:	0700006f          	j	3ea8 <__subdf3+0x11c>
    3e3c:	7ff00693          	li	a3,2047
    3e40:	02d81063          	bne	a6,a3,3e60 <__subdf3+0xd4>
    3e44:	7ff00413          	li	s0,2047
    3e48:	2140006f          	j	405c <__subdf3+0x2d0>
    3e4c:	7ff00693          	li	a3,2047
    3e50:	20d40663          	beq	s0,a3,405c <__subdf3+0x2d0>
    3e54:	008006b7          	lui	a3,0x800
    3e58:	00d76733          	or	a4,a4,a3
    3e5c:	00080593          	mv	a1,a6
    3e60:	03800693          	li	a3,56
    3e64:	0ab6cc63          	blt	a3,a1,3f1c <__subdf3+0x190>
    3e68:	01f00693          	li	a3,31
    3e6c:	06b6ce63          	blt	a3,a1,3ee8 <__subdf3+0x15c>
    3e70:	02000813          	li	a6,32
    3e74:	40b80833          	sub	a6,a6,a1
    3e78:	010716b3          	sll	a3,a4,a6
    3e7c:	00b658b3          	srl	a7,a2,a1
    3e80:	01061833          	sll	a6,a2,a6
    3e84:	0116e6b3          	or	a3,a3,a7
    3e88:	01003833          	snez	a6,a6
    3e8c:	0106e6b3          	or	a3,a3,a6
    3e90:	00b755b3          	srl	a1,a4,a1
    3e94:	00a686b3          	add	a3,a3,a0
    3e98:	00f585b3          	add	a1,a1,a5
    3e9c:	00a6b7b3          	sltu	a5,a3,a0
    3ea0:	00f587b3          	add	a5,a1,a5
    3ea4:	00068513          	mv	a0,a3
    3ea8:	00800737          	lui	a4,0x800
    3eac:	00e7f733          	and	a4,a5,a4
    3eb0:	1a070663          	beqz	a4,405c <__subdf3+0x2d0>
    3eb4:	00140413          	addi	s0,s0,1 # 80001 <__bss_start+0x50001>
    3eb8:	7ff00713          	li	a4,2047
    3ebc:	5ce40a63          	beq	s0,a4,4490 <__subdf3+0x704>
    3ec0:	ff800737          	lui	a4,0xff800
    3ec4:	fff70713          	addi	a4,a4,-1 # ff7fffff <__bss_start+0xff7cffff>
    3ec8:	00e7f7b3          	and	a5,a5,a4
    3ecc:	00155713          	srli	a4,a0,0x1
    3ed0:	00157513          	andi	a0,a0,1
    3ed4:	00a76733          	or	a4,a4,a0
    3ed8:	01f79513          	slli	a0,a5,0x1f
    3edc:	00e56533          	or	a0,a0,a4
    3ee0:	0017d793          	srli	a5,a5,0x1
    3ee4:	1780006f          	j	405c <__subdf3+0x2d0>
    3ee8:	fe058693          	addi	a3,a1,-32
    3eec:	02000893          	li	a7,32
    3ef0:	00d756b3          	srl	a3,a4,a3
    3ef4:	00000813          	li	a6,0
    3ef8:	01158863          	beq	a1,a7,3f08 <__subdf3+0x17c>
    3efc:	04000813          	li	a6,64
    3f00:	40b80833          	sub	a6,a6,a1
    3f04:	01071833          	sll	a6,a4,a6
    3f08:	00c86833          	or	a6,a6,a2
    3f0c:	01003833          	snez	a6,a6
    3f10:	0106e6b3          	or	a3,a3,a6
    3f14:	00000593          	li	a1,0
    3f18:	f7dff06f          	j	3e94 <__subdf3+0x108>
    3f1c:	00c766b3          	or	a3,a4,a2
    3f20:	00d036b3          	snez	a3,a3
    3f24:	ff1ff06f          	j	3f14 <__subdf3+0x188>
    3f28:	0e080263          	beqz	a6,400c <__subdf3+0x280>
    3f2c:	408885b3          	sub	a1,a7,s0
    3f30:	02041e63          	bnez	s0,3f6c <__subdf3+0x1e0>
    3f34:	00a7e6b3          	or	a3,a5,a0
    3f38:	52068c63          	beqz	a3,4470 <__subdf3+0x6e4>
    3f3c:	fff58693          	addi	a3,a1,-1
    3f40:	00069c63          	bnez	a3,3f58 <__subdf3+0x1cc>
    3f44:	00c50533          	add	a0,a0,a2
    3f48:	00e78733          	add	a4,a5,a4
    3f4c:	00c53633          	sltu	a2,a0,a2
    3f50:	00c707b3          	add	a5,a4,a2
    3f54:	ee1ff06f          	j	3e34 <__subdf3+0xa8>
    3f58:	7ff00813          	li	a6,2047
    3f5c:	03059263          	bne	a1,a6,3f80 <__subdf3+0x1f4>
    3f60:	00070793          	mv	a5,a4
    3f64:	00060513          	mv	a0,a2
    3f68:	eddff06f          	j	3e44 <__subdf3+0xb8>
    3f6c:	7ff00693          	li	a3,2047
    3f70:	fed888e3          	beq	a7,a3,3f60 <__subdf3+0x1d4>
    3f74:	008006b7          	lui	a3,0x800
    3f78:	00d7e7b3          	or	a5,a5,a3
    3f7c:	00058693          	mv	a3,a1
    3f80:	03800593          	li	a1,56
    3f84:	06d5ce63          	blt	a1,a3,4000 <__subdf3+0x274>
    3f88:	01f00593          	li	a1,31
    3f8c:	04d5c063          	blt	a1,a3,3fcc <__subdf3+0x240>
    3f90:	02000813          	li	a6,32
    3f94:	40d80833          	sub	a6,a6,a3
    3f98:	010795b3          	sll	a1,a5,a6
    3f9c:	00d55333          	srl	t1,a0,a3
    3fa0:	01051833          	sll	a6,a0,a6
    3fa4:	0065e5b3          	or	a1,a1,t1
    3fa8:	01003833          	snez	a6,a6
    3fac:	0105e5b3          	or	a1,a1,a6
    3fb0:	00d7d6b3          	srl	a3,a5,a3
    3fb4:	00c58533          	add	a0,a1,a2
    3fb8:	00e686b3          	add	a3,a3,a4
    3fbc:	00c53633          	sltu	a2,a0,a2
    3fc0:	00c687b3          	add	a5,a3,a2
    3fc4:	00088413          	mv	s0,a7
    3fc8:	ee1ff06f          	j	3ea8 <__subdf3+0x11c>
    3fcc:	fe068593          	addi	a1,a3,-32 # 7fffe0 <__bss_start+0x7cffe0>
    3fd0:	02000313          	li	t1,32
    3fd4:	00b7d5b3          	srl	a1,a5,a1
    3fd8:	00000813          	li	a6,0
    3fdc:	00668863          	beq	a3,t1,3fec <__subdf3+0x260>
    3fe0:	04000813          	li	a6,64
    3fe4:	40d80833          	sub	a6,a6,a3
    3fe8:	01079833          	sll	a6,a5,a6
    3fec:	00a86833          	or	a6,a6,a0
    3ff0:	01003833          	snez	a6,a6
    3ff4:	0105e5b3          	or	a1,a1,a6
    3ff8:	00000693          	li	a3,0
    3ffc:	fb9ff06f          	j	3fb4 <__subdf3+0x228>
    4000:	00a7e5b3          	or	a1,a5,a0
    4004:	00b035b3          	snez	a1,a1
    4008:	ff1ff06f          	j	3ff8 <__subdf3+0x26c>
    400c:	00140693          	addi	a3,s0,1
    4010:	7fe6f593          	andi	a1,a3,2046
    4014:	08059863          	bnez	a1,40a4 <__subdf3+0x318>
    4018:	00a7e6b3          	or	a3,a5,a0
    401c:	06041463          	bnez	s0,4084 <__subdf3+0x2f8>
    4020:	46068063          	beqz	a3,4480 <__subdf3+0x6f4>
    4024:	00c766b3          	or	a3,a4,a2
    4028:	02068a63          	beqz	a3,405c <__subdf3+0x2d0>
    402c:	00c50633          	add	a2,a0,a2
    4030:	00e78733          	add	a4,a5,a4
    4034:	00a637b3          	sltu	a5,a2,a0
    4038:	00f707b3          	add	a5,a4,a5
    403c:	00800737          	lui	a4,0x800
    4040:	00e7f733          	and	a4,a5,a4
    4044:	00060513          	mv	a0,a2
    4048:	00070a63          	beqz	a4,405c <__subdf3+0x2d0>
    404c:	ff800737          	lui	a4,0xff800
    4050:	fff70713          	addi	a4,a4,-1 # ff7fffff <__bss_start+0xff7cffff>
    4054:	00e7f7b3          	and	a5,a5,a4
    4058:	00100413          	li	s0,1
    405c:	00757713          	andi	a4,a0,7
    4060:	42070c63          	beqz	a4,4498 <__subdf3+0x70c>
    4064:	00f57713          	andi	a4,a0,15
    4068:	00400693          	li	a3,4
    406c:	42d70663          	beq	a4,a3,4498 <__subdf3+0x70c>
    4070:	00450713          	addi	a4,a0,4
    4074:	00a73533          	sltu	a0,a4,a0
    4078:	00a787b3          	add	a5,a5,a0
    407c:	00070513          	mv	a0,a4
    4080:	4180006f          	j	4498 <__subdf3+0x70c>
    4084:	ec068ee3          	beqz	a3,3f60 <__subdf3+0x1d4>
    4088:	00c76733          	or	a4,a4,a2
    408c:	da070ce3          	beqz	a4,3e44 <__subdf3+0xb8>
    4090:	00000493          	li	s1,0
    4094:	004007b7          	lui	a5,0x400
    4098:	00000513          	li	a0,0
    409c:	7ff00413          	li	s0,2047
    40a0:	3f80006f          	j	4498 <__subdf3+0x70c>
    40a4:	7ff00593          	li	a1,2047
    40a8:	3eb68263          	beq	a3,a1,448c <__subdf3+0x700>
    40ac:	00c50633          	add	a2,a0,a2
    40b0:	00a63533          	sltu	a0,a2,a0
    40b4:	00e78733          	add	a4,a5,a4
    40b8:	00a70733          	add	a4,a4,a0
    40bc:	01f71513          	slli	a0,a4,0x1f
    40c0:	00165613          	srli	a2,a2,0x1
    40c4:	00c56533          	or	a0,a0,a2
    40c8:	00175793          	srli	a5,a4,0x1
    40cc:	00068413          	mv	s0,a3
    40d0:	f8dff06f          	j	405c <__subdf3+0x2d0>
    40d4:	0f005c63          	blez	a6,41cc <__subdf3+0x440>
    40d8:	08089e63          	bnez	a7,4174 <__subdf3+0x3e8>
    40dc:	00c766b3          	or	a3,a4,a2
    40e0:	44068863          	beqz	a3,4530 <__subdf3+0x7a4>
    40e4:	fff80593          	addi	a1,a6,-1
    40e8:	02059063          	bnez	a1,4108 <__subdf3+0x37c>
    40ec:	40c50633          	sub	a2,a0,a2
    40f0:	40e78733          	sub	a4,a5,a4
    40f4:	00c537b3          	sltu	a5,a0,a2
    40f8:	40f707b3          	sub	a5,a4,a5
    40fc:	00060513          	mv	a0,a2
    4100:	00100413          	li	s0,1
    4104:	0540006f          	j	4158 <__subdf3+0x3cc>
    4108:	7ff00693          	li	a3,2047
    410c:	d2d80ce3          	beq	a6,a3,3e44 <__subdf3+0xb8>
    4110:	03800693          	li	a3,56
    4114:	0ab6c663          	blt	a3,a1,41c0 <__subdf3+0x434>
    4118:	01f00693          	li	a3,31
    411c:	06b6c863          	blt	a3,a1,418c <__subdf3+0x400>
    4120:	02000813          	li	a6,32
    4124:	40b80833          	sub	a6,a6,a1
    4128:	010716b3          	sll	a3,a4,a6
    412c:	00b658b3          	srl	a7,a2,a1
    4130:	01061833          	sll	a6,a2,a6
    4134:	0116e6b3          	or	a3,a3,a7
    4138:	01003833          	snez	a6,a6
    413c:	0106e6b3          	or	a3,a3,a6
    4140:	00b755b3          	srl	a1,a4,a1
    4144:	40d506b3          	sub	a3,a0,a3
    4148:	40b785b3          	sub	a1,a5,a1
    414c:	00d537b3          	sltu	a5,a0,a3
    4150:	40f587b3          	sub	a5,a1,a5
    4154:	00068513          	mv	a0,a3
    4158:	00800937          	lui	s2,0x800
    415c:	0127f733          	and	a4,a5,s2
    4160:	ee070ee3          	beqz	a4,405c <__subdf3+0x2d0>
    4164:	fff90913          	addi	s2,s2,-1 # 7fffff <__bss_start+0x7cffff>
    4168:	0127f933          	and	s2,a5,s2
    416c:	00050993          	mv	s3,a0
    4170:	2140006f          	j	4384 <__subdf3+0x5f8>
    4174:	7ff00693          	li	a3,2047
    4178:	eed402e3          	beq	s0,a3,405c <__subdf3+0x2d0>
    417c:	008006b7          	lui	a3,0x800
    4180:	00d76733          	or	a4,a4,a3
    4184:	00080593          	mv	a1,a6
    4188:	f89ff06f          	j	4110 <__subdf3+0x384>
    418c:	fe058693          	addi	a3,a1,-32
    4190:	02000893          	li	a7,32
    4194:	00d756b3          	srl	a3,a4,a3
    4198:	00000813          	li	a6,0
    419c:	01158863          	beq	a1,a7,41ac <__subdf3+0x420>
    41a0:	04000813          	li	a6,64
    41a4:	40b80833          	sub	a6,a6,a1
    41a8:	01071833          	sll	a6,a4,a6
    41ac:	00c86833          	or	a6,a6,a2
    41b0:	01003833          	snez	a6,a6
    41b4:	0106e6b3          	or	a3,a3,a6
    41b8:	00000593          	li	a1,0
    41bc:	f89ff06f          	j	4144 <__subdf3+0x3b8>
    41c0:	00c766b3          	or	a3,a4,a2
    41c4:	00d036b3          	snez	a3,a3
    41c8:	ff1ff06f          	j	41b8 <__subdf3+0x42c>
    41cc:	0e080863          	beqz	a6,42bc <__subdf3+0x530>
    41d0:	40888833          	sub	a6,a7,s0
    41d4:	04041263          	bnez	s0,4218 <__subdf3+0x48c>
    41d8:	00a7e5b3          	or	a1,a5,a0
    41dc:	34058e63          	beqz	a1,4538 <__subdf3+0x7ac>
    41e0:	fff80593          	addi	a1,a6,-1
    41e4:	00059e63          	bnez	a1,4200 <__subdf3+0x474>
    41e8:	40a60533          	sub	a0,a2,a0
    41ec:	40f70733          	sub	a4,a4,a5
    41f0:	00a63633          	sltu	a2,a2,a0
    41f4:	40c707b3          	sub	a5,a4,a2
    41f8:	00068493          	mv	s1,a3
    41fc:	f05ff06f          	j	4100 <__subdf3+0x374>
    4200:	7ff00313          	li	t1,2047
    4204:	02681463          	bne	a6,t1,422c <__subdf3+0x4a0>
    4208:	00070793          	mv	a5,a4
    420c:	00060513          	mv	a0,a2
    4210:	7ff00413          	li	s0,2047
    4214:	0d00006f          	j	42e4 <__subdf3+0x558>
    4218:	7ff00593          	li	a1,2047
    421c:	feb886e3          	beq	a7,a1,4208 <__subdf3+0x47c>
    4220:	008005b7          	lui	a1,0x800
    4224:	00b7e7b3          	or	a5,a5,a1
    4228:	00080593          	mv	a1,a6
    422c:	03800813          	li	a6,56
    4230:	08b84063          	blt	a6,a1,42b0 <__subdf3+0x524>
    4234:	01f00813          	li	a6,31
    4238:	04b84263          	blt	a6,a1,427c <__subdf3+0x4f0>
    423c:	02000313          	li	t1,32
    4240:	40b30333          	sub	t1,t1,a1
    4244:	00b55e33          	srl	t3,a0,a1
    4248:	00679833          	sll	a6,a5,t1
    424c:	00651333          	sll	t1,a0,t1
    4250:	01c86833          	or	a6,a6,t3
    4254:	00603333          	snez	t1,t1
    4258:	00686533          	or	a0,a6,t1
    425c:	00b7d5b3          	srl	a1,a5,a1
    4260:	40a60533          	sub	a0,a2,a0
    4264:	40b705b3          	sub	a1,a4,a1
    4268:	00a63633          	sltu	a2,a2,a0
    426c:	40c587b3          	sub	a5,a1,a2
    4270:	00088413          	mv	s0,a7
    4274:	00068493          	mv	s1,a3
    4278:	ee1ff06f          	j	4158 <__subdf3+0x3cc>
    427c:	fe058813          	addi	a6,a1,-32 # 7fffe0 <__bss_start+0x7cffe0>
    4280:	02000e13          	li	t3,32
    4284:	0107d833          	srl	a6,a5,a6
    4288:	00000313          	li	t1,0
    428c:	01c58863          	beq	a1,t3,429c <__subdf3+0x510>
    4290:	04000313          	li	t1,64
    4294:	40b30333          	sub	t1,t1,a1
    4298:	00679333          	sll	t1,a5,t1
    429c:	00a36333          	or	t1,t1,a0
    42a0:	00603333          	snez	t1,t1
    42a4:	00686533          	or	a0,a6,t1
    42a8:	00000593          	li	a1,0
    42ac:	fb5ff06f          	j	4260 <__subdf3+0x4d4>
    42b0:	00a7e533          	or	a0,a5,a0
    42b4:	00a03533          	snez	a0,a0
    42b8:	ff1ff06f          	j	42a8 <__subdf3+0x51c>
    42bc:	00140593          	addi	a1,s0,1
    42c0:	7fe5f593          	andi	a1,a1,2046
    42c4:	08059863          	bnez	a1,4354 <__subdf3+0x5c8>
    42c8:	00c765b3          	or	a1,a4,a2
    42cc:	00a7e833          	or	a6,a5,a0
    42d0:	06041263          	bnez	s0,4334 <__subdf3+0x5a8>
    42d4:	00081c63          	bnez	a6,42ec <__subdf3+0x560>
    42d8:	26058863          	beqz	a1,4548 <__subdf3+0x7bc>
    42dc:	00070793          	mv	a5,a4
    42e0:	00060513          	mv	a0,a2
    42e4:	00068493          	mv	s1,a3
    42e8:	d75ff06f          	j	405c <__subdf3+0x2d0>
    42ec:	d60588e3          	beqz	a1,405c <__subdf3+0x2d0>
    42f0:	40c50833          	sub	a6,a0,a2
    42f4:	010538b3          	sltu	a7,a0,a6
    42f8:	40e785b3          	sub	a1,a5,a4
    42fc:	411585b3          	sub	a1,a1,a7
    4300:	008008b7          	lui	a7,0x800
    4304:	0115f8b3          	and	a7,a1,a7
    4308:	00088c63          	beqz	a7,4320 <__subdf3+0x594>
    430c:	40a60533          	sub	a0,a2,a0
    4310:	40f70733          	sub	a4,a4,a5
    4314:	00a63633          	sltu	a2,a2,a0
    4318:	40c707b3          	sub	a5,a4,a2
    431c:	fc9ff06f          	j	42e4 <__subdf3+0x558>
    4320:	00b86533          	or	a0,a6,a1
    4324:	22050a63          	beqz	a0,4558 <__subdf3+0x7cc>
    4328:	00058793          	mv	a5,a1
    432c:	00080513          	mv	a0,a6
    4330:	d2dff06f          	j	405c <__subdf3+0x2d0>
    4334:	00081c63          	bnez	a6,434c <__subdf3+0x5c0>
    4338:	22058463          	beqz	a1,4560 <__subdf3+0x7d4>
    433c:	00070793          	mv	a5,a4
    4340:	00060513          	mv	a0,a2
    4344:	00068493          	mv	s1,a3
    4348:	afdff06f          	j	3e44 <__subdf3+0xb8>
    434c:	ae058ce3          	beqz	a1,3e44 <__subdf3+0xb8>
    4350:	d41ff06f          	j	4090 <__subdf3+0x304>
    4354:	40c509b3          	sub	s3,a0,a2
    4358:	013535b3          	sltu	a1,a0,s3
    435c:	40e78933          	sub	s2,a5,a4
    4360:	40b90933          	sub	s2,s2,a1
    4364:	008005b7          	lui	a1,0x800
    4368:	00b975b3          	and	a1,s2,a1
    436c:	08058463          	beqz	a1,43f4 <__subdf3+0x668>
    4370:	40a609b3          	sub	s3,a2,a0
    4374:	40f70933          	sub	s2,a4,a5
    4378:	01363633          	sltu	a2,a2,s3
    437c:	40c90933          	sub	s2,s2,a2
    4380:	00068493          	mv	s1,a3
    4384:	08090263          	beqz	s2,4408 <__subdf3+0x67c>
    4388:	00090513          	mv	a0,s2
    438c:	414000ef          	jal	ra,47a0 <__clzsi2>
    4390:	ff850713          	addi	a4,a0,-8
    4394:	01f00793          	li	a5,31
    4398:	08e7c063          	blt	a5,a4,4418 <__subdf3+0x68c>
    439c:	02000793          	li	a5,32
    43a0:	40e787b3          	sub	a5,a5,a4
    43a4:	00e91933          	sll	s2,s2,a4
    43a8:	00f9d7b3          	srl	a5,s3,a5
    43ac:	0127e7b3          	or	a5,a5,s2
    43b0:	00e99533          	sll	a0,s3,a4
    43b4:	0a874463          	blt	a4,s0,445c <__subdf3+0x6d0>
    43b8:	40870733          	sub	a4,a4,s0
    43bc:	00170613          	addi	a2,a4,1
    43c0:	01f00693          	li	a3,31
    43c4:	06c6c263          	blt	a3,a2,4428 <__subdf3+0x69c>
    43c8:	02000713          	li	a4,32
    43cc:	40c70733          	sub	a4,a4,a2
    43d0:	00e796b3          	sll	a3,a5,a4
    43d4:	00c555b3          	srl	a1,a0,a2
    43d8:	00e51733          	sll	a4,a0,a4
    43dc:	00b6e6b3          	or	a3,a3,a1
    43e0:	00e03733          	snez	a4,a4
    43e4:	00e6e533          	or	a0,a3,a4
    43e8:	00c7d7b3          	srl	a5,a5,a2
    43ec:	00000413          	li	s0,0
    43f0:	c6dff06f          	j	405c <__subdf3+0x2d0>
    43f4:	0129e533          	or	a0,s3,s2
    43f8:	f80516e3          	bnez	a0,4384 <__subdf3+0x5f8>
    43fc:	00000793          	li	a5,0
    4400:	00000413          	li	s0,0
    4404:	14c0006f          	j	4550 <__subdf3+0x7c4>
    4408:	00098513          	mv	a0,s3
    440c:	394000ef          	jal	ra,47a0 <__clzsi2>
    4410:	02050513          	addi	a0,a0,32
    4414:	f7dff06f          	j	4390 <__subdf3+0x604>
    4418:	fd850793          	addi	a5,a0,-40
    441c:	00f997b3          	sll	a5,s3,a5
    4420:	00000513          	li	a0,0
    4424:	f91ff06f          	j	43b4 <__subdf3+0x628>
    4428:	fe170713          	addi	a4,a4,-31
    442c:	02000593          	li	a1,32
    4430:	00e7d733          	srl	a4,a5,a4
    4434:	00000693          	li	a3,0
    4438:	00b60863          	beq	a2,a1,4448 <__subdf3+0x6bc>
    443c:	04000693          	li	a3,64
    4440:	40c686b3          	sub	a3,a3,a2
    4444:	00d796b3          	sll	a3,a5,a3
    4448:	00d566b3          	or	a3,a0,a3
    444c:	00d036b3          	snez	a3,a3
    4450:	00d76533          	or	a0,a4,a3
    4454:	00000793          	li	a5,0
    4458:	f95ff06f          	j	43ec <__subdf3+0x660>
    445c:	40e40433          	sub	s0,s0,a4
    4460:	ff800737          	lui	a4,0xff800
    4464:	fff70713          	addi	a4,a4,-1 # ff7fffff <__bss_start+0xff7cffff>
    4468:	00e7f7b3          	and	a5,a5,a4
    446c:	bf1ff06f          	j	405c <__subdf3+0x2d0>
    4470:	00070793          	mv	a5,a4
    4474:	00060513          	mv	a0,a2
    4478:	00058413          	mv	s0,a1
    447c:	be1ff06f          	j	405c <__subdf3+0x2d0>
    4480:	00070793          	mv	a5,a4
    4484:	00060513          	mv	a0,a2
    4488:	bd5ff06f          	j	405c <__subdf3+0x2d0>
    448c:	7ff00413          	li	s0,2047
    4490:	00000793          	li	a5,0
    4494:	00000513          	li	a0,0
    4498:	00800737          	lui	a4,0x800
    449c:	00e7f733          	and	a4,a5,a4
    44a0:	00070e63          	beqz	a4,44bc <__subdf3+0x730>
    44a4:	00140413          	addi	s0,s0,1
    44a8:	7ff00713          	li	a4,2047
    44ac:	0ce40263          	beq	s0,a4,4570 <__subdf3+0x7e4>
    44b0:	ff800737          	lui	a4,0xff800
    44b4:	fff70713          	addi	a4,a4,-1 # ff7fffff <__bss_start+0xff7cffff>
    44b8:	00e7f7b3          	and	a5,a5,a4
    44bc:	01d79693          	slli	a3,a5,0x1d
    44c0:	00355513          	srli	a0,a0,0x3
    44c4:	7ff00713          	li	a4,2047
    44c8:	00a6e6b3          	or	a3,a3,a0
    44cc:	0037d793          	srli	a5,a5,0x3
    44d0:	00e41e63          	bne	s0,a4,44ec <__subdf3+0x760>
    44d4:	00f6e6b3          	or	a3,a3,a5
    44d8:	00000793          	li	a5,0
    44dc:	00068863          	beqz	a3,44ec <__subdf3+0x760>
    44e0:	000807b7          	lui	a5,0x80
    44e4:	00000693          	li	a3,0
    44e8:	00000493          	li	s1,0
    44ec:	01441713          	slli	a4,s0,0x14
    44f0:	7ff00637          	lui	a2,0x7ff00
    44f4:	00c79793          	slli	a5,a5,0xc
    44f8:	01c12083          	lw	ra,28(sp)
    44fc:	01812403          	lw	s0,24(sp)
    4500:	00c77733          	and	a4,a4,a2
    4504:	00c7d793          	srli	a5,a5,0xc
    4508:	01f49493          	slli	s1,s1,0x1f
    450c:	00f767b3          	or	a5,a4,a5
    4510:	0097e733          	or	a4,a5,s1
    4514:	01012903          	lw	s2,16(sp)
    4518:	01412483          	lw	s1,20(sp)
    451c:	00c12983          	lw	s3,12(sp)
    4520:	00068513          	mv	a0,a3
    4524:	00070593          	mv	a1,a4
    4528:	02010113          	addi	sp,sp,32
    452c:	00008067          	ret
    4530:	00080413          	mv	s0,a6
    4534:	b29ff06f          	j	405c <__subdf3+0x2d0>
    4538:	00070793          	mv	a5,a4
    453c:	00060513          	mv	a0,a2
    4540:	00080413          	mv	s0,a6
    4544:	da1ff06f          	j	42e4 <__subdf3+0x558>
    4548:	00000793          	li	a5,0
    454c:	00000513          	li	a0,0
    4550:	00000493          	li	s1,0
    4554:	f45ff06f          	j	4498 <__subdf3+0x70c>
    4558:	00000793          	li	a5,0
    455c:	ff5ff06f          	j	4550 <__subdf3+0x7c4>
    4560:	00000513          	li	a0,0
    4564:	00000493          	li	s1,0
    4568:	004007b7          	lui	a5,0x400
    456c:	b31ff06f          	j	409c <__subdf3+0x310>
    4570:	00000793          	li	a5,0
    4574:	00000513          	li	a0,0
    4578:	f45ff06f          	j	44bc <__subdf3+0x730>

0000457c <__fixdfsi>:
    457c:	0145d713          	srli	a4,a1,0x14
    4580:	001006b7          	lui	a3,0x100
    4584:	fff68793          	addi	a5,a3,-1 # fffff <__bss_start+0xcffff>
    4588:	7ff77713          	andi	a4,a4,2047
    458c:	3fe00613          	li	a2,1022
    4590:	00b7f7b3          	and	a5,a5,a1
    4594:	01f5d593          	srli	a1,a1,0x1f
    4598:	04e65e63          	bge	a2,a4,45f4 <__fixdfsi+0x78>
    459c:	41d00613          	li	a2,1053
    45a0:	00e65a63          	bge	a2,a4,45b4 <__fixdfsi+0x38>
    45a4:	80000537          	lui	a0,0x80000
    45a8:	fff54513          	not	a0,a0
    45ac:	00a58533          	add	a0,a1,a0
    45b0:	00008067          	ret
    45b4:	00d7e7b3          	or	a5,a5,a3
    45b8:	43300693          	li	a3,1075
    45bc:	40e686b3          	sub	a3,a3,a4
    45c0:	01f00613          	li	a2,31
    45c4:	02d64063          	blt	a2,a3,45e4 <__fixdfsi+0x68>
    45c8:	bed70713          	addi	a4,a4,-1043
    45cc:	00e797b3          	sll	a5,a5,a4
    45d0:	00d55533          	srl	a0,a0,a3
    45d4:	00a7e533          	or	a0,a5,a0
    45d8:	02058063          	beqz	a1,45f8 <__fixdfsi+0x7c>
    45dc:	40a00533          	neg	a0,a0
    45e0:	00008067          	ret
    45e4:	41300693          	li	a3,1043
    45e8:	40e68733          	sub	a4,a3,a4
    45ec:	00e7d533          	srl	a0,a5,a4
    45f0:	fe9ff06f          	j	45d8 <__fixdfsi+0x5c>
    45f4:	00000513          	li	a0,0
    45f8:	00008067          	ret

000045fc <__fixunsdfsi>:
    45fc:	0145d713          	srli	a4,a1,0x14
    4600:	00100637          	lui	a2,0x100
    4604:	00050693          	mv	a3,a0
    4608:	fff60793          	addi	a5,a2,-1 # fffff <__bss_start+0xcffff>
    460c:	7ff77713          	andi	a4,a4,2047
    4610:	3fe00513          	li	a0,1022
    4614:	00b7f7b3          	and	a5,a5,a1
    4618:	01f5d593          	srli	a1,a1,0x1f
    461c:	04e55a63          	bge	a0,a4,4670 <__fixunsdfsi+0x74>
    4620:	00000513          	li	a0,0
    4624:	00059863          	bnez	a1,4634 <__fixunsdfsi+0x38>
    4628:	41e00593          	li	a1,1054
    462c:	fff00513          	li	a0,-1
    4630:	00e5d463          	bge	a1,a4,4638 <__fixunsdfsi+0x3c>
    4634:	00008067          	ret
    4638:	00c7e7b3          	or	a5,a5,a2
    463c:	43300613          	li	a2,1075
    4640:	40e60633          	sub	a2,a2,a4
    4644:	01f00593          	li	a1,31
    4648:	00c5cc63          	blt	a1,a2,4660 <__fixunsdfsi+0x64>
    464c:	bed70713          	addi	a4,a4,-1043
    4650:	00e797b3          	sll	a5,a5,a4
    4654:	00c6d533          	srl	a0,a3,a2
    4658:	00a7e533          	or	a0,a5,a0
    465c:	00008067          	ret
    4660:	41300693          	li	a3,1043
    4664:	40e68733          	sub	a4,a3,a4
    4668:	00e7d533          	srl	a0,a5,a4
    466c:	00008067          	ret
    4670:	00000513          	li	a0,0
    4674:	00008067          	ret

00004678 <__floatsidf>:
    4678:	ff010113          	addi	sp,sp,-16
    467c:	00112623          	sw	ra,12(sp)
    4680:	00812423          	sw	s0,8(sp)
    4684:	00912223          	sw	s1,4(sp)
    4688:	08050663          	beqz	a0,4714 <__floatsidf+0x9c>
    468c:	41f55793          	srai	a5,a0,0x1f
    4690:	00a7c433          	xor	s0,a5,a0
    4694:	40f40433          	sub	s0,s0,a5
    4698:	01f55493          	srli	s1,a0,0x1f
    469c:	00040513          	mv	a0,s0
    46a0:	100000ef          	jal	ra,47a0 <__clzsi2>
    46a4:	41e00713          	li	a4,1054
    46a8:	00a00793          	li	a5,10
    46ac:	40a70733          	sub	a4,a4,a0
    46b0:	04a7c863          	blt	a5,a0,4700 <__floatsidf+0x88>
    46b4:	00b00793          	li	a5,11
    46b8:	40a787b3          	sub	a5,a5,a0
    46bc:	01550513          	addi	a0,a0,21 # 80000015 <__bss_start+0x7ffd0015>
    46c0:	00f457b3          	srl	a5,s0,a5
    46c4:	00a41433          	sll	s0,s0,a0
    46c8:	00048513          	mv	a0,s1
    46cc:	00c79793          	slli	a5,a5,0xc
    46d0:	00c7d793          	srli	a5,a5,0xc
    46d4:	01471713          	slli	a4,a4,0x14
    46d8:	01f51513          	slli	a0,a0,0x1f
    46dc:	00f76733          	or	a4,a4,a5
    46e0:	00c12083          	lw	ra,12(sp)
    46e4:	00a767b3          	or	a5,a4,a0
    46e8:	00040513          	mv	a0,s0
    46ec:	00812403          	lw	s0,8(sp)
    46f0:	00412483          	lw	s1,4(sp)
    46f4:	00078593          	mv	a1,a5
    46f8:	01010113          	addi	sp,sp,16
    46fc:	00008067          	ret
    4700:	ff550513          	addi	a0,a0,-11
    4704:	00a417b3          	sll	a5,s0,a0
    4708:	00048513          	mv	a0,s1
    470c:	00000413          	li	s0,0
    4710:	fbdff06f          	j	46cc <__floatsidf+0x54>
    4714:	00000713          	li	a4,0
    4718:	00000793          	li	a5,0
    471c:	ff1ff06f          	j	470c <__floatsidf+0x94>

00004720 <__floatunsidf>:
    4720:	ff010113          	addi	sp,sp,-16
    4724:	00812423          	sw	s0,8(sp)
    4728:	00112623          	sw	ra,12(sp)
    472c:	00050413          	mv	s0,a0
    4730:	06050263          	beqz	a0,4794 <__floatunsidf+0x74>
    4734:	06c000ef          	jal	ra,47a0 <__clzsi2>
    4738:	41e00713          	li	a4,1054
    473c:	00a00793          	li	a5,10
    4740:	40a70733          	sub	a4,a4,a0
    4744:	04a7c063          	blt	a5,a0,4784 <__floatunsidf+0x64>
    4748:	00b00793          	li	a5,11
    474c:	40a787b3          	sub	a5,a5,a0
    4750:	01550513          	addi	a0,a0,21
    4754:	00f457b3          	srl	a5,s0,a5
    4758:	00a41433          	sll	s0,s0,a0
    475c:	00c12083          	lw	ra,12(sp)
    4760:	00040513          	mv	a0,s0
    4764:	00c79793          	slli	a5,a5,0xc
    4768:	00812403          	lw	s0,8(sp)
    476c:	01471713          	slli	a4,a4,0x14
    4770:	00c7d793          	srli	a5,a5,0xc
    4774:	00f766b3          	or	a3,a4,a5
    4778:	00068593          	mv	a1,a3
    477c:	01010113          	addi	sp,sp,16
    4780:	00008067          	ret
    4784:	ff550513          	addi	a0,a0,-11
    4788:	00a417b3          	sll	a5,s0,a0
    478c:	00000413          	li	s0,0
    4790:	fcdff06f          	j	475c <__floatunsidf+0x3c>
    4794:	00000793          	li	a5,0
    4798:	00000713          	li	a4,0
    479c:	fc1ff06f          	j	475c <__floatunsidf+0x3c>

000047a0 <__clzsi2>:
    47a0:	000107b7          	lui	a5,0x10
    47a4:	02f57a63          	bgeu	a0,a5,47d8 <__clzsi2+0x38>
    47a8:	10053793          	sltiu	a5,a0,256
    47ac:	0017c793          	xori	a5,a5,1
    47b0:	00379793          	slli	a5,a5,0x3
    47b4:	00020737          	lui	a4,0x20
    47b8:	02000693          	li	a3,32
    47bc:	40f686b3          	sub	a3,a3,a5
    47c0:	00f55533          	srl	a0,a0,a5
    47c4:	25870793          	addi	a5,a4,600 # 20258 <__clz_tab>
    47c8:	00a787b3          	add	a5,a5,a0
    47cc:	0007c503          	lbu	a0,0(a5) # 10000 <__clzsi2+0xb860>
    47d0:	40a68533          	sub	a0,a3,a0
    47d4:	00008067          	ret
    47d8:	01000737          	lui	a4,0x1000
    47dc:	01000793          	li	a5,16
    47e0:	fce56ae3          	bltu	a0,a4,47b4 <__clzsi2+0x14>
    47e4:	01800793          	li	a5,24
    47e8:	fcdff06f          	j	47b4 <__clzsi2+0x14>
