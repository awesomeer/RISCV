
main:     file format elf32-littleriscv


Disassembly of section .text:

00000000 <_start>:

extern void main(void);
void _start(void){
   0:	ff010113          	addi	sp,sp,-16
   4:	00112623          	sw	ra,12(sp)
    main();
   8:	008000ef          	jal	ra,10 <main>
    while(1);
   c:	0000006f          	j	c <_start+0xc>

00000010 <main>:
//   }
//   return 0;
// }


void main(void){
  10:	fe010113          	addi	sp,sp,-32
  14:	00112e23          	sw	ra,28(sp)
  18:	00812c23          	sw	s0,24(sp)
  1c:	00912a23          	sw	s1,20(sp)
  20:	01212823          	sw	s2,16(sp)
  24:	01312623          	sw	s3,12(sp)
  28:	01412423          	sw	s4,8(sp)

    uint32_t prime = 1;
  2c:	00100413          	li	s0,1
    while(1){

        con:
        prime++;
        for(uint32_t i = 2; i <= prime/2; i++){
  30:	00300a13          	li	s4,3
            if(prime % i == 0)
                goto con;
        }
        LEDS = prime;        

        uint64_t ipc = (IPC  * 10000) / TICK;
  34:	000024b7          	lui	s1,0x2
  38:	71048493          	addi	s1,s1,1808 # 2710 <__udivdi3+0x251c>
  3c:	0900006f          	j	cc <main+0xbc>
        LEDS = prime;        
  40:	00802223          	sw	s0,4(zero) # 4 <_start+0x4>
        uint64_t ipc = (IPC  * 10000) / TICK;
  44:	02002803          	lw	a6,32(zero) # 20 <main+0x10>
  48:	02402883          	lw	a7,36(zero) # 24 <main+0x14>
  4c:	02802603          	lw	a2,40(zero) # 28 <main+0x18>
  50:	02c02683          	lw	a3,44(zero) # 2c <main+0x1c>
  54:	029885b3          	mul	a1,a7,s1
  58:	029837b3          	mulhu	a5,a6,s1
  5c:	03048533          	mul	a0,s1,a6
  60:	00f585b3          	add	a1,a1,a5
  64:	190000ef          	jal	ra,1f4 <__udivdi3>
  68:	00050993          	mv	s3,a0
        uint64_t bpc = (BPCC * 10000) / BPC;
  6c:	01002803          	lw	a6,16(zero) # 10 <main>
  70:	01402883          	lw	a7,20(zero) # 14 <main+0x4>
  74:	01802603          	lw	a2,24(zero) # 18 <main+0x8>
  78:	01c02683          	lw	a3,28(zero) # 1c <main+0xc>
  7c:	029885b3          	mul	a1,a7,s1
  80:	029837b3          	mulhu	a5,a6,s1
  84:	03048533          	mul	a0,s1,a6
  88:	00f585b3          	add	a1,a1,a5
  8c:	168000ef          	jal	ra,1f4 <__udivdi3>
  90:	00050913          	mv	s2,a0

        uart_send_uint32(prime); uart_send_char(' ');
  94:	00040513          	mv	a0,s0
  98:	0f0000ef          	jal	ra,188 <uart_send_uint32>
  9c:	02000513          	li	a0,32
  a0:	058000ef          	jal	ra,f8 <uart_send_char>
        uart_send_uint32( (uint32_t) ipc); uart_send_char(' ');
  a4:	00098513          	mv	a0,s3
  a8:	0e0000ef          	jal	ra,188 <uart_send_uint32>
  ac:	02000513          	li	a0,32
  b0:	048000ef          	jal	ra,f8 <uart_send_char>
        uart_send_uint32( (uint32_t) bpc); uart_send_char('\n');
  b4:	00090513          	mv	a0,s2
  b8:	0d0000ef          	jal	ra,188 <uart_send_uint32>
  bc:	00a00513          	li	a0,10
  c0:	038000ef          	jal	ra,f8 <uart_send_char>

        uart_send_char('\r');
  c4:	00d00513          	li	a0,13
  c8:	030000ef          	jal	ra,f8 <uart_send_char>
        prime++;
  cc:	00140413          	addi	s0,s0,1
        for(uint32_t i = 2; i <= prime/2; i++){
  d0:	f68a78e3          	bgeu	s4,s0,40 <main+0x30>
            if(prime % i == 0)
  d4:	00147793          	andi	a5,s0,1
  d8:	fe078ae3          	beqz	a5,cc <main+0xbc>
        for(uint32_t i = 2; i <= prime/2; i++){
  dc:	00145713          	srli	a4,s0,0x1
  e0:	00200793          	li	a5,2
  e4:	00178793          	addi	a5,a5,1
  e8:	f4f76ce3          	bltu	a4,a5,40 <main+0x30>
            if(prime % i == 0)
  ec:	02f476b3          	remu	a3,s0,a5
  f0:	fe069ae3          	bnez	a3,e4 <main+0xd4>
  f4:	fd9ff06f          	j	cc <main+0xbc>

000000f8 <uart_send_char>:
#include "../inc/uart.h"


#include <math.h>
void uart_send_char(uint8_t num){
    while(UART0->CTRL & 2);
  f8:	03002783          	lw	a5,48(zero) # 30 <main+0x20>
  fc:	0027f793          	andi	a5,a5,2
 100:	fe079ce3          	bnez	a5,f8 <uart_send_char>
    UART0->DATA = num;
 104:	02a02a23          	sw	a0,52(zero) # 34 <main+0x24>
}
 108:	00008067          	ret

0000010c <uart_send_string>:

void uart_send_string(uint8_t * str, uint32_t len){
    for(uint32_t i = 0; i < len; i++){
 10c:	04058063          	beqz	a1,14c <uart_send_string+0x40>
void uart_send_string(uint8_t * str, uint32_t len){
 110:	ff010113          	addi	sp,sp,-16
 114:	00112623          	sw	ra,12(sp)
 118:	00812423          	sw	s0,8(sp)
 11c:	00912223          	sw	s1,4(sp)
 120:	00050413          	mv	s0,a0
 124:	00b504b3          	add	s1,a0,a1
        uart_send_char(str[i]);
 128:	00044503          	lbu	a0,0(s0)
 12c:	fcdff0ef          	jal	ra,f8 <uart_send_char>
    for(uint32_t i = 0; i < len; i++){
 130:	00140413          	addi	s0,s0,1
 134:	fe941ae3          	bne	s0,s1,128 <uart_send_string+0x1c>
    }
}
 138:	00c12083          	lw	ra,12(sp)
 13c:	00812403          	lw	s0,8(sp)
 140:	00412483          	lw	s1,4(sp)
 144:	01010113          	addi	sp,sp,16
 148:	00008067          	ret
 14c:	00008067          	ret

00000150 <uart_send_stringn>:

void uart_send_stringn(uint8_t * str){
 150:	ff010113          	addi	sp,sp,-16
 154:	00112623          	sw	ra,12(sp)
 158:	00812423          	sw	s0,8(sp)
 15c:	00050413          	mv	s0,a0

    while(*str){
 160:	00054503          	lbu	a0,0(a0)
 164:	00050a63          	beqz	a0,178 <uart_send_stringn+0x28>
        uart_send_char(*str++);
 168:	00140413          	addi	s0,s0,1
 16c:	f8dff0ef          	jal	ra,f8 <uart_send_char>
    while(*str){
 170:	00044503          	lbu	a0,0(s0)
 174:	fe051ae3          	bnez	a0,168 <uart_send_stringn+0x18>
    }
}
 178:	00c12083          	lw	ra,12(sp)
 17c:	00812403          	lw	s0,8(sp)
 180:	01010113          	addi	sp,sp,16
 184:	00008067          	ret

00000188 <uart_send_uint32>:

void uart_send_uint32(uint32_t num){
 188:	fe010113          	addi	sp,sp,-32
 18c:	00112e23          	sw	ra,28(sp)
    uint8_t buf[11];

    uint32_t len = 0;
    uint32_t temp = num;
 190:	00050713          	mv	a4,a0
    uint32_t len = 0;
 194:	00000793          	li	a5,0
    do{
        len++;
        temp /= 10;
 198:	00a00593          	li	a1,10
    }while(temp);
 19c:	00900613          	li	a2,9
        len++;
 1a0:	00178793          	addi	a5,a5,1
        temp /= 10;
 1a4:	00070693          	mv	a3,a4
 1a8:	02b75733          	divu	a4,a4,a1
    }while(temp);
 1ac:	fed66ae3          	bltu	a2,a3,1a0 <uart_send_uint32+0x18>
    
    buf[len] = 0;
 1b0:	01078713          	addi	a4,a5,16
 1b4:	00270733          	add	a4,a4,sp
 1b8:	fe070a23          	sb	zero,-12(a4)
 1bc:	00410613          	addi	a2,sp,4
 1c0:	00f607b3          	add	a5,a2,a5
    do{
        len--;
        buf[len] = (num % 10) + 0x30;
 1c4:	00a00693          	li	a3,10
 1c8:	02d57733          	remu	a4,a0,a3
 1cc:	03070713          	addi	a4,a4,48
 1d0:	fee78fa3          	sb	a4,-1(a5)
        num /= 10;
 1d4:	02d55533          	divu	a0,a0,a3
    }while(len);
 1d8:	fff78793          	addi	a5,a5,-1
 1dc:	fec796e3          	bne	a5,a2,1c8 <uart_send_uint32+0x40>
    
    uart_send_stringn(buf);
 1e0:	00410513          	addi	a0,sp,4
 1e4:	f6dff0ef          	jal	ra,150 <uart_send_stringn>
 1e8:	01c12083          	lw	ra,28(sp)
 1ec:	02010113          	addi	sp,sp,32
 1f0:	00008067          	ret

000001f4 <__udivdi3>:
 1f4:	00050313          	mv	t1,a0
 1f8:	00058893          	mv	a7,a1
 1fc:	00060713          	mv	a4,a2
 200:	00050813          	mv	a6,a0
 204:	00058793          	mv	a5,a1
 208:	28069263          	bnez	a3,48c <__udivdi3+0x298>
 20c:	000205b7          	lui	a1,0x20
 210:	00058593          	mv	a1,a1
 214:	0ec8f663          	bgeu	a7,a2,300 <__udivdi3+0x10c>
 218:	000106b7          	lui	a3,0x10
 21c:	0cd67863          	bgeu	a2,a3,2ec <__udivdi3+0xf8>
 220:	10063693          	sltiu	a3,a2,256
 224:	0016c693          	xori	a3,a3,1
 228:	00369693          	slli	a3,a3,0x3
 22c:	00d65533          	srl	a0,a2,a3
 230:	00a585b3          	add	a1,a1,a0
 234:	0005c583          	lbu	a1,0(a1) # 20000 <__clz_tab>
 238:	02000513          	li	a0,32
 23c:	00d586b3          	add	a3,a1,a3
 240:	40d505b3          	sub	a1,a0,a3
 244:	00d50c63          	beq	a0,a3,25c <__udivdi3+0x68>
 248:	00b897b3          	sll	a5,a7,a1
 24c:	00d356b3          	srl	a3,t1,a3
 250:	00b61733          	sll	a4,a2,a1
 254:	00f6e7b3          	or	a5,a3,a5
 258:	00b31833          	sll	a6,t1,a1
 25c:	01075593          	srli	a1,a4,0x10
 260:	02b7d333          	divu	t1,a5,a1
 264:	01071613          	slli	a2,a4,0x10
 268:	01065613          	srli	a2,a2,0x10
 26c:	02b7f7b3          	remu	a5,a5,a1
 270:	00030513          	mv	a0,t1
 274:	026608b3          	mul	a7,a2,t1
 278:	01079693          	slli	a3,a5,0x10
 27c:	01085793          	srli	a5,a6,0x10
 280:	00d7e7b3          	or	a5,a5,a3
 284:	0117fe63          	bgeu	a5,a7,2a0 <__udivdi3+0xac>
 288:	00e787b3          	add	a5,a5,a4
 28c:	fff30513          	addi	a0,t1,-1
 290:	00e7e863          	bltu	a5,a4,2a0 <__udivdi3+0xac>
 294:	0117f663          	bgeu	a5,a7,2a0 <__udivdi3+0xac>
 298:	ffe30513          	addi	a0,t1,-2
 29c:	00e787b3          	add	a5,a5,a4
 2a0:	411787b3          	sub	a5,a5,a7
 2a4:	02b7d8b3          	divu	a7,a5,a1
 2a8:	01081813          	slli	a6,a6,0x10
 2ac:	01085813          	srli	a6,a6,0x10
 2b0:	02b7f7b3          	remu	a5,a5,a1
 2b4:	031606b3          	mul	a3,a2,a7
 2b8:	01079793          	slli	a5,a5,0x10
 2bc:	00f86833          	or	a6,a6,a5
 2c0:	00088793          	mv	a5,a7
 2c4:	00d87c63          	bgeu	a6,a3,2dc <__udivdi3+0xe8>
 2c8:	01070833          	add	a6,a4,a6
 2cc:	fff88793          	addi	a5,a7,-1
 2d0:	00e86663          	bltu	a6,a4,2dc <__udivdi3+0xe8>
 2d4:	00d87463          	bgeu	a6,a3,2dc <__udivdi3+0xe8>
 2d8:	ffe88793          	addi	a5,a7,-2
 2dc:	01051513          	slli	a0,a0,0x10
 2e0:	00f56533          	or	a0,a0,a5
 2e4:	00000593          	li	a1,0
 2e8:	00008067          	ret
 2ec:	01000537          	lui	a0,0x1000
 2f0:	01000693          	li	a3,16
 2f4:	f2a66ce3          	bltu	a2,a0,22c <__udivdi3+0x38>
 2f8:	01800693          	li	a3,24
 2fc:	f31ff06f          	j	22c <__udivdi3+0x38>
 300:	00061463          	bnez	a2,308 <__udivdi3+0x114>
 304:	00100073          	ebreak
 308:	000107b7          	lui	a5,0x10
 30c:	0cf67063          	bgeu	a2,a5,3cc <__udivdi3+0x1d8>
 310:	10063693          	sltiu	a3,a2,256
 314:	0016c693          	xori	a3,a3,1
 318:	00369693          	slli	a3,a3,0x3
 31c:	00d657b3          	srl	a5,a2,a3
 320:	00f585b3          	add	a1,a1,a5
 324:	0005c783          	lbu	a5,0(a1)
 328:	00d787b3          	add	a5,a5,a3
 32c:	02000693          	li	a3,32
 330:	40f685b3          	sub	a1,a3,a5
 334:	0af69663          	bne	a3,a5,3e0 <__udivdi3+0x1ec>
 338:	40c887b3          	sub	a5,a7,a2
 33c:	00100593          	li	a1,1
 340:	01075893          	srli	a7,a4,0x10
 344:	0317de33          	divu	t3,a5,a7
 348:	01071613          	slli	a2,a4,0x10
 34c:	01065613          	srli	a2,a2,0x10
 350:	01085693          	srli	a3,a6,0x10
 354:	0317f7b3          	remu	a5,a5,a7
 358:	000e0513          	mv	a0,t3
 35c:	03c60333          	mul	t1,a2,t3
 360:	01079793          	slli	a5,a5,0x10
 364:	00f6e7b3          	or	a5,a3,a5
 368:	0067fe63          	bgeu	a5,t1,384 <__udivdi3+0x190>
 36c:	00e787b3          	add	a5,a5,a4
 370:	fffe0513          	addi	a0,t3,-1
 374:	00e7e863          	bltu	a5,a4,384 <__udivdi3+0x190>
 378:	0067f663          	bgeu	a5,t1,384 <__udivdi3+0x190>
 37c:	ffee0513          	addi	a0,t3,-2
 380:	00e787b3          	add	a5,a5,a4
 384:	406787b3          	sub	a5,a5,t1
 388:	0317d333          	divu	t1,a5,a7
 38c:	01081813          	slli	a6,a6,0x10
 390:	01085813          	srli	a6,a6,0x10
 394:	0317f7b3          	remu	a5,a5,a7
 398:	026606b3          	mul	a3,a2,t1
 39c:	01079793          	slli	a5,a5,0x10
 3a0:	00f86833          	or	a6,a6,a5
 3a4:	00030793          	mv	a5,t1
 3a8:	00d87c63          	bgeu	a6,a3,3c0 <__udivdi3+0x1cc>
 3ac:	01070833          	add	a6,a4,a6
 3b0:	fff30793          	addi	a5,t1,-1
 3b4:	00e86663          	bltu	a6,a4,3c0 <__udivdi3+0x1cc>
 3b8:	00d87463          	bgeu	a6,a3,3c0 <__udivdi3+0x1cc>
 3bc:	ffe30793          	addi	a5,t1,-2
 3c0:	01051513          	slli	a0,a0,0x10
 3c4:	00f56533          	or	a0,a0,a5
 3c8:	00008067          	ret
 3cc:	010007b7          	lui	a5,0x1000
 3d0:	01000693          	li	a3,16
 3d4:	f4f664e3          	bltu	a2,a5,31c <__udivdi3+0x128>
 3d8:	01800693          	li	a3,24
 3dc:	f41ff06f          	j	31c <__udivdi3+0x128>
 3e0:	00b61733          	sll	a4,a2,a1
 3e4:	00f8d6b3          	srl	a3,a7,a5
 3e8:	01075513          	srli	a0,a4,0x10
 3ec:	00f357b3          	srl	a5,t1,a5
 3f0:	00b31833          	sll	a6,t1,a1
 3f4:	02a6d333          	divu	t1,a3,a0
 3f8:	01071613          	slli	a2,a4,0x10
 3fc:	00b898b3          	sll	a7,a7,a1
 400:	01065613          	srli	a2,a2,0x10
 404:	0117e7b3          	or	a5,a5,a7
 408:	02a6f6b3          	remu	a3,a3,a0
 40c:	026608b3          	mul	a7,a2,t1
 410:	01069593          	slli	a1,a3,0x10
 414:	0107d693          	srli	a3,a5,0x10
 418:	00b6e6b3          	or	a3,a3,a1
 41c:	00030593          	mv	a1,t1
 420:	0116fe63          	bgeu	a3,a7,43c <__udivdi3+0x248>
 424:	00e686b3          	add	a3,a3,a4
 428:	fff30593          	addi	a1,t1,-1
 42c:	00e6e863          	bltu	a3,a4,43c <__udivdi3+0x248>
 430:	0116f663          	bgeu	a3,a7,43c <__udivdi3+0x248>
 434:	ffe30593          	addi	a1,t1,-2
 438:	00e686b3          	add	a3,a3,a4
 43c:	411686b3          	sub	a3,a3,a7
 440:	02a6d8b3          	divu	a7,a3,a0
 444:	01079793          	slli	a5,a5,0x10
 448:	0107d793          	srli	a5,a5,0x10
 44c:	02a6f6b3          	remu	a3,a3,a0
 450:	03160633          	mul	a2,a2,a7
 454:	01069693          	slli	a3,a3,0x10
 458:	00d7e7b3          	or	a5,a5,a3
 45c:	00088693          	mv	a3,a7
 460:	00c7fe63          	bgeu	a5,a2,47c <__udivdi3+0x288>
 464:	00e787b3          	add	a5,a5,a4
 468:	fff88693          	addi	a3,a7,-1
 46c:	00e7e863          	bltu	a5,a4,47c <__udivdi3+0x288>
 470:	00c7f663          	bgeu	a5,a2,47c <__udivdi3+0x288>
 474:	ffe88693          	addi	a3,a7,-2
 478:	00e787b3          	add	a5,a5,a4
 47c:	01059593          	slli	a1,a1,0x10
 480:	40c787b3          	sub	a5,a5,a2
 484:	00d5e5b3          	or	a1,a1,a3
 488:	eb9ff06f          	j	340 <__udivdi3+0x14c>
 48c:	18d5e663          	bltu	a1,a3,618 <__udivdi3+0x424>
 490:	000107b7          	lui	a5,0x10
 494:	04f6f463          	bgeu	a3,a5,4dc <__udivdi3+0x2e8>
 498:	1006b713          	sltiu	a4,a3,256
 49c:	00174713          	xori	a4,a4,1
 4a0:	00371713          	slli	a4,a4,0x3
 4a4:	000207b7          	lui	a5,0x20
 4a8:	00e6d5b3          	srl	a1,a3,a4
 4ac:	00078793          	mv	a5,a5
 4b0:	00b787b3          	add	a5,a5,a1
 4b4:	0007c783          	lbu	a5,0(a5) # 20000 <__clz_tab>
 4b8:	00e787b3          	add	a5,a5,a4
 4bc:	02000713          	li	a4,32
 4c0:	40f705b3          	sub	a1,a4,a5
 4c4:	02f71663          	bne	a4,a5,4f0 <__udivdi3+0x2fc>
 4c8:	00100513          	li	a0,1
 4cc:	e116eee3          	bltu	a3,a7,2e8 <__udivdi3+0xf4>
 4d0:	00c33533          	sltu	a0,t1,a2
 4d4:	00154513          	xori	a0,a0,1
 4d8:	00008067          	ret
 4dc:	010007b7          	lui	a5,0x1000
 4e0:	01000713          	li	a4,16
 4e4:	fcf6e0e3          	bltu	a3,a5,4a4 <__udivdi3+0x2b0>
 4e8:	01800713          	li	a4,24
 4ec:	fb9ff06f          	j	4a4 <__udivdi3+0x2b0>
 4f0:	00f65733          	srl	a4,a2,a5
 4f4:	00b696b3          	sll	a3,a3,a1
 4f8:	00d766b3          	or	a3,a4,a3
 4fc:	00f8d733          	srl	a4,a7,a5
 500:	00b898b3          	sll	a7,a7,a1
 504:	00f357b3          	srl	a5,t1,a5
 508:	0117e7b3          	or	a5,a5,a7
 50c:	0106d893          	srli	a7,a3,0x10
 510:	03175eb3          	divu	t4,a4,a7
 514:	01069813          	slli	a6,a3,0x10
 518:	01085813          	srli	a6,a6,0x10
 51c:	00b61633          	sll	a2,a2,a1
 520:	03177733          	remu	a4,a4,a7
 524:	03d80e33          	mul	t3,a6,t4
 528:	01071513          	slli	a0,a4,0x10
 52c:	0107d713          	srli	a4,a5,0x10
 530:	00a76733          	or	a4,a4,a0
 534:	000e8513          	mv	a0,t4
 538:	01c77e63          	bgeu	a4,t3,554 <__udivdi3+0x360>
 53c:	00d70733          	add	a4,a4,a3
 540:	fffe8513          	addi	a0,t4,-1
 544:	00d76863          	bltu	a4,a3,554 <__udivdi3+0x360>
 548:	01c77663          	bgeu	a4,t3,554 <__udivdi3+0x360>
 54c:	ffee8513          	addi	a0,t4,-2
 550:	00d70733          	add	a4,a4,a3
 554:	41c70733          	sub	a4,a4,t3
 558:	03175e33          	divu	t3,a4,a7
 55c:	01079793          	slli	a5,a5,0x10
 560:	0107d793          	srli	a5,a5,0x10
 564:	03177733          	remu	a4,a4,a7
 568:	03c80833          	mul	a6,a6,t3
 56c:	01071713          	slli	a4,a4,0x10
 570:	00e7e7b3          	or	a5,a5,a4
 574:	000e0713          	mv	a4,t3
 578:	0107fe63          	bgeu	a5,a6,594 <__udivdi3+0x3a0>
 57c:	00d787b3          	add	a5,a5,a3
 580:	fffe0713          	addi	a4,t3,-1
 584:	00d7e863          	bltu	a5,a3,594 <__udivdi3+0x3a0>
 588:	0107f663          	bgeu	a5,a6,594 <__udivdi3+0x3a0>
 58c:	ffee0713          	addi	a4,t3,-2
 590:	00d787b3          	add	a5,a5,a3
 594:	01051513          	slli	a0,a0,0x10
 598:	00010e37          	lui	t3,0x10
 59c:	00e56533          	or	a0,a0,a4
 5a0:	fffe0693          	addi	a3,t3,-1 # ffff <__udivdi3+0xfe0b>
 5a4:	00d57733          	and	a4,a0,a3
 5a8:	410787b3          	sub	a5,a5,a6
 5ac:	00d676b3          	and	a3,a2,a3
 5b0:	01055813          	srli	a6,a0,0x10
 5b4:	01065613          	srli	a2,a2,0x10
 5b8:	02d708b3          	mul	a7,a4,a3
 5bc:	02d806b3          	mul	a3,a6,a3
 5c0:	02c70733          	mul	a4,a4,a2
 5c4:	02c80833          	mul	a6,a6,a2
 5c8:	00d70633          	add	a2,a4,a3
 5cc:	0108d713          	srli	a4,a7,0x10
 5d0:	00c70733          	add	a4,a4,a2
 5d4:	00d77463          	bgeu	a4,a3,5dc <__udivdi3+0x3e8>
 5d8:	01c80833          	add	a6,a6,t3
 5dc:	01075693          	srli	a3,a4,0x10
 5e0:	010686b3          	add	a3,a3,a6
 5e4:	02d7e663          	bltu	a5,a3,610 <__udivdi3+0x41c>
 5e8:	ced79ee3          	bne	a5,a3,2e4 <__udivdi3+0xf0>
 5ec:	000107b7          	lui	a5,0x10
 5f0:	fff78793          	addi	a5,a5,-1 # ffff <__udivdi3+0xfe0b>
 5f4:	00f77733          	and	a4,a4,a5
 5f8:	01071713          	slli	a4,a4,0x10
 5fc:	00f8f8b3          	and	a7,a7,a5
 600:	00b31333          	sll	t1,t1,a1
 604:	01170733          	add	a4,a4,a7
 608:	00000593          	li	a1,0
 60c:	cce37ee3          	bgeu	t1,a4,2e8 <__udivdi3+0xf4>
 610:	fff50513          	addi	a0,a0,-1 # ffffff <_end+0xfcffdf>
 614:	cd1ff06f          	j	2e4 <__udivdi3+0xf0>
 618:	00000593          	li	a1,0
 61c:	00000513          	li	a0,0
 620:	00008067          	ret
